/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell = exports.NewlineTransformer = exports.PythonShellErrorWithLogs = exports.PythonShellError = void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function(source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {
    };
    exports.PythonShellError = PythonShellError;
    var PythonShellErrorWithLogs = class extends PythonShellError {
    };
    exports.PythonShellErrorWithLogs = PythonShellErrorWithLogs;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData)
          data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData)
          this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell2 = class extends events_1.EventEmitter {
      /**
       * spawns a python process
       * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified
       * @param options
       * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines
       * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines
       */
      constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell2[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error("scriptPath cannot be empty! You must give a script for python to run");
        let self = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell2.defaultOptions, options);
        let pythonPath;
        if (!options.pythonPath) {
          pythonPath = PythonShell2.defaultPythonPath;
        } else
          pythonPath = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(options.scriptPath || "", scriptPath);
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);
        ["stdout", "stdin", "stderr"].forEach(function(name) {
          self[name] = self.childProcess[name];
          self.parser && self[name] && self[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter)
            stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter)
            stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function(data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function() {
            self.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function() {
            self.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function(err) {
          self.emit("error", err);
        });
        this.childProcess.on("exit", function(code, signal) {
          self.exitCode = code;
          self.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null)
            return;
          let err;
          if (self.exitCode && self.exitCode !== 0) {
            if (errorData) {
              err = self.parseError(errorData);
            } else {
              err = new PythonShellError("process exited with code " + self.exitCode);
            }
            err = extend(err, {
              executable: pythonPath,
              options: pythonOptions.length ? pythonOptions : null,
              script: self.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self.exitCode
            });
            if (self.listeners("pythonError").length || !self._endCallback) {
              self.emit("pythonError", err);
            }
          }
          self.terminated = true;
          self.emit("close");
          self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);
        }
        ;
      }
      /**
       * checks syntax without executing code
       * @returns rejects promise w/ string error output if syntax failure
       */
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;
      }
      /**
       * checks syntax without executing code
       * @returns {Promise} rejects w/ stderr if syntax failure
       */
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath = this.getPythonPath();
          let compileCommand = `${pythonPath} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      /**
       * Runs a Python script and returns collected messages as a promise.
       * If the promise is rejected, the err will probably be of type PythonShellErrorWithLogs
       * @param scriptPath   The path to the script to execute
       * @param options  The execution options
       */
      static run(scriptPath, options) {
        return new Promise((resolve, reject) => {
          let pyshell = new PythonShell2(scriptPath, options);
          let output = [];
          pyshell.on("message", function(message) {
            output.push(message);
          }).end(function(err) {
            if (err) {
              err.logs = output;
              reject(err);
            } else
              resolve(output);
          });
        });
      }
      /**
       * Runs the inputted string of python code and returns collected messages as a promise. DO NOT ALLOW UNTRUSTED USER INPUT HERE!
       * @param code   The python code to execute
       * @param options  The execution options
       * @return a promise with the output from the python script
       */
      static runString(code, options) {
        const randomInt = getRandomInt();
        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell2.run(filePath, options);
      }
      static getVersion(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return execPromise(pythonPath + " --version");
      }
      static getVersionSync(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return (0, child_process_1.execSync)(pythonPath + " --version").toString();
      }
      /**
       * Parses an error thrown from the Python process through stderr
       * @param  {string|Buffer} data The stderr contents to parse
       * @return {Error} The parsed error with extended stack trace when traceback is available
       */
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack += os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      /**
       * Sends a message to the Python shell through stdin
       * Override this method to format data to be sent to the Python process
       * @returns {PythonShell} The same instance for chaining calls
       */
      send(message) {
        if (!this.stdin)
          throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary")
          data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      /**
       * Closes the stdin stream. Unless python is listening for stdin in a loop
       * this should cause the process to finish its work and close.
       * @returns {PythonShell} The same instance for chaining calls
       */
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      /**
       * Sends a kill signal to the process
       * @returns {PythonShell} The same instance for chaining calls
       */
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      /**
       * Alias for kill.
       * @deprecated
       */
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell2;
    PythonShell2.defaultPythonPath = process.platform != "win32" ? "python3" : "python";
    PythonShell2.defaultOptions = {};
    PythonShell2.format = {
      text: function toText(data) {
        if (!data)
          return "";
        else if (typeof data !== "string")
          return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      }
    };
    PythonShell2.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AngryReviewerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_python_shell = __toESM(require_python_shell());

// angry-reviewer-script.ts
var script = ``;
function compileScript(text, english) {
  let custom_script = `

def obsidian_func(text, english="american"):
	text = text.split("\\n")
	print(json.dumps(main(text, english)))

obsidian_func("""${text}""", "${english}")

	`;
  return atob(script) + custom_script;
}
var AngryReviewerScript = compileScript;

// main.ts
var DEFAULT_SETTINGS = {
  english: "american",
  notesFolder: "AngryReviewerNotes/",
  notesFile: "AngryReviewerNotes.md",
  splitSetting: "vertical",
  dateFormat: "YYYYMMDDhhmmss",
  storeNotes: false
};
var AngryReviewerPlugin = class extends import_obsidian.Plugin {
  startAngryReview() {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      this.runAngryReview(markdownView.getViewData());
    }
  }
  runAngryReview(text) {
    new import_obsidian.Notice("Running Angry Reviewer.");
    let options = {
      mode: "json"
    };
    import_python_shell.PythonShell.runString(AngryReviewerScript(text, this.settings.english), options).then((messages) => {
      this.presentNotes(messages[0]);
    });
    return true;
  }
  setCursorInLine(rawLine) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return;
    const viewState = view.leaf.getViewState();
    if (viewState.state.mode !== "source") {
      viewState.state.mode = "source";
      view.leaf.setViewState(viewState);
    }
    const line = Math.min(rawLine - 1, view.editor.lineCount() - 1);
    view.editor.focus();
    view.editor.setCursor({
      line,
      ch: 0
    });
  }
  getDate(date, format = "YYYYMMDDhhmmss") {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    const paddedMonth = month.toString().padStart(2, "0");
    const paddedDay = day.toString().padStart(2, "0");
    const paddedHour = hour.toString().padStart(2, "0");
    const paddedMinute = minute.toString().padStart(2, "0");
    const paddedSecond = second.toString().padStart(2, "0");
    return format.replace("YYYY", year.toString()).replace("MM", paddedMonth).replace("DD", paddedDay).replace("hh", paddedHour).replace("mm", paddedMinute).replace("ss", paddedSecond);
  }
  prepareNotes(notes, filepath) {
    let note_string = "";
    filepath = encodeURIComponent(filepath);
    for (let i = 0; i < notes.length; i++) {
      if (notes[i].substr(0, 4) == "Line") {
        let line_number = notes[i].substring(
          notes[i].indexOf(" ") + 1,
          notes[i].indexOf(".")
        );
        let raw_note = notes[i].replace(`Line ${line_number}. `, "");
        let clickable_line = `[Line ${line_number}](obsidian://angry-reviewer?line=${line_number}&file=${filepath}). `;
        note_string += clickable_line + raw_note + "\n\n";
      } else {
        note_string += notes[i] + "\n\n";
      }
    }
    note_string += "---\nThese notes were generated by [Angry Reviewer](https://www.angryreviewer.com)";
    return note_string;
  }
  async presentNotes(notes) {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    let filepath = markdownView.file?.path;
    let leaf = this.app.workspace.createLeafBySplit(this.app.workspace.getMostRecentLeaf(), this.settings.splitSetting);
    if (this.settings.storeNotes) {
      let dir_exists = await this.app.vault.adapter.exists(this.settings.notesFolder);
      if (!dir_exists) {
        this.app.vault.adapter.mkdir(this.settings.notesFolder);
      }
      const file = await this.app.vault.create(
        `${this.settings.notesFolder}/${this.getDate(
          new Date(),
          this.settings.dateFormat
        )}.md`,
        this.prepareNotes(notes, filepath)
      );
      await leaf.openFile(file);
    } else {
      let file_exists = await this.app.vault.adapter.exists(this.settings.notesFile);
      if (!file_exists) {
        let file = await this.app.vault.create(
          this.settings.notesFile,
          this.prepareNotes(notes, filepath)
        );
        await leaf.openFile(file);
      } else {
        await leaf.openFile(this.app.vault.getAbstractFileByPath(this.settings.notesFile));
        this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView).setViewData(this.prepareNotes(notes, filepath));
      }
    }
  }
  async onload() {
    await this.loadSettings();
    (0, import_obsidian.addIcon)(
      "angry-reviewer",
      '<svg  viewBox="0 0 62.23343 51.744268" version="1.1" id="svg5" inkscape:version="1.2.2 (b0a8486541, 2022-12-01)" sodipodi:docname="icon_mini.svg" inkscape:export-filename="/home/r/logo.png" inkscape:export-xdpi="28.785948" inkscape:export-ydpi="28.785948" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <sodipodi:namedview id="namedview7" pagecolor="#ffffff" bordercolor="#666666" borderopacity="1.0" inkscape:pageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:document-units="mm" showgrid="false" fit-margin-top="0.8" fit-margin-left="0" fit-margin-right="0" fit-margin-bottom="0.8" inkscape:zoom="1.1759259" inkscape:cx="-20.409449" inkscape:cy="1.2755906" inkscape:window-width="1890" inkscape:window-height="1014" inkscape:window-x="15" inkscape:window-y="51" inkscape:window-maximized="1" inkscape:current-layer="layer1" inkscape:showpageshadow="2" inkscape:deskcolor="#d1d1d1" /> <defs id="defs2" /> <g inkscape:label="Layer 1" inkscape:groupmode="layer" id="layer1" transform="translate(-15.484661,-24.431784)"> <rect style="fill:none;fill-opacity:1;stroke:currentColor;stroke-width:2.62;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" id="rect20385" width="26.616009" height="25.069975" x="17.493086" y="39.554588" ry="4.3613544" inkscape:export-filename="/home/r/logo_big.png" inkscape:export-xdpi="69.600845" inkscape:export-ydpi="69.600845" /> <path style="fill:currentColor;fill-opacity:1;stroke:none;stroke-width:0.278415;stroke-opacity:1" id="path1591-7" sodipodi:type="arc" sodipodi:cx="32.486332" sodipodi:cy="55.313175" sodipodi:rx="2.5625603" sodipodi:ry="2.6512764" sodipodi:start="0" sodipodi:end="6.201311" sodipodi:open="true" sodipodi:arc-type="arc" d="m 35.048892,55.313175 a 2.5625603,2.6512764 0 0 1 -2.510112,2.650721 2.5625603,2.6512764 0 0 1 -2.612861,-2.542215 2.5625603,2.6512764 0 0 1 2.403156,-2.754785 2.5625603,2.6512764 0 0 1 2.711233,2.42945" inkscape:export-filename="/home/r/logo_big.png" inkscape:export-xdpi="69.600845" inkscape:export-ydpi="69.600845" /> <rect style="fill:none;fill-opacity:1;stroke:currentColor;stroke-width:2.62;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" id="rect20764" width="26.616009" height="25.069975" x="49.243088" y="39.554588" ry="4.1923556" inkscape:export-filename="/home/r/logo_big.png" inkscape:export-xdpi="69.600845" inkscape:export-ydpi="69.600845" /> <path style="fill:currentColor;fill-opacity:1;stroke:none;stroke-width:0.278415;stroke-opacity:1" id="path22311" sodipodi:type="arc" sodipodi:cx="60.940495" sodipodi:cy="55.131821" sodipodi:rx="2.5625603" sodipodi:ry="2.6512764" sodipodi:start="0" sodipodi:end="6.201311" sodipodi:open="true" sodipodi:arc-type="arc" d="m 63.503055,55.131821 a 2.5625603,2.6512764 0 0 1 -2.510112,2.650721 2.5625603,2.6512764 0 0 1 -2.612862,-2.542216 2.5625603,2.6512764 0 0 1 2.403157,-2.754785 2.5625603,2.6512764 0 0 1 2.711233,2.429451" inkscape:export-filename="/home/r/logo_big.png" inkscape:export-xdpi="69.600845" inkscape:export-ydpi="69.600845" /> <path style="fill:none;stroke:currentColor;stroke-width:3.03863;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 38.726914,71.669916 c 4.83315,-1.801587 10.829166,-2.117971 15.896695,-0.07408" id="path23642" sodipodi:nodetypes="cc" inkscape:export-filename="/home/r/logo_big.png" inkscape:export-xdpi="69.600845" inkscape:export-ydpi="69.600845" /> <path style="fill:none;stroke:currentColor;stroke-width:3.265;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1" d="m 46.879966,41.649714 c 0.811895,0 28.198992,-12.638389 28.198992,-12.638389" id="path1756" sodipodi:nodetypes="cc" /> <path style="fill:none;stroke:currentColor;stroke-width:3.265;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1" d="m 46.543647,41.649714 c -0.811895,0 -28.356337,-12.638389 -28.356337,-12.638389" id="path1758" sodipodi:nodetypes="cc" /> </g> </svg>'
    );
    const ribbonIconEl = this.addRibbonIcon("angry-reviewer", "Run Angry Reviewer", (evt) => {
      this.startAngryReview();
    });
    this.registerObsidianProtocolHandler("angry-reviewer", async (e) => {
      if (e.line != null && e.file != null) {
        let fileIsAlreadyOpened = false;
        app.workspace.iterateAllLeaves((leaf) => {
          if (leaf.view.file?.path === e.file) {
            if (fileIsAlreadyOpened && leaf.width == 0)
              return;
            fileIsAlreadyOpened = true;
            app.workspace.setActiveLeaf(leaf, { focus: true });
            this.setCursorInLine(e.line);
          }
        });
        if (!fileIsAlreadyOpened) {
          let leaf = this.app.workspace.createLeafBySplit(this.app.workspace.getMostRecentLeaf(), this.settings.splitSetting);
          await leaf.openFile(this.app.vault.getAbstractFileByPath(e.file));
          this.setCursorInLine(e.line);
        }
      }
    });
    this.addCommand({
      id: "run-angry-reviewer",
      name: "Run Angry Reviewer on current document",
      editorCallback: (editor, view) => {
        this.startAngryReview();
      }
    });
    this.addSettingTab(new AngryReviewerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AngryReviewerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Angry Reviewer Settings" });
    new import_obsidian.Setting(containerEl).setName("Store notes in Notes Folder").setDesc("If set to false, notes will appear in (and override previous contents of) the Notes File at Vault root. If true, a new file will be made each time the reviewer is run, and stored in the Notes Folder.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.storeNotes).onChange(async (value) => {
        this.plugin.settings.storeNotes = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Notes Folder").setDesc("Folder (from Vault root) in which to store the notes.").addText((text) => text.setPlaceholder("Enter folder path.").setValue(this.plugin.settings.notesFolder).onChange(async (value) => {
      this.plugin.settings.notesFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Notes File").setDesc("Name of file in which to store the notes.").addText((text) => text.setPlaceholder("Enter file name.").setValue(this.plugin.settings.notesFile).onChange(async (value) => {
      this.plugin.settings.notesFile = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("English Setting").addDropdown((dropdown) => dropdown.addOption("american", "American English").addOption("british", "British English").setValue(this.plugin.settings.english).onChange(async (value) => {
      this.plugin.settings.english = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Split setting").setDesc("Whether the new window should split right or split top.").addDropdown((dropdown) => dropdown.addOption("vertical", "Split right").addOption("horizontal", "Split top").setValue(this.plugin.settings.splitSetting).onChange(async (value) => {
      this.plugin.settings.splitSetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3B5dGhvbi1zaGVsbC9pbmRleC50cyIsICJtYWluLnRzIiwgImFuZ3J5LXJldmlld2VyLXNjcmlwdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFtudWxsLCAiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIEZpbGVTeXN0ZW1BZGFwdGVyLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgYWRkSWNvbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7UHl0aG9uU2hlbGx9IGZyb20gJ3B5dGhvbi1zaGVsbCc7XG5pbXBvcnQgeyBBbmdyeVJldmlld2VyU2NyaXB0IH0gZnJvbSAnYW5ncnktcmV2aWV3ZXItc2NyaXB0Jztcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XG5cdGVuZ2xpc2g6IHN0cmluZztcblx0bm90ZXNGb2xkZXI6IHN0cmluZztcblx0bm90ZXNGaWxlOiBzdHJpbmc7XG5cdHNwbGl0U2V0dGluZzogc3RyaW5nO1xuXHRkYXRlRm9ybWF0OiBzdHJpbmc7XG5cdHN0b3JlTm90ZXM6IGJvb2xlYW47XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XG5cdGVuZ2xpc2g6ICdhbWVyaWNhbicsXG5cdG5vdGVzRm9sZGVyOiAnQW5ncnlSZXZpZXdlck5vdGVzLycsXG5cdG5vdGVzRmlsZTogJ0FuZ3J5UmV2aWV3ZXJOb3Rlcy5tZCcsXG5cdHNwbGl0U2V0dGluZzogJ3ZlcnRpY2FsJyxcblx0ZGF0ZUZvcm1hdDogXCJZWVlZTU1ERGhobW1zc1wiLFxuXHRzdG9yZU5vdGVzOiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmdyeVJldmlld2VyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG5cblx0c3RhcnRBbmdyeVJldmlldygpXG5cdHtcblx0XHRjb25zdCBtYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdGlmIChtYXJrZG93blZpZXcpIHtcblxuXHRcdFx0dGhpcy5ydW5BbmdyeVJldmlldyhtYXJrZG93blZpZXcuZ2V0Vmlld0RhdGEoKSk7XG5cdFx0fVxuXHR9XG5cblx0cnVuQW5ncnlSZXZpZXcodGV4dDpzdHJpbmcpOiBzdHJpbmcge1xuXHRcdG5ldyBOb3RpY2UoJ1J1bm5pbmcgQW5ncnkgUmV2aWV3ZXIuJyk7XG5cdFx0bGV0IG9wdGlvbnMgPSB7XG5cdFx0XHRtb2RlOiAnanNvbidcblx0XHR9O1xuXG5cblx0XHRQeXRob25TaGVsbC5ydW5TdHJpbmcoQW5ncnlSZXZpZXdlclNjcmlwdCh0ZXh0LCB0aGlzLnNldHRpbmdzLmVuZ2xpc2gpLCBvcHRpb25zKS50aGVuIChtZXNzYWdlcyA9PiB7XG5cblx0XHRcdHRoaXMucHJlc2VudE5vdGVzKG1lc3NhZ2VzWzBdKVxuXG5cblx0XHR9KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHNldEN1cnNvckluTGluZShyYXdMaW5lOiBudW1iZXIpIHtcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRpZiAoIXZpZXcpIHJldHVybjtcblx0XHRjb25zdCB2aWV3U3RhdGUgPSB2aWV3LmxlYWYuZ2V0Vmlld1N0YXRlKCk7XG5cdFx0aWYgKHZpZXdTdGF0ZS5zdGF0ZS5tb2RlICE9PSBcInNvdXJjZVwiKSB7XG5cdFx0XHR2aWV3U3RhdGUuc3RhdGUubW9kZSA9IFwic291cmNlXCI7XG5cdFx0XHR2aWV3LmxlYWYuc2V0Vmlld1N0YXRlKHZpZXdTdGF0ZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGluZSA9IE1hdGgubWluKHJhd0xpbmUgLSAxLCB2aWV3LmVkaXRvci5saW5lQ291bnQoKSAtIDEpO1xuXHRcdHZpZXcuZWRpdG9yLmZvY3VzKCk7XG5cdFx0dmlldy5lZGl0b3Iuc2V0Q3Vyc29yKHtcblx0XHRcdGxpbmU6IGxpbmUsXG5cdFx0XHRjaDogMCxcblx0XHR9KTtcblx0fVxuXG5cdGdldERhdGUoZGF0ZTogRGF0ZSwgZm9ybWF0ID0gXCJZWVlZTU1ERGhobW1zc1wiKSB7XG5cdFx0Y29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHRjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG5cdFx0Y29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0Y29uc3QgaG91ciA9IGRhdGUuZ2V0SG91cnMoKTtcblx0XHRjb25zdCBtaW51dGUgPSBkYXRlLmdldE1pbnV0ZXMoKTtcblx0XHRjb25zdCBzZWNvbmQgPSBkYXRlLmdldFNlY29uZHMoKTtcblxuXHRcdGNvbnN0IHBhZGRlZE1vbnRoID0gbW9udGgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG5cdFx0Y29uc3QgcGFkZGVkRGF5ID0gZGF5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuXHRcdGNvbnN0IHBhZGRlZEhvdXIgPSBob3VyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuXHRcdGNvbnN0IHBhZGRlZE1pbnV0ZSA9IG1pbnV0ZS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcblx0XHRjb25zdCBwYWRkZWRTZWNvbmQgPSBzZWNvbmQudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG5cblx0XHRyZXR1cm4gZm9ybWF0XG5cdFx0LnJlcGxhY2UoXCJZWVlZXCIsIHllYXIudG9TdHJpbmcoKSlcblx0XHQucmVwbGFjZShcIk1NXCIsIHBhZGRlZE1vbnRoKVxuXHRcdC5yZXBsYWNlKFwiRERcIiwgcGFkZGVkRGF5KVxuXHRcdC5yZXBsYWNlKFwiaGhcIiwgcGFkZGVkSG91cilcblx0XHQucmVwbGFjZShcIm1tXCIsIHBhZGRlZE1pbnV0ZSlcblx0XHQucmVwbGFjZShcInNzXCIsIHBhZGRlZFNlY29uZCk7XG5cdH1cblxuXHRwcmVwYXJlTm90ZXMobm90ZXM6YW55LCBmaWxlcGF0aDpzdHIpXG5cdHtcblx0XHRsZXQgbm90ZV9zdHJpbmcgPSBcIlwiO1xuXHRcdGZpbGVwYXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVwYXRoKTtcblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgbm90ZXMubGVuZ3RoOyBpKyspXG5cdFx0e1xuXHRcdFx0aWYobm90ZXNbaV0uc3Vic3RyKDAsNCkgPT0gXCJMaW5lXCIpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsZXQgbGluZV9udW1iZXIgPSBub3Rlc1tpXS5zdWJzdHJpbmcoXG5cdFx0XHRcdFx0XHRub3Rlc1tpXS5pbmRleE9mKFwiIFwiKSArIDEsIFxuXHRcdFx0XHRcdFx0bm90ZXNbaV0uaW5kZXhPZihcIi5cIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxldCByYXdfbm90ZSA9IG5vdGVzW2ldLnJlcGxhY2UoYExpbmUgJHtsaW5lX251bWJlcn0uIGAsIFwiXCIpO1xuXG5cdFx0XHRcdFx0bGV0IGNsaWNrYWJsZV9saW5lID0gYFtMaW5lICR7bGluZV9udW1iZXJ9XShvYnNpZGlhbjovL2FuZ3J5LXJldmlld2VyP2xpbmU9JHtsaW5lX251bWJlcn0mZmlsZT0ke2ZpbGVwYXRofSkuIGA7XG5cdFx0XHRcdFx0bm90ZV9zdHJpbmcgKz0gY2xpY2thYmxlX2xpbmUgKyByYXdfbm90ZSArIFwiXFxuXFxuXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bm90ZV9zdHJpbmcgKz0gbm90ZXNbaV0gKyBcIlxcblxcblwiO1xuXHRcdFx0XHR9XG5cdFx0fVxuXHRcdG5vdGVfc3RyaW5nICs9IFwiLS0tXFxuVGhlc2Ugbm90ZXMgd2VyZSBnZW5lcmF0ZWQgYnkgW0FuZ3J5IFJldmlld2VyXShodHRwczovL3d3dy5hbmdyeXJldmlld2VyLmNvbSlcIjtcblx0XHRyZXR1cm4gbm90ZV9zdHJpbmc7XG5cblx0fVxuXG5cdGFzeW5jIHByZXNlbnROb3Rlcyhub3RlczphbnkpXG5cdHtcblx0XHRjb25zdCBtYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdGxldCBmaWxlcGF0aCA9IG1hcmtkb3duVmlldy5maWxlPy5wYXRoO1xuXHRcdGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmNyZWF0ZUxlYWZCeVNwbGl0KHRoaXMuYXBwLndvcmtzcGFjZS5nZXRNb3N0UmVjZW50TGVhZigpLCB0aGlzLnNldHRpbmdzLnNwbGl0U2V0dGluZyk7XG5cdFx0aWYodGhpcy5zZXR0aW5ncy5zdG9yZU5vdGVzKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgZGlyX2V4aXN0cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHRoaXMuc2V0dGluZ3Mubm90ZXNGb2xkZXIpO1xuXHRcdFx0XHRpZighZGlyX2V4aXN0cylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcC52YXVsdC5hZGFwdGVyLm1rZGlyKHRoaXMuc2V0dGluZ3Mubm90ZXNGb2xkZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKFxuXHRcdFx0XHRcdFx0YCR7dGhpcy5zZXR0aW5ncy5ub3Rlc0ZvbGRlcn0vJHt0aGlzLmdldERhdGUoXG5cdFx0XHRcdFx0XHRcdG5ldyBEYXRlKCksXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZGF0ZUZvcm1hdFxuXHRcdFx0XHRcdFx0KX0ubWRgLFxuXHRcdFx0XHRcdFx0dGhpcy5wcmVwYXJlTm90ZXMobm90ZXMsIGZpbGVwYXRoKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YXdhaXQgbGVhZi5vcGVuRmlsZShmaWxlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBmaWxlX2V4aXN0cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHRoaXMuc2V0dGluZ3Mubm90ZXNGaWxlKTtcblx0XHRcdFx0aWYoIWZpbGVfZXhpc3RzKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxldCBmaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKFxuXHRcdFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLm5vdGVzRmlsZSxcblx0XHRcdFx0XHRcdFx0dGhpcy5wcmVwYXJlTm90ZXMobm90ZXMsIGZpbGVwYXRoKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGF3YWl0IGxlYWYub3BlbkZpbGUodGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMuc2V0dGluZ3Mubm90ZXNGaWxlKSk7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpLnNldFZpZXdEYXRhKHRoaXMucHJlcGFyZU5vdGVzKG5vdGVzLCBmaWxlcGF0aCkpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0fVxuXHR9XG5cblxuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cblx0XHRhZGRJY29uKFxuXHRcdFx0XCJhbmdyeS1yZXZpZXdlclwiLFxuXHRcdFx0JzxzdmcgIHZpZXdCb3g9XCIwIDAgNjIuMjMzNDMgNTEuNzQ0MjY4XCIgdmVyc2lvbj1cIjEuMVwiIGlkPVwic3ZnNVwiIGlua3NjYXBlOnZlcnNpb249XCIxLjIuMiAoYjBhODQ4NjU0MSwgMjAyMi0xMi0wMSlcIiBzb2RpcG9kaTpkb2NuYW1lPVwiaWNvbl9taW5pLnN2Z1wiIGlua3NjYXBlOmV4cG9ydC1maWxlbmFtZT1cIi9ob21lL3IvbG9nby5wbmdcIiBpbmtzY2FwZTpleHBvcnQteGRwaT1cIjI4Ljc4NTk0OFwiIGlua3NjYXBlOmV4cG9ydC15ZHBpPVwiMjguNzg1OTQ4XCIgeG1sbnM6aW5rc2NhcGU9XCJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlXCIgeG1sbnM6c29kaXBvZGk9XCJodHRwOi8vc29kaXBvZGkuc291cmNlZm9yZ2UubmV0L0RURC9zb2RpcG9kaS0wLmR0ZFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczpzdmc9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPiA8c29kaXBvZGk6bmFtZWR2aWV3IGlkPVwibmFtZWR2aWV3N1wiIHBhZ2Vjb2xvcj1cIiNmZmZmZmZcIiBib3JkZXJjb2xvcj1cIiM2NjY2NjZcIiBib3JkZXJvcGFjaXR5PVwiMS4wXCIgaW5rc2NhcGU6cGFnZXNoYWRvdz1cIjJcIiBpbmtzY2FwZTpwYWdlb3BhY2l0eT1cIjAuMFwiIGlua3NjYXBlOnBhZ2VjaGVja2VyYm9hcmQ9XCIwXCIgaW5rc2NhcGU6ZG9jdW1lbnQtdW5pdHM9XCJtbVwiIHNob3dncmlkPVwiZmFsc2VcIiBmaXQtbWFyZ2luLXRvcD1cIjAuOFwiIGZpdC1tYXJnaW4tbGVmdD1cIjBcIiBmaXQtbWFyZ2luLXJpZ2h0PVwiMFwiIGZpdC1tYXJnaW4tYm90dG9tPVwiMC44XCIgaW5rc2NhcGU6em9vbT1cIjEuMTc1OTI1OVwiIGlua3NjYXBlOmN4PVwiLTIwLjQwOTQ0OVwiIGlua3NjYXBlOmN5PVwiMS4yNzU1OTA2XCIgaW5rc2NhcGU6d2luZG93LXdpZHRoPVwiMTg5MFwiIGlua3NjYXBlOndpbmRvdy1oZWlnaHQ9XCIxMDE0XCIgaW5rc2NhcGU6d2luZG93LXg9XCIxNVwiIGlua3NjYXBlOndpbmRvdy15PVwiNTFcIiBpbmtzY2FwZTp3aW5kb3ctbWF4aW1pemVkPVwiMVwiIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9XCJsYXllcjFcIiBpbmtzY2FwZTpzaG93cGFnZXNoYWRvdz1cIjJcIiBpbmtzY2FwZTpkZXNrY29sb3I9XCIjZDFkMWQxXCIgLz4gPGRlZnMgaWQ9XCJkZWZzMlwiIC8+IDxnIGlua3NjYXBlOmxhYmVsPVwiTGF5ZXIgMVwiIGlua3NjYXBlOmdyb3VwbW9kZT1cImxheWVyXCIgaWQ9XCJsYXllcjFcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTE1LjQ4NDY2MSwtMjQuNDMxNzg0KVwiPiA8cmVjdCBzdHlsZT1cImZpbGw6bm9uZTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6Y3VycmVudENvbG9yO3N0cm9rZS13aWR0aDoyLjYyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1vcGFjaXR5OjFcIiBpZD1cInJlY3QyMDM4NVwiIHdpZHRoPVwiMjYuNjE2MDA5XCIgaGVpZ2h0PVwiMjUuMDY5OTc1XCIgeD1cIjE3LjQ5MzA4NlwiIHk9XCIzOS41NTQ1ODhcIiByeT1cIjQuMzYxMzU0NFwiIGlua3NjYXBlOmV4cG9ydC1maWxlbmFtZT1cIi9ob21lL3IvbG9nb19iaWcucG5nXCIgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9XCI2OS42MDA4NDVcIiBpbmtzY2FwZTpleHBvcnQteWRwaT1cIjY5LjYwMDg0NVwiIC8+IDxwYXRoIHN0eWxlPVwiZmlsbDpjdXJyZW50Q29sb3I7ZmlsbC1vcGFjaXR5OjE7c3Ryb2tlOm5vbmU7c3Ryb2tlLXdpZHRoOjAuMjc4NDE1O3N0cm9rZS1vcGFjaXR5OjFcIiBpZD1cInBhdGgxNTkxLTdcIiBzb2RpcG9kaTp0eXBlPVwiYXJjXCIgc29kaXBvZGk6Y3g9XCIzMi40ODYzMzJcIiBzb2RpcG9kaTpjeT1cIjU1LjMxMzE3NVwiIHNvZGlwb2RpOnJ4PVwiMi41NjI1NjAzXCIgc29kaXBvZGk6cnk9XCIyLjY1MTI3NjRcIiBzb2RpcG9kaTpzdGFydD1cIjBcIiBzb2RpcG9kaTplbmQ9XCI2LjIwMTMxMVwiIHNvZGlwb2RpOm9wZW49XCJ0cnVlXCIgc29kaXBvZGk6YXJjLXR5cGU9XCJhcmNcIiBkPVwibSAzNS4wNDg4OTIsNTUuMzEzMTc1IGEgMi41NjI1NjAzLDIuNjUxMjc2NCAwIDAgMSAtMi41MTAxMTIsMi42NTA3MjEgMi41NjI1NjAzLDIuNjUxMjc2NCAwIDAgMSAtMi42MTI4NjEsLTIuNTQyMjE1IDIuNTYyNTYwMywyLjY1MTI3NjQgMCAwIDEgMi40MDMxNTYsLTIuNzU0Nzg1IDIuNTYyNTYwMywyLjY1MTI3NjQgMCAwIDEgMi43MTEyMzMsMi40Mjk0NVwiIGlua3NjYXBlOmV4cG9ydC1maWxlbmFtZT1cIi9ob21lL3IvbG9nb19iaWcucG5nXCIgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9XCI2OS42MDA4NDVcIiBpbmtzY2FwZTpleHBvcnQteWRwaT1cIjY5LjYwMDg0NVwiIC8+IDxyZWN0IHN0eWxlPVwiZmlsbDpub25lO2ZpbGwtb3BhY2l0eToxO3N0cm9rZTpjdXJyZW50Q29sb3I7c3Ryb2tlLXdpZHRoOjIuNjI7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2UtZGFzaGFycmF5Om5vbmU7c3Ryb2tlLW9wYWNpdHk6MVwiIGlkPVwicmVjdDIwNzY0XCIgd2lkdGg9XCIyNi42MTYwMDlcIiBoZWlnaHQ9XCIyNS4wNjk5NzVcIiB4PVwiNDkuMjQzMDg4XCIgeT1cIjM5LjU1NDU4OFwiIHJ5PVwiNC4xOTIzNTU2XCIgaW5rc2NhcGU6ZXhwb3J0LWZpbGVuYW1lPVwiL2hvbWUvci9sb2dvX2JpZy5wbmdcIiBpbmtzY2FwZTpleHBvcnQteGRwaT1cIjY5LjYwMDg0NVwiIGlua3NjYXBlOmV4cG9ydC15ZHBpPVwiNjkuNjAwODQ1XCIgLz4gPHBhdGggc3R5bGU9XCJmaWxsOmN1cnJlbnRDb2xvcjtmaWxsLW9wYWNpdHk6MTtzdHJva2U6bm9uZTtzdHJva2Utd2lkdGg6MC4yNzg0MTU7c3Ryb2tlLW9wYWNpdHk6MVwiIGlkPVwicGF0aDIyMzExXCIgc29kaXBvZGk6dHlwZT1cImFyY1wiIHNvZGlwb2RpOmN4PVwiNjAuOTQwNDk1XCIgc29kaXBvZGk6Y3k9XCI1NS4xMzE4MjFcIiBzb2RpcG9kaTpyeD1cIjIuNTYyNTYwM1wiIHNvZGlwb2RpOnJ5PVwiMi42NTEyNzY0XCIgc29kaXBvZGk6c3RhcnQ9XCIwXCIgc29kaXBvZGk6ZW5kPVwiNi4yMDEzMTFcIiBzb2RpcG9kaTpvcGVuPVwidHJ1ZVwiIHNvZGlwb2RpOmFyYy10eXBlPVwiYXJjXCIgZD1cIm0gNjMuNTAzMDU1LDU1LjEzMTgyMSBhIDIuNTYyNTYwMywyLjY1MTI3NjQgMCAwIDEgLTIuNTEwMTEyLDIuNjUwNzIxIDIuNTYyNTYwMywyLjY1MTI3NjQgMCAwIDEgLTIuNjEyODYyLC0yLjU0MjIxNiAyLjU2MjU2MDMsMi42NTEyNzY0IDAgMCAxIDIuNDAzMTU3LC0yLjc1NDc4NSAyLjU2MjU2MDMsMi42NTEyNzY0IDAgMCAxIDIuNzExMjMzLDIuNDI5NDUxXCIgaW5rc2NhcGU6ZXhwb3J0LWZpbGVuYW1lPVwiL2hvbWUvci9sb2dvX2JpZy5wbmdcIiBpbmtzY2FwZTpleHBvcnQteGRwaT1cIjY5LjYwMDg0NVwiIGlua3NjYXBlOmV4cG9ydC15ZHBpPVwiNjkuNjAwODQ1XCIgLz4gPHBhdGggc3R5bGU9XCJmaWxsOm5vbmU7c3Ryb2tlOmN1cnJlbnRDb2xvcjtzdHJva2Utd2lkdGg6My4wMzg2MztzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2UtZGFzaGFycmF5Om5vbmU7c3Ryb2tlLW9wYWNpdHk6MVwiIGQ9XCJtIDM4LjcyNjkxNCw3MS42Njk5MTYgYyA0LjgzMzE1LC0xLjgwMTU4NyAxMC44MjkxNjYsLTIuMTE3OTcxIDE1Ljg5NjY5NSwtMC4wNzQwOFwiIGlkPVwicGF0aDIzNjQyXCIgc29kaXBvZGk6bm9kZXR5cGVzPVwiY2NcIiBpbmtzY2FwZTpleHBvcnQtZmlsZW5hbWU9XCIvaG9tZS9yL2xvZ29fYmlnLnBuZ1wiIGlua3NjYXBlOmV4cG9ydC14ZHBpPVwiNjkuNjAwODQ1XCIgaW5rc2NhcGU6ZXhwb3J0LXlkcGk9XCI2OS42MDA4NDVcIiAvPiA8cGF0aCBzdHlsZT1cImZpbGw6bm9uZTtzdHJva2U6Y3VycmVudENvbG9yO3N0cm9rZS13aWR0aDozLjI2NTtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1vcGFjaXR5OjFcIiBkPVwibSA0Ni44Nzk5NjYsNDEuNjQ5NzE0IGMgMC44MTE4OTUsMCAyOC4xOTg5OTIsLTEyLjYzODM4OSAyOC4xOTg5OTIsLTEyLjYzODM4OVwiIGlkPVwicGF0aDE3NTZcIiBzb2RpcG9kaTpub2RldHlwZXM9XCJjY1wiIC8+IDxwYXRoIHN0eWxlPVwiZmlsbDpub25lO3N0cm9rZTpjdXJyZW50Q29sb3I7c3Ryb2tlLXdpZHRoOjMuMjY1O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtZGFzaGFycmF5Om5vbmU7c3Ryb2tlLW9wYWNpdHk6MVwiIGQ9XCJtIDQ2LjU0MzY0Nyw0MS42NDk3MTQgYyAtMC44MTE4OTUsMCAtMjguMzU2MzM3LC0xMi42MzgzODkgLTI4LjM1NjMzNywtMTIuNjM4Mzg5XCIgaWQ9XCJwYXRoMTc1OFwiIHNvZGlwb2RpOm5vZGV0eXBlcz1cImNjXCIgLz4gPC9nPiA8L3N2Zz4nXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0XHRjb25zdCByaWJib25JY29uRWwgPSB0aGlzLmFkZFJpYmJvbkljb24oJ2FuZ3J5LXJldmlld2VyJywgJ1J1biBBbmdyeSBSZXZpZXdlcicsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5zdGFydEFuZ3J5UmV2aWV3KCk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHR0aGlzLnJlZ2lzdGVyT2JzaWRpYW5Qcm90b2NvbEhhbmRsZXIoXCJhbmdyeS1yZXZpZXdlclwiLCBhc3luYyAoZSkgPT4ge1xuXHRcdFx0XHRpZihlLmxpbmUgIT0gbnVsbCAmJiBlLmZpbGUgIT0gbnVsbClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsZXQgZmlsZUlzQWxyZWFkeU9wZW5lZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YXBwLndvcmtzcGFjZS5pdGVyYXRlQWxsTGVhdmVzKChsZWFmKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmIChsZWFmLnZpZXcuZmlsZT8ucGF0aCA9PT0gZS5maWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGZpbGVJc0FscmVhZHlPcGVuZWQgJiYgbGVhZi53aWR0aCA9PSAwKSByZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0ZmlsZUlzQWxyZWFkeU9wZW5lZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0XHRhcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhZiwgeyBmb2N1czogdHJ1ZSB9KTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnNldEN1cnNvckluTGluZShlLmxpbmUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0aWYoIWZpbGVJc0FscmVhZHlPcGVuZWQpXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsZXQgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5jcmVhdGVMZWFmQnlTcGxpdCh0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TW9zdFJlY2VudExlYWYoKSwgdGhpcy5zZXR0aW5ncy5zcGxpdFNldHRpbmcpO1xuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IGxlYWYub3BlbkZpbGUodGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGUuZmlsZSkpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2V0Q3Vyc29ySW5MaW5lKGUubGluZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXG5cblx0XHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCB0aGF0IGNhbiBwZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG9uIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdFx0aWQ6ICdydW4tYW5ncnktcmV2aWV3ZXInLFxuXHRcdFx0XHRuYW1lOiAnUnVuIEFuZ3J5IFJldmlld2VyIG9uIGN1cnJlbnQgZG9jdW1lbnQnLFxuXHRcdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0XHR0aGlzLnN0YXJ0QW5ncnlSZXZpZXcoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgQW5ncnlSZXZpZXdlclNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBBbmdyeVJldmlld2VyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IEFuZ3J5UmV2aWV3ZXJQbHVnaW47XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogQW5ncnlSZXZpZXdlclBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdBbmdyeSBSZXZpZXdlciBTZXR0aW5ncyd9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdC5zZXROYW1lKCdTdG9yZSBub3RlcyBpbiBOb3RlcyBGb2xkZXInKVxuXHRcdC5zZXREZXNjKCdJZiBzZXQgdG8gZmFsc2UsIG5vdGVzIHdpbGwgYXBwZWFyIGluIChhbmQgb3ZlcnJpZGUgcHJldmlvdXMgY29udGVudHMgb2YpIHRoZSBOb3RlcyBGaWxlIGF0IFZhdWx0IHJvb3QuIElmIHRydWUsIGEgbmV3IGZpbGUgd2lsbCBiZSBtYWRlIGVhY2ggdGltZSB0aGUgcmV2aWV3ZXIgaXMgcnVuLCBhbmQgc3RvcmVkIGluIHRoZSBOb3RlcyBGb2xkZXIuJylcblx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0XHRcdFx0IC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdG9yZU5vdGVzKVxuXHRcdFx0XHRcdFx0XHQgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdG9yZU5vdGVzID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0IGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XHQgfSlcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHRcdFx0XHRcdC5zZXROYW1lKCdOb3RlcyBGb2xkZXInKVxuXHRcdFx0XHRcdFx0XHQuc2V0RGVzYygnRm9sZGVyIChmcm9tIFZhdWx0IHJvb3QpIGluIHdoaWNoIHRvIHN0b3JlIHRoZSBub3Rlcy4nKVxuXHRcdFx0XHRcdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgLnNldFBsYWNlaG9sZGVyKCdFbnRlciBmb2xkZXIgcGF0aC4nKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZXNGb2xkZXIpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3Rlc0ZvbGRlciA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCB9KSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAuc2V0TmFtZSgnTm90ZXMgRmlsZScpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5zZXREZXNjKCdOYW1lIG9mIGZpbGUgaW4gd2hpY2ggdG8gc3RvcmUgdGhlIG5vdGVzLicpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIGZpbGUgbmFtZS4nKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZXNGaWxlKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZXNGaWxlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5zZXROYW1lKCdFbmdsaXNoIFNldHRpbmcnKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5hZGRPcHRpb24oXCJhbWVyaWNhblwiLCBcIkFtZXJpY2FuIEVuZ2xpc2hcIilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5hZGRPcHRpb24oXCJicml0aXNoXCIsIFwiQnJpdGlzaCBFbmdsaXNoXCIpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5nbGlzaClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5nbGlzaCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IH0pKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgLnNldE5hbWUoJ1NwbGl0IHNldHRpbmcnKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgLnNldERlc2MoJ1doZXRoZXIgdGhlIG5ldyB3aW5kb3cgc2hvdWxkIHNwbGl0IHJpZ2h0IG9yIHNwbGl0IHRvcC4nKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmFkZE9wdGlvbihcInZlcnRpY2FsXCIsIFwiU3BsaXQgcmlnaHRcIilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYWRkT3B0aW9uKFwiaG9yaXpvbnRhbFwiLCBcIlNwbGl0IHRvcFwiKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zcGxpdFNldHRpbmcpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc3BsaXRTZXR0aW5nID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KSk7XG5cdH1cbn1cbiIsICIvLyBBbmdyeSBSZXZpZXdlciBpcyBiYXNlNjQgZW5jb2RlZCBiZWNhdXNlIEknbSB1bmFibGUgdG8gZXNjYXBlIGl0IHByb3Blcmx5LCBzbyB0aGlzIGlzIHRoZSBlYXN5IHdheSBvdXQuXG5jb25zdCBzY3JpcHQgPSBgYVcxd2IzSjBJSEpsTENCcWMyOXVDbVp5YjIwZ1pHRjBaWFJwYldVZ2FXMXdiM0owSUdSaGRHVUtDa1ZNUlUxRlRsUlRJRDBnZXlkQmJDY3NJQ2RUYVNjc0lDZERjaWNzSUNkSFlTY3NJQ2RVYVNjc0lDZEhZVUZ6Snl3Z0oxTnBReWNzSUNkRGRTY3NJQ2RIWlNjc0NpQWdJQ0FnSUNBZ0oweHBKeXdnSjA1bEp5d2dKMDVoSnl3Z0owTnNKeXdnSjBGeUp5d2dKMEYxSnl3Z0oxWlBNaWNzSUNkVFl5Y3NJQ2RHWlNjc0lDZE9ZaWNzSUNkT2FTY3NJQ2RUYVVkbEp5d0tJQ0FnSUNBZ0lDQW5VM0luTENBblduSW5MQ0FuUVdjbkxDQW5WR0VuTENBblVIUW5MQ0FuU0djbkxDQW5WU2NzSUNkUE1pY3NJQ2RJTWs4bkxDQW5VMjRuTENBblUySW5MQW9nSUNBZ0lDQWdJQ2RUYVU0bkxDQW5VMmxQSnl3Z0owZ25MQ0FuVGljc0lDZEhZVTRuTENBblNXNVFKeXdnSjBsdVFYTW5MQ0FuUjJGUUp5d2dKMEZzVUNjc0lDZElaU2NzQ2lBZ0lDQWdJQ0FnSjBKQmN5Y3NJQ2RDVGljc0lDZEJiRTRuTENBblZHbE9hVk51Snl3Z0owRnNSMkZCY3ljc0lIMEtDbFZPU1ZSVElEMGdleUp0TGlJc0lDSnRJQ0lzSUNKdGJTSXNJQ0oxYlNJc0lDSnViU0lzSUNKcmJTSXNJQ0pqYlNJc0lDSlhJaXdnSWxZaUxDQWlTeUlzSUNKeklDSXNDaUFnSUNBZ0lDQWdJbk11SWl3Z0luQnpJaXdnSW5WeklDSXNJQ0pRWVNJc0lDSnRhVzRpTENBaWFDNGlMQ0FpYUN3aUxDQWlhQ0FpTENBaVNIb2lMQ0FpUjBoNklpd2dJbFJJZWlJc0lDSk5TSG9pTEFvZ0lDQWdJQ0FnSUNKbklpd2dKMjFuSnl3Z0oyMXNKeXdnSjI1V0p5d2dKMjFXSnl3Z0oyMVhKeXdnSjI1WEp5d2dKMDFRWVNjc0lDZEhVR0VuZlFvS1JWaERSVkJVU1U5T1V5QTlJSHNuVWtWVFZVeFVVeWNzSUNkRVNWTkRWVk5UU1U5T0p5d2dKMFJKVTBOVlUxTkpUMDVUSnl3blRVVlVTRTlFVXljc0lDZEtVMVFuTEFvZ0lDQWdJQ0FnSUNkSlRsUlNUMFJWUTFSSlQwNG5MQ0FuVEVsTlRWTW5MQ0FuUkU1Qkp5d2dKMUpPUVNjc0lDZEpTVk1uTENBblExSkZVMVFuTENBblVGSkZVMVJQSnl3Z0oxQk9RVk1uTEFvZ0lDQWdJQ0FnSUNkQlVFd25MQ0FuV2xRbkxDQW5UR0ZVWlZnbkxDQW5UVVZOVXljc0lDZE9SVTFUSnl3Z0owRkpVQ2NzSUNkQlRTY3NJQ2RRVFNjc0lDZEJTVVJUSnl3Z0owRkRKeXdnSjBSREp5d0tJQ0FnSUNBZ0lDQW5RMDVTVXljc0lDZExRVXRGVGtoSkp5d2dKMEZRUVNjc0lDZEhZVUVuTENBblJYSkJKeXdnSjBGc1FTY3NJQ2RDUVNjc0lDZENhV0pVWlZnbkxDQW5RVkJUSnl3Z0owbHVRU2NzQ2lBZ0lDQWdJQ0FnSjB4RlJDY3NJQ2RQVEVWRUp5d2dKMEZEVXljc0lDZFFhRVFuTENBblRVbFVKeXdnSjA1QlUwRW5MQ0FuU0VsV0p5d2dKMUpCVFNjc0lDZERVRlVuTENBblRFTkVKeXdnSjB4RlJDY3NDaUFnSUNBZ0lDQWdKMDlNUlVRbkxDQW5RVVpOSnl3Z0oxTkZUU2NzSUNkVVJVMG5MQ0FuVkVSVVVpY3NJQ2REVDAxVFQwd25MQ0FuUVZCUVQweFBKeXdnSjBWTVRVVlNKeXdnSjBOUFZrbEVKMzBLQ2s5V1JWSlZVMFZFWDBsT1ZGSlBJRDBnZXdvZ0lDQWdJQ0FnSUNkSWIzZGxkbVZ5SnpvZ0owSjFkQ0J2Y2lCWlpYUW5MQW9nSUNBZ0lDQWdJQ2RVYUhWekp6b2dKMGhsYm1ObElHOXlJRlJvWlhKbFptOXlaU2NzQ2lBZ0lDQWdJQ0FnSjBobGJtTmxKem9nSjFSb2RYTWdiM0lnVkdobGNtVm1iM0psSnl3S0lDQWdJQ0FnSUNBblZHaGxjbVZtYjNKbEp6b2dKMVJvZFhNZ2IzSWdTR1Z1WTJVbkxBb2dJQ0FnSUNBZ0lDZFRhVzVqWlNjNklDZENaV05oZFhObElHOXlJRUZ6Snl3S0lDQWdJQ0FnSUNBbldXVjBKem9nSjBodmQyVjJaWElnYjNJZ1FuVjBKeXdLSUNBZ0lDQWdJQ0FuU1c0Z1lXUmthWFJwYjI0bk9pQW5RV3h6Ynljc0NpQWdJQ0FnSUNBZ0owMXZjbVZ2ZG1WeUp6b2dKMEZzYzI4bkxBb2dJQ0FnSUNBZ0lDZEpibVJsWldRbk9pQW5SbTl5SUdWNFlXMXdiR1VuTEFvZ0lDQWdJQ0FnSUNkR2RYSjBhR1Z5Ylc5eVpTYzZJQ2RCYkhOdklHOXlJRTF2Y21WdmRtVnlKeXdLSUNBZ0lDQWdJQ0FuUm1seWMzUW5PaUFuVkc4Z1ltVm5hVzRuTEFvZ0lDQWdJQ0FnSUNkUGJpQjBhR1VnYjNSb1pYSWdhR0Z1WkNjNklDZEliM2RsZG1WeUxDQlpaWFFzSUc5eUlFSjFkQ2NzQ2lBZ0lDQWdJQ0FnZlFvS1EwOU5UVUZmUVVaVVJWSWdQU0JiQ2lBZ0lDQWdJQ0FnSjBodmQyVjJaWElnSnl3S0lDQWdJQ0FnSUNBblZHaGxjbVZtYjNKbElDY3NDaUFnSUNBZ0lDQWdKMVJvZFhNZ0p5d0tJQ0FnSUNBZ0lDQW5XV1YwSUNjc0NpQWdJQ0FnSUNBZ0owaGxibU5sSUNjc0NpQWdJQ0FnSUNBZ0owNWxkbVZ5ZEdobGJHVnpjeUFuTEFvZ0lDQWdJQ0FnSUNkQ2RYUWdKeXdLSUNBZ0lDQWdJQ0FuU1c0Z2RHaHBjeUIzYjNKcklDY3NDaUFnSUNBZ0lDQWdKMGx1SUhSb2FYTWdZWEowYVdOc1pTQW5MQW9nSUNBZ0lDQWdJQ2RKYmlCMGFHbHpJSEJoY0dWeUlDY3NDaUFnSUNBZ0lDQWdKMGx1SUhSb2FYTWdZMkZ6WlNBbkxBb2dJQ0FnSUNBZ0lDZEpiaUIwYUdGMElHTmhjMlVnSnl3S0lDQWdJQ0FnSUNBblRXOXlaVzkyWlhJZ0p5d0tJQ0FnSUNBZ0lDQW5RMjl1YzJWeGRXVnVkR3g1SUNjc0NpQWdJQ0FnSUNBZ0oxTnZJQ2NzQ2lBZ0lDQWdJQ0FnSjBsdUlHTnZibU5zZFhOcGIyNGdKeXdLSUNBZ0lDQWdJQ0FuU1c0Z1kyOXVZMngxYzJsdmJuTWdKeXdLSUNBZ0lDQWdJQ0FuVUdGeWRHbGpkV3hoY214NUlDY3NDaUFnSUNBZ0lDQWdKMU53WldOcFptbGpZV3hzZVNBbkxBb2dJQ0FnSUNBZ0lDZEdiM0lnZEdocGN5QnlaV0Z6YjI0Z0p5d0tJQ0FnSUNBZ0lDQW5SbTl5SUhSb1pYTmxJSEpsWVhOdmJuTWdKeXdLSUNBZ0lDQWdJQ0FuVDI0Z2RHaGxJRzkwYUdWeUlHaGhibVFnSnl3S0lDQWdJQ0FnSUNBblQyNGdkR2hsSUc5dVpTQm9ZVzVrSUNjc0NpQWdJQ0FnSUNBZ0owOXVJRzl1WlNCb1lXNWtJQ2NzQ2lBZ0lDQWdJQ0FnSjBaMWNuUm9aWEp0YjNKbElDY3NDaUFnSUNBZ0lDQWdKMGx1SUhSb1pTQnRaV0Z1ZEdsdFpTQW5MQW9nSUNBZ0lDQWdJRjBLQ2tKU1NWUkpVMGdnUFNCN0NpQWdJQ0FnSUNBZ0ozWmhjRzkxY2ljNklDZDJZWEJ2Y2ljc0NpQWdJQ0FnSUNBZ0oyTnZiRzkxY2ljNklDZGpiMnh2Y2ljc0NpQWdJQ0FnSUNBZ0oyWmhkbTkxY21sMFpTYzZJQ2RtWVhadmNtbDBaU2NzQ2lBZ0lDQWdJQ0FnSjJac1lYWnZkWEluT2lBblpteGhkbTl5Snl3S0lDQWdJQ0FnSUNBblltVm9ZWFpwYjNWeUp6b2dKMkpsYUdGMmFXOXlKeXdLSUNBZ0lDQWdJQ0FuYm1WcFoyaGliM1Z5SnpvZ0oyNWxhV2RvWW05eUp5d0tJQ0FnSUNBZ0lDQW5hRzl1YjNWeUp6b2dKMmh2Ym05eUp5d0tJQ0FnSUNBZ0lDQW5JRzFsZEhKbEp6b2dKeUJ0WlhSbGNpY3NDaUFnSUNBZ0lDQWdKMjVoYm05dFpYUnlaU2M2SUNkdVlXNXZiV1YwWlhJbkxBb2dJQ0FnSUNBZ0lDZHRhV055YjIxbGRISmxKem9nSjIxcFkzSnZiV1YwWlhJbkxBb2dJQ0FnSUNBZ0lDZGpaVzUwYVcxbGRISmxKem9nSjJObGJuUnBiV1YwWlhJbkxBb2dJQ0FnSUNBZ0lDZHJhV3h2YldWMGNtVW5PaUFuYTJsc2IyMWxkR1Z5Snl3S0lDQWdJQ0FnSUNBbmJHRmliM1Z5SnpvZ0oyeGhZbTl5Snl3S0lDQWdJQ0FnSUNBblkyVnVkSEpsSnpvZ0p5QmpaVzUwWlhJbkxBb2dJQ0FnSUNBZ0lDZHpjR1ZqZEhKbEp6b2dKM053WldOMFpYSW5MQW9nSUNBZ0lDQWdJQ2RqWVd4cFluSmxKem9nSjJOaGJHbGlaWEluTEFvZ0lDQWdJQ0FnSUNkMGFHVmhkSEpsSnpvZ0ozUm9aV0YwWlhJbkxBb2dJQ0FnSUNBZ0lDZHNhWFJ5WlNjNklDZHNhWFJsY2lBbkxBb2dJQ0FnSUNBZ0lDZDBkVzF2ZFhJbk9pQW5kSFZ0YjNJbkxBb2dJQ0FnSUNBZ0lDZG1hV0p5WlNjNklDZG1hV0psY2ljc0NpQWdJQ0FnSUNBZ0oyRnVZV3h2WjNWbElDYzZJQ2RoYm1Gc2IyY2dKeXdLSUNBZ0lDQWdJQ0FuWVc1aGJHOW5kV1Z6SnpvZ0oyRnVZV3h2WjNNbkxBb2dJQ0FnSUNBZ0lDZGpZWFJoYkc5bmRXVnpJQ2M2SUNkallYUmhiRzluSUNjc0NpQWdJQ0FnSUNBZ0oyTmhkR0ZzYjJkMVpYTW5PaUFuWTJGMFlXeHZaM01uTEFvZ0lDQWdJQ0FnSUNka2FXRnNiMmQxWlNBbk9pQW5aR2xoYkc5bklDY3NDaUFnSUNBZ0lDQWdKMlJwWVd4dlozVmxjeWM2SUNka2FXRnNiMmR6Snl3S0lDQWdJQ0FnSUNBbmFHOXRiMnh2WjNWbEp6b2dKMmh2Ylc5c2IyY2dKeXdLSUNBZ0lDQWdJQ0FuWVc1aGJIbHpaU2M2SUNkaGJtRnNlWHBsSnl3S0lDQWdJQ0FnSUNBblkyRjBZV3g1YzJVbk9pQW5ZMkYwWVd4NWVtVW5MQW9nSUNBZ0lDQWdJQ2RvZVdSeWIyeDVjMlVuT2lBbmFIbGtjbTlzZVhwbEp5d0tJQ0FnSUNBZ0lDQW5hR0ZsYlc5c2VYTmxKem9nSjJobGJXOXNlWHBsSnl3S0lDQWdJQ0FnSUNBbllXNWhkRzl0YVdOaGJDYzZJQ2RoYm1GMGIyMXBZeUFuTEFvZ0lDQWdJQ0FnSUNkaWFXOXNiMmRwWTJGc0p6b2dKMkpwYjJ4dloybGpJQ2NzQ2lBZ0lDQWdJQ0FnSjIxdmNuQm9iMnh2WjJsallXd25PaUFuYlc5eWNHaHZiRzluYVdNZ0p5d0tJQ0FnSUNBZ0lDQW5jMlZ5YjJ4dloybGpZV3duT2lBbmMyVnliMnh2WjJsaklDY3NDaUFnSUNBZ0lDQWdKMlJsWm1WdVkyVW5PaUFuWkdWbVpXNXpaU2NzQ2lBZ0lDQWdJQ0FnSjI5bVptVnVZMlVuT2lBbmIyWm1aVzV6WlNjc0NpQWdJQ0FnSUNBZ0ozQnlaWFJsYm1ObEp6b2dKM0J5WlhSbGJuTmxKeXdLSUNBZ0lDQWdJQ0FuWm5Wc1ptbHNKem9nSjJaMWJHWnBiR3duTEFvZ0lDQWdJQ0FnSUNkbGJuSnZiQ0FuT2lBblpXNXliMnhzSUNjc0NpQWdJQ0FnSUNBZ0oyVnVjbTlzY3ljNklDZGxibkp2Ykd4ekp5d0tJQ0FnSUNBZ0lDQW5aR2x6ZEdsc0lDYzZJQ2RrYVhOMGFXeHNJQ2NzQ2lBZ0lDQWdJQ0FnSjJScGMzUnBiSE1uT2lBblpHbHpkR2xzYkhNbkxBb2dJQ0FnSUNBZ0lDZHBibk4wWVd4dFpXNTBKem9nSjJsdWMzUmhiR3h0Wlc1MEp5d0tJQ0FnSUNBZ0lDQW5iR0ZpWld4c1pXUW5PaUFuYkdGaVpXeGxaQ2NzQ2lBZ0lDQWdJQ0FnSjJ4aFltVnNiR2x1WnljNklDZHNZV0psYkdsdVp5Y3NDaUFnSUNBZ0lDQWdKMjF2WkdWc2JHVmtKem9nSjIxdlpHVnNaV1FuTEFvZ0lDQWdJQ0FnSUNkdGIyUmxiR3hwYm1jbk9pQW5iVzlrWld4cGJtY25MQW9nSUNBZ0lDQWdJQ2R0YjJSbGJHeGxjaWM2SUNkdGIyUmxiR1Z5Snl3S0lDQWdJQ0FnSUNBbmRISmhkbVZzYkdWa0p6b2dKM1J5WVhabGJHVmtKeXdLSjNSeVlYWmxiR3hwYm1jbk9pQW5kSEpoZG1Wc2FXNW5KeXdLSUNBZ0lDZDBjbUYyWld4c1pYSW5PaUFuZEhKaGRtVnNaWEluTEFvZ0lDQWdKMkZrY21WdWIyTnZjblJwWTI5MGNtOXdhR2xqSnpvZ0oyRmtjbVZ1YjJOdmNuUnBZMjkwY205d2FXTW5MQW9nSUNBZ0oyZHZibUZrYjNSeWIzQm9hVzRuT2lBbloyOXVZV1J2ZEhKdmNHbHVKeXdLSUNBZ0lDZDBhSGx5YjNSeWIzQm9hVzRuT2lBbmRHaDVjbTkwY205d2FXNG5MQW9nSUNBZ0oyVXVaeTRnSnpvZ0oyVXVaeTRzSnl3S0lDQWdJQ2RwTG1jdUlDYzZJQ2RwTG1jdUxDY3NDaUFnSUNBbllXeDFiV2x1YVhWdEp6b2dKMkZzZFcxcGJuVnRKeXdLSUNBZ0lDZGhiblJwTFdOc2IyTnJkMmx6WlNjNklDZGpiM1Z1ZEdWeVkyeHZZMnQzYVhObEp5d0tJQ0FnSUNkbmNtVjVKem9nSjJkeVlYa25MQW9nSUNBZ0p5QndiRzkxWjJnbk9pQW5JSEJzYjNjbkxBb2dJQ0FnSnlCMGVYSmxKem9nSnlCMGFYSmxKeXdLSUNBZ0lDZDBiM2RoY21Sekp6b2dKM1J2ZDJGeVpDQW5MQW9nSUNBZ0p5QmhaMlZwYm1jbk9pQW5JR0ZuYVc1bkp5d0tJQ0FnSUNkaGJtRmxjM1JvWlhScFl5YzZJQ2RoYm1WemRHaGxkR2xqSnl3S0lDQWdJQ2RvWVdWdGIyZHNiMkpwYmljNklDZG9aVzF2WjJ4dlltbHVKeXdLSUNBZ0lDZHNaWFZyWVdWdGFXRW5PaUFuYkdWMWEyVnRhV0VuTEFvZ0lDQWdKMjlsYzNSeWIyZGxiaWM2SUNkbGMzUnliMmRsYmljc0NpQWdJQ0FuYjJWemIzQm9ZV2QxY3ljNklDZGxjMjl3YUdGbmRYTW5MQW9nSUNBZ0oyOWxaR1Z0WVNjNklDZGxaR1Z0WVNjc0NpQWdJQ0FuWkdsaGNuSm9iMlZoSnpvZ0oyUnBZWEp5YUdWaEp5d0tJQ0FnSUNka2VYTndibTlsWVNjNklDZGtlWE53Ym1WaEp5d0tJQ0FnSUNkdFlXNXZaWFYyY21Vbk9pQW5iV0Z1WlhWMlpYSW5MQW9nSUNBZ0owMXlJQ2M2SUNkTmNpNG5MQW9nSUNBZ0owUnlJQ2M2SUNkRWNpNG5MQW9nSUNBZ0owMXljeUFuT2lBblRYSnpMaWNzQ2lBZ0lDQW5VM1FnSnpvZ0oxTjBMaWNzQ2lBZ0lDQjlDZ3BXUlZKWklEMGdld29nSUNBZ0lDQWdJQ2QyWlhKNUlIQnlaV05wYzJVbk9pQW5jSEpsWTJselpTd2daWGhoWTNRc0lIVnVhVzF3WldGamFHRmliR1VzSUhCbGNtWmxZM1FzSUdac1lYZHNaWE56Snl3S0lDQWdJQ0FnSUNBbmRtVnllU0JpWVhOcFl5YzZJQ2R5ZFdScGJXVnVkR0Z5ZVN3Z2NISnBiV0Z5ZVN3Z1puVnVaR0Z0Wlc1MFlXd3NJSE5wYlhCc1pTY3NDaUFnSUNBZ0lDQWdKM1psY25rZ1kyRndZV0pzWlNjNklDZGxabVpwWTJsbGJuUXNJSEJ5YjJacFkybGxiblFzSUhOcmFXeHNablZzSnl3S0lDQWdJQ0FnSUNBbmRtVnllU0JqYkdWaGJpYzZJQ2R6Y0c5MGJHVnpjeXdnYVcxdFlXTjFiR0YwWlN3Z2MzUmhhVzVzWlhOekp5d0tJQ0FnSUNBZ0lDQW5kbVZ5ZVNCamJHVmhjaWM2SUNkMGNtRnVjM0JoY21WdWRDd2djMmhsWlhJc0lIUnlZVzV6YkhWalpXNTBKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQmpiMjF3WlhScGRHbDJaU2M2SUNkaGJXSnBkR2x2ZFhNc0lHUnlhWFpsYml3Z1kzVjBkR2h5YjJGMEp5d0tJQ0FnSUNBZ0lDQW5kbVZ5ZVNCamIyNW1hV1JsYm5Rbk9pQW5jMlZzWmkxaGMzTjFjbVZrTENCelpXeG1MWEpsYkdsaGJuUXNJSE5sWTNWeVpTY3NDaUFnSUNBZ0lDQWdKM1psY25rZ1kyOXVjMmx6ZEdWdWRDYzZJQ2RqYjI1emRHRnVkQ3dnZFc1bVlXbHNhVzVuTENCMWJtbG1iM0p0TENCellXMWxKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQmpiMjUyWlc1MGFXOXVZV3duT2lBblkyOXVjMlZ5ZG1GMGFYWmxMQ0JqYjIxdGIyNHNJSEJ5WldScFkzUmhZbXhsTENCMWJtOXlhV2RwYm1Gc0p5d0tJQ0FnSUNBZ0lDQW5kbVZ5ZVNCamNtbDBhV05oYkNjNklDZDJhWFJoYkN3Z1kzSjFZMmxoYkN3Z1pYTnpaVzUwYVdGc0xDQnBibVJwYzNCbGJuTmhZbXhsTENCcGJuUmxaM0poYkNjc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnWkdGdVoyVnliM1Z6SnpvZ0ozQmxjbWxzYjNWekxDQndjbVZqWVhKcGIzVnpMQ0IxYm5OaFptVW5MQW9nSUNBZ0lDQWdJQ2QyWlhKNUlHUmhjbXNuT2lBbllteGhZMnNzSUdsdWEza3NJR1ZpYjI1NUxDQnpiMjkwZVNjc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnWkdWbGNDYzZJQ2RoWW5semJXRnNMQ0JpYjNSMGIyMXNaWE56TENCMllYTjBKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQmtaV3hwWTJGMFpTYzZJQ2R6ZFdKMGJHVXNJSE5zYVdkb2RDd2dabkpoWjJsc1pTd2dabkpoYVd3bkxDQW5kbVZ5ZVNCa2FXWm1aWEpsYm5Rbk9pQW5kVzUxYzNWaGJDd2daR2x6ZEdsdVkzUnBkbVVzSUdGMGVYQnBZMkZzTENCa2FYTnphVzFwYkdGeUp5d0tJQ0FnSUNBZ0lDQW5kbVZ5ZVNCa2FXWm1hV04xYkhRbk9pQW5ZMjl0Y0d4cFkyRjBaV1FzSUdOdmJYQnNaWGdzSUdSbGJXRnVaR2x1Wnljc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnWldGemVTYzZJQ2RsWm1admNuUnNaWE56TENCMWJtTnZiWEJzYVdOaGRHVmtMQ0IxYm1Ob1lXeHNaVzVuYVc1bkxDQnphVzF3YkdVbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUdaaGMzUW5PaUFuY21Gd2FXUXNJSE4zYVdaMExDQm1iR1ZsZEN3Z1lteHBjM1JsY21sdVp5Y3NDaUFnSUNBZ0lDQWdKM1psY25rZ1ptbHljM1FuT2lBblptbHljM1FuTEFvZ0lDQWdJQ0FnSUNkMlpYSjVJR1psZHljNklDZHRaV0ZuWlhJc0lITmpZWEpqWlN3Z2MyTmhiblFzSUd4cGJXbDBaV1FzSUc1bFoyeHBaMmxpYkdVbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUdkdmIyUW5PaUFuYzNWd1pYSmlMQ0J6ZFhCbGNtbHZjaXdnWlhoalpXeHNaVzUwSnl3S0lDQWdJQ0FnSUNBbmRtVnllU0JwYlhCdmNuUmhiblFuT2lBblkzSjFZMmxoYkN3Z2RtbDBZV3dzSUdWemMyVnVkR2xoYkN3Z2NHRnlZVzF2ZFc1MExDQnBiWEJsY21GMGFYWmxKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQnBiWEJ5WlhOemFYWmxKem9nSjJWNGRISmhiM0prYVc1aGNua3NJSEpsYldGeWEyRmliR1VuTEFvZ0lDQWdJQ0FnSUNkMlpYSjVJR2x1ZEdWeVpYTjBhVzVuSnpvZ0oyWmhjMk5wYm1GMGFXNW5MQ0J5WlcxaGNtdGhZbXhsTENCcGJuUnlhV2QxYVc1bkxDQmpiMjF3Wld4c2FXNW5KeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQnNZWEpuWlNjNklDZG9kV2RsTENCbmFXRnVkQ2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2diRzl1WnljNklDZGxlSFJsYm1SbFpDd2daWGgwWlc1emFYWmxMQ0JwYm5SbGNtMXBibUZpYkdVc0lIQnliM1J5WVdOMFpXUW5MQW9nSUNBZ0lDQWdJQ2QyWlhKNUlHNWxkeWM2SUNkcGJtNXZkbUYwYVhabExDQm1jbVZ6YUN3Z2IzSnBaMmx1WVd3c0lHTjFkSFJwYm1jdFpXUm5aU2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2diMkoyYVc5MWN5YzZJQ2RoY0hCaGNtVnVkQ3dnWlhacFpHVnVkQ3dnY0d4aGFXNHNJSFpwYzJsaWJHVW5MQW9nSUNBZ0lDQWdJQ2QyWlhKNUlISmxZWE52Ym1GaWJHVW5PaUFuWlhGMWFYUmhZbXhsTENCcWRXUnBZMmx2ZFhNc0lITmxibk5wWW14bExDQndjbUZqZEdsallXd3NJR1poYVhJbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUhKbFkyVnVkQ2M2SUNkMGFHVWdiR0YwWlhOMExDQmpkWEp5Wlc1MExDQm1jbVZ6YUN3Z2RYQXRkRzh0WkdGMFpTY3NDaUFnSUNBZ0lDQWdKM1psY25rZ2NtOTFaMmduT2lBblkyOWhjbk5sTENCcVlXZG5aV1FzSUhKMVoyZGxaQ3dnWTNKaFoyZDVMQ0JuY21sMGRIa3NJR0p5YjJ0bGJpY3NDaUFnSUNBZ0lDQWdKM1psY25rZ2MyVjJaWEpsSnpvZ0oyRmpkWFJsTENCbmNtRjJaU3dnWTNKcGRHbGpZV3dzSUhObGNtbHZkWE1zSUdKeWRYUmhiQ3dnY21Wc1pXNTBiR1Z6Y3ljc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnYzJsbmJtbG1hV05oYm5Rbk9pQW5hMlY1TENCdWIzUmhZbXhsTENCemRXSnpkR0Z1ZEdsaGJDd2dibTkwWlhkdmNuUm9lU3dnYlc5dFpXNTBiM1Z6TENCdFlXcHZjaXdnZG1sMFlXd25MQW9nSUNBZ0lDQWdJQ2QyWlhKNUlITnBiV2xzWVhJbk9pQW5ZV3hwYTJVc0lHRnJhVzRzSUdGdVlXeHZaMjkxY3l3Z1kyOXRjR0Z5WVdKc1pTd2daWEYxYVhaaGJHVnVkQ2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2djMmx0Y0d4bEp6b2dKMlZoYzNrc0lITjBjbUZwWjJoMFptOXlkMkZ5WkN3Z1pXWm1iM0owYkdWemN5d2dZbUZ6YVdNbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUhOdFlXeHNKem9nSjNScGJua3NJRzFwYm5WelkzVnNaU3dnYVc1bWFXNXBkR1Z6YVcxaGJDd2diV2xqY205elkyOXdhV01zSUhCbGRHbDBaU2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2djMjF2YjNSb0p6b2dKMlpzWVhRc0lHZHNZWE56ZVN3Z2NHOXNhWE5vWldRc0lHeGxkbVZzTENCbGRtVnVMQ0IxYm1Kc1pXMXBjMmhsWkNjc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnYzNCbFkybG1hV01uT2lBbmNISmxZMmx6WlN3Z1pYaGhZM1FzSUdWNGNHeHBZMmwwTENCa1pXWnBibWwwWlN3Z2RXNWhiV0pwWjNWdmRYTW5MQW9nSUNBZ0lDQWdJQ2QyWlhKNUlITjBjbUZ1WjJVbk9pQW5kMlZwY21Rc0lHVmxjbWxsTENCaWFYcGhjbkpsTENCMWJtTmhibTU1TENCd1pXTjFiR2xoY2l3Z2IyUmtKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQnpkSEpwWTNRbk9pQW5jM1JsY200c0lHRjFjM1JsY21Vc0lITmxkbVZ5WlN3Z2NtbG5iM0p2ZFhNc0lHaGhjbk5vTENCeWFXZHBaQ2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2djM1ZpYzNSaGJuUnBZV3duT2lBblkyOXVjMmxrWlhKaFlteGxMQ0J6YVdkdWFXWnBZMkZ1ZEN3Z1pYaDBaVzV6YVhabExDQmhiWEJzWlNjc0NpQWdJQ0FnSUNBZ0ozWmxjbmtnZFc1c2FXdGxiSGtuT2lBbmFXMXdjbTlpWVdKc1pTd2dhVzF3YkdGMWMybGliR1VzSUdSdmRXSjBablZzTENCa2RXSnBiM1Z6Snl3S0lDQWdJQ0FnSUNBbmRtVnllU0IxYm5WemRXRnNKem9nSjJGaWJtOXliV0ZzTENCbGVIUnlZVzl5WkdsdVlYSjVMQ0IxYm1OdmJXMXZiaXdnZFc1cGNYVmxKeXdLSUNBZ0lDQWdJQ0FuZG1WeWVTQjJhWE5wWW14bEp6b2dKMk52Ym5Od2FXTjFiM1Z6TENCbGVIQnZjMlZrTENCdlluWnBiM1Z6TENCd2NtOXRhVzVsYm5RbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUhkbFlXc25PaUFuWm1WbFlteGxMQ0JtY21GcGJDd2daR1ZzYVdOaGRHVXNJR1JsWW1sc2FYUmhkR1ZrTENCbWNtRm5hV3hsSnl3S0lDQWdJQ0FnSUNBbmRtVnllU0IzYVdSbEp6b2dKM1poYzNRc0lHVjRjR0Z1YzJsMlpTd2djM2RsWlhCcGJtY3NJR0p2ZFc1a2JHVnpjeWNzQ2lBZ0lDQWdJQ0FnSjNabGNua2dZV1p5WVdsa0p6b2dKM1JsY25KcFptbGxaQ2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2diMlowWlc0bk9pQW5abkpsY1hWbGJuUnNlU2NzQ2lBZ0lDQWdJQ0FnSjNabGNua2diMnhrSnpvZ0oyRnVZMmxsYm5RbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUc5d1pXNG5PaUFuZEhKaGJuTndZWEpsYm5RbkxBb2dJQ0FnSUNBZ0lDZDJaWEo1SUhCbGNtWmxZM1FuT2lBblpteGhkMnhsYzNNbkxBb25kbVZ5ZVNCd2IzZGxjbVoxYkNjNklDZGpiMjF3Wld4c2FXNW5KeXdLSUNBZ0lDZDJaWEo1SUhGMWFXTnJKem9nSjNKaGNHbGtKeXdLSUNBZ0lDZDJaWEo1SUhGMWFXVjBKem9nSjJoMWMyaGxaQ2NzQ2lBZ0lDQW5kbVZ5ZVNCelpYSnBiM1Z6SnpvZ0oyZHlZWFpsSnl3S0lDQWdJQ2QyWlhKNUlITm9hVzU1SnpvZ0oyZHNaV0Z0YVc1bkp5d0tJQ0FnSUNkMlpYSjVJSE5vYjNKMEp6b2dKMkp5YVdWbUp5d0tJQ0FnSUgwS0NrSkJSRjlRUVZSVVJWSk9VeUE5SUhzS0NpQWdJQ0FnSUNBZ0l5QkllWEJsSUFvS0lDQWdJQ0FnSUNBblpYaGpaV3hzWlc1MElHRm5jbVZsYldWdWRDYzZJQ2RWYzNWaGJHeDVMQ0IwYUdVZ1lXZHlaV1Z0Wlc1MElHbHpJRzV2ZENCemJ5QmxlR05sYkd4bGJuUXVJRU52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUIzYVhSb0lDSm5iMjlrSUdGbmNtVmxiV1Z1ZENJZ2IzSWdZbVYwZEdWeUlIbGxkQ3dnY1hWaGJuUnBabmtnZEdobElHRm5jbVZsYldWdWRDd2daUzVuTGlBaVFTQmhaM0psWlhNZ2QybDBhQ0JDSUhkcGRHaHBiaUExSlNCMWJtTmxjblJoYVc1MGVTSXVKeXdLSUNBZ0lDQWdJQ0FuWlhoalpXeHNaVzUwSUdacGRDYzZJQ2RQWm5SbGJpd2dkR2hsSUdacGRDQnBjeUJ1YjNRZ2MyOGdaWGhqWld4c1pXNTBMaUJEYjI1emFXUmxjaUJ4ZFdGdWRHbG1lV2x1WnlCMGFHVWdabWwwTENCbExtY3VJQ0pNYVc1bElHWnBkSE1nZEdobElHUmhkR0VnZDJsMGFHbHVJRFVsSUc5bUlIVnVZMlZ5ZEdGcGJuUjVJaTRuTEFvZ0lDQWdJQ0FnSUNkamIyMXdjbVZvWlc1emFYWmxJSEpsZG1sbGR5YzZJQ2REYjI1emFXUmxjaUJwWmlCMGFHVWdjbVYyYVdWM0lHbHpJSEpsWVd4c2VTQWlZMjl0Y0hKbGFHVnVjMmwyWlNJdUlFMXZjbVVnYjJaMFpXNGdkR2hoYmlCdWIzUWdhWFFnYVhNZ2FIbHdaUzRuTEFvZ0lDQWdJQ0FnSUNkdmRYUnpkR0Z1WkdsdVp5YzZJQ2RVYUdVZ2QyOXlaQ0FpYjNWMGMzUmhibVJwYm1jaUlHMXBaMmgwSUdKbElHTnZibk5wWkdWeVpXUWdhSGx3WlM0Z1EyOXVjMmxrWlhJZ1lXeDBaWEp1WVhScGRtVnpMQ0JsTG1jdUlDSnlaVzFoY210aFlteGxJaTRuTEFvZ0lDQWdJQ0FnSUNkbmNtOTFibVJpY21WaGEybHVaeWM2SUNkVWFHVWdkMjl5WkNBaVozSnZkVzVrWW5KbFlXdHBibWNpSUcxcFoyaDBJR0psSUdOdmJuTnBaR1Z5WldRZ2FIbHdaUzRnUTI5dWMybGtaWElnWVd4MFpYSnVZWFJwZG1WekxDQmxMbWN1SUNKeVpXMWhjbXRoWW14bElpNG5MQW9nSUNBZ0lDQWdJQ2RuY205MWJtUWdZbkpsWVd0cGJtY25PaUFuVkdobElIZHZjbVFnSW1keWIzVnVaR0p5WldGcmFXNW5JaUJ0YVdkb2RDQmlaU0JqYjI1emFXUmxjbVZrSUdoNWNHVXVJRU52Ym5OcFpHVnlJR0ZzZEdWeWJtRjBhWFpsY3l3Z1pTNW5MaUFpY21WdFlYSnJZV0pzWlNJdUp5d0tJQ0FnSUNBZ0lDQW5ibVYzSUNjNklDZEpaaUIwYUdVZ2QyOXlaQ0FpYm1WM0lpQnlaV1psY25NZ2RHOGdkR2hsSUhKbGMzVnNkSE1nYjNJZ2JXVjBhRzlrY3l3Z1pXUnBkRzl5Y3lCaGJtUWdjbVYyYVdWM1pYSnpJRzltZEdWdUlHUnBjMnhwYTJVZ2MzVmphQ0JqYkdGcGJYTXVJRU52Ym5OcFpHVnlJR1Y0Y0d4aGFXNXBibWNnYm05MlpXeDBlU0JwYmlCemIyMWxJRzkwYUdWeUlIZGhlUzRnVTI5dFpTQm9aV3h3Wm5Wc0lIZHZjbVJ6SUdGeVpTQWlhVzV1YjNaaGRHbDJaU0lzSUNKdmNtbG5hVzVoYkNJc0lDSmhiSFJsY201aGRHbDJaU0lzSUNKd2NtVjJhVzkxYzJ4NUlIVnVhMjV2ZDI0aUxpY3NDaUFnSUNBZ0lDQWdKMjV2ZG1Wc0lDYzZJQ2RKWmlCMGFHVWdkMjl5WkNBaWJtOTJaV3dpSUhKbFptVnljeUIwYnlCMGFHVWdjbVZ6ZFd4MGN5QnZjaUJ0WlhSb2IyUnpMQ0JsWkdsMGIzSnpJR0Z1WkNCeVpYWnBaWGRsY25NZ2IyWjBaVzRnWkdsemJHbHJaU0J6ZFdOb0lHTnNZV2x0Y3k0Z1EyOXVjMmxrWlhJZ1pYaHdiR0ZwYm1sdVp5QnViM1psYkhSNUlHbHVJSE52YldVZ2IzUm9aWElnZDJGNUxpQlRiMjFsSUdobGJIQm1kV3dnZDI5eVpITWdZWEpsSUNKcGJtNXZkbUYwYVhabElpd2dJbTl5YVdkcGJtRnNJaXdnSW1OMWRIUnBibWN0WldSblpTSXNJQ0poYkhSbGNtNWhkR2wyWlNJc0lDSndjbVYyYVc5MWMyeDVJSFZ1YTI1dmQyNGlMaWNzQ2lBZ0lDQWdJQ0FnSnlCd2NtOTJaU0FuT2lBblVHaHlZWE5sY3lCaFltOTFkQ0FpY0hKdmRtVWlJSE5vYjNWc1pDQmlaU0JqYjI1emFXUmxjbVZrSUhkcGRHZ2dZMkYxZEdsdmJpNGdVM1J5YVdOMElIQnliMjltSUdseklIQnZjM05wWW14bElHOXViSGtnYVc0Z2JXRjBhQ3dnZDJobGNtVmhjeUJ6WTJsbGJtTmxJSFZ6ZFdGc2JIa2diM0JsY21GMFpYTWdkMmwwYUNCbGRtbGtaVzVqWlM0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklIZHBkR2dnZDI5eVpITWdiR2xyWlNBaVpYWnBaR1Z1WTJVaUxDQWlaR1Z0YjI1emRISmhkR2x2YmlJc0lDSmpiMjVtYVhKdFlYUnBiMjRpSUdWMFl5NG5MQW9nSUNBZ0lDQWdJQ2NnY0hKdmRtVmtJQ2M2SUNkUWFISmhjMlZ6SUdGaWIzVjBJQ0p3Y205MlpTSWdjMmh2ZFd4a0lHSmxJR052Ym5OcFpHVnlaV1FnZDJsMGFDQmpZWFYwYVc5dUxpQlRkSEpwWTNRZ2NISnZiMllnYVhNZ2NHOXpjMmxpYkdVZ2IyNXNlU0JwYmlCdFlYUm9MQ0IzYUdWeVpXRnpJSE5qYVdWdVkyVWdkWE4xWVd4c2VTQnZjR1Z5WVhSbGN5QjNhWFJvSUdWMmFXUmxibU5sTGlCRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ2QybDBhQ0IzYjNKa2N5QnNhV3RsSUNKbGRtbGtaVzVqWlNJc0lDSmtaVzF2Ym5OMGNtRjBhVzl1SWl3Z0ltTnZibVpwY20xaGRHbHZiaUlnWlhSakxpY3NDaUFnSUNBZ0lDQWdKeUJ3Y205dlppQW5PaUFuVUdoeVlYTmxjeUJoWW05MWRDQWljSEp2YjJZaUlITm9iM1ZzWkNCaVpTQmpiMjV6YVdSbGNtVmtJSGRwZEdnZ1kyRjFkR2x2Ymk0Z1UzUnlhV04wSUhCeWIyOW1JR2x6SUhCdmMzTnBZbXhsSUc5dWJIa2dhVzRnYldGMGFDd2dkMmhsY21WaGN5QnpZMmxsYm1ObElIVnpkV0ZzYkhrZ2IzQmxjbUYwWlhNZ2QybDBhQ0JsZG1sa1pXNWpaUzRnUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUhkcGRHZ2dkMjl5WkhNZ2JHbHJaU0FpWlhacFpHVnVZMlVpTENBaVpHVnRiMjV6ZEhKaGRHbHZiaUlzSUNKamIyNW1hWEp0WVhScGIyNGlJR1YwWXk0bkxBb2dJQ0FnSUNBZ0lDY2djSEp2ZG1WeklDYzZJQ2RRYUhKaGMyVnpJR0ZpYjNWMElDSndjbTkyWlhNaUlITm9iM1ZzWkNCaVpTQmpiMjV6YVdSbGNtVmtJSGRwZEdnZ1kyRjFkR2x2Ymk0Z1UzUnlhV04wSUhCeWIyOW1JR2x6SUhCdmMzTnBZbXhsSUc5dWJIa2dhVzRnYldGMGFDd2dkMmhsY21WaGN5QnpZMmxsYm1ObElIVnpkV0ZzYkhrZ2IzQmxjbUYwWlhNZ2QybDBhQ0JsZG1sa1pXNWpaUzRnUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUhkcGRHZ2dkbVZ5WW5NZ2JHbHJaU0FpWlhacFpHVnVZMlVpTENBaVpHVnRiMjV6ZEhKaGRHVWlMQ0FpWTI5dVptbHliU0lnWlhSakxpY3NDaUFnSUNBZ0lDQWdKMk5sY25SaGFXNXNlU2M2SUNkRGIyNXphV1JsY2lCcFppQjBhR2x6SUhObGJuUmxibU5sSUc1bFpXUnpJSFJvWlNCM2IzSmtJQ0pqWlhKMFlXbHViSGtpTGlCQlkyTnZjbVJwYm1jZ2RHOGdWR2hsSUVWc1pXMWxiblJ6SUc5bUlGTjBlV3hsT2lBaVZYTmxaQ0JwYm1ScGMyTnlhVzFwYm1GMFpXeDVJR0o1SUhOdmJXVWdjM0JsWVd0bGNuTXNJRzExWTJnZ1lYTWdiM1JvWlhKeklIVnpaU0IyWlhKNUxDQjBieUJwYm5SbGJuTnBabmtnWVc1NUlHRnVaQ0JsZG1WeWVTQnpkR0YwWlcxbGJuUXVJRUVnYldGdWJtVnlhWE50SUc5bUlIUm9hWE1nYTJsdVpDd2dZbUZrSUdsdUlITndaV1ZqYUN3Z2FYTWdaWFpsYmlCM2IzSnpaU0JwYmlCM2NtbDBhVzVuSWk0bkxBb2dJQ0FnSUNBZ0lDY2dabUZqZENBbk9pQW5RMmhsWTJzZ2FXWWdkR2hsSUhkdmNtUWdJbVpoWTNRaUlHbHpJR0ZqZEhWaGJHeDVJR0Z3Y0d4cFpXUWdkRzhnWVNCbVlXTjBMaUJCWTJOdmNtUnBibWNnZEc4Z1ZHaGxJRVZzWlcxbGJuUnpJRzltSUZOMGVXeGxPaUFpVlhObElIUm9hWE1nZDI5eVpDQnZibXg1SUc5bUlHMWhkSFJsY25NZ2IyWWdZU0JyYVc1a0lHTmhjR0ZpYkdVZ2IyWWdaR2x5WldOMElIWmxjbWxtYVdOaGRHbHZiaXdnYm05MElHOW1JRzFoZEhSbGNuTWdiMllnYW5Wa1oyMWxiblF1SWljc0NpQWdJQ0FnSUNBZ0oyaHBaMmhzZVNjNklDZFVhR1VnZDI5eVpDQWlhR2xuYUd4NUlpQnlZWEpsYkhrZ2FHbG5hR3g1SUdOdmJuUnlhV0oxZEdWeklIUnZJR0psZEhSbGNpQjFibVJsY25OMFlXNWthVzVuTGlCRGIyNXphV1JsY2lCeVpXMXZkbWx1WnlCcGRDQnZjaXdnYVdZZ2FXMXdiM0owWVc1MElIRjFZVzUwYVdaNWFXNW5JR2wwTGljc0NpQWdJQ0FnSUNBZ0oyZHlaV0YwYkhrbk9pQW5WR2hsSUhkdmNtUWdJbWR5WldGMGJIa2lJSEpoY21Wc2VTQmpiMjUwY21saWRYUmxjeUIwYnlCaVpYUjBaWElnZFc1a1pYSnpkR0Z1WkdsdVp5NGdRMjl1YzJsa1pYSWdjbVZ0YjNacGJtY2dhWFFnYjNJc0lHbG1JR2x0Y0c5eWRHRnVkQ0J4ZFdGdWRHbG1lV2x1WnlCcGRDNG5MQW9nSUNBZ0lDQWdJQ2RzYVhSbGNtRnNiSGtuT2lBblZHaGxJSGR2Y21RZ0lteHBkR1Z5WVd4c2VTSWdhWE1nYjJaMFpXNGdiV2x6ZFhObFpDQjBieUJ6ZFhCd2IzSjBJR0Z1SUdWNFlXZG5aWEpoZEdsdmJpd2dkMmhwWTJnZ2FYTWdhR0Z5Wkd4NUlHRndjSEp2Y0hKcFlYUmxJR1p2Y2lCaElITmphV1Z1ZEdsbWFXTWdjR0Z3WlhJdUlFTnZibk5wWkdWeUlHbG1JR2wwY3lCMWMyVWdhWE1nWVhCd2NtOXdjbWxoZEdVdUp5d0tJQ0FnSUNBZ0lDQW5iR2wwWlhKaGJDQW5PaUFuVkdobElIZHZjbVFnSW14cGRHVnlZV3dpSUdseklHOW1kR1Z1SUcxcGMzVnpaV1FnZEc4Z2MzVndjRzl5ZENCaGJpQmxlR0ZuWjJWeVlYUnBiMjRzSUhkb2FXTm9JR2x6SUdoaGNtUnNlU0JoY0hCeWIzQnlhV0YwWlNCbWIzSWdZU0J6WTJsbGJuUnBabWxqSUhCaGNHVnlMaUJEYjI1emFXUmxjaUJwWmlCMWMyVWdhWE1nWVhCd2NtOXdjbWxoZEdVdUp5d0tJQ0FnSUNBZ0lDQW5jbVZ6Y0dWamRHbDJaV3g1SnpvZ0owTnZibk5wWkdWeUlHbG1JQ0p5WlhOd1pXTjBhWFpsYkhraUlHbHpJRzVsWTJWemMyRnllUzRnU1c0Z1kyeGxZWElnWTJGelpYTXNJSGx2ZFNCallXNGdiMjFwZENCcGRDd2daUzVuTGlBaVFTQmhibVFnUWlCaGNtVWdaWEYxWVd3Z2RHOGdNU0JoYm1RZ01pSXVJRTl5SUhOcGJYQnNhV1o1SUdsMElHRnpJQ0pCSUQwZ01TQmhibVFnUWlBOUlESWlMaWNzQ2lBZ0lDQWdJQ0FnSjJOdmNuSmxjM0J2Ym1ScGJtZHNlU2M2SUNkRGIyNXphV1JsY2lCcFppQWlZMjl5Y21WemNHOXVaR2x1WjJ4NUlpQnBjeUJ1WldObGMzTmhjbmt1SUVsdUlHTnNaV0Z5SUdOaGMyVnpMQ0I1YjNVZ1kyRnVJRzl0YVhRZ2FYUXNJR1V1Wnk0Z0lrRWdZVzVrSUVJZ1lYSmxJR1Z4ZFdGc0lIUnZJREVnWVc1a0lESWlMaUJQY2lCemFXMXdiR2xtZVNCcGRDQmhjeUFpUVNBOUlERWdZVzVrSUVJZ1BTQXlJaTRuTEFvZ0lDQWdJQ0FnSUNkaVpYTjBKem9nSjBsbUlIUm9aU0IzYjNKa0lDSmlaWE4wSWlCelpYSjJaWE1nYUdWeVpTQjBieUJ4ZFdGc2FXWjVJSEpsYzNWc2RITWdiM0lnYldWMGFHOWtjeXdnYVhRZ2QybHNiQ0JpWlNCamIyNXphV1JsY21Wa0lHaDVjR1VnWVc1a0lITm9iM1ZzWkNCaVpTQmhkbTlwWkdWa0xpQkRiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dhWFFnZDJsMGFDQWliM0IwYVcxaGJDSWdiM0lnSW5KbFlYTnZibUZpYkdVaUlHOXlJR3AxYzNRZ2NtVnRiM1pwYm1jZ2FYUXVKeXdLSUNBZ0lDQWdJQ0FuUW1WemRDYzZJQ2RKWmlCMGFHVWdkMjl5WkNBaVltVnpkQ0lnYzJWeWRtVnpJR2hsY21VZ2RHOGdjWFZoYkdsbWVTQnlaWE4xYkhSeklHOXlJRzFsZEdodlpITXNJR2wwSUhkcGJHd2dZbVVnWTI5dWMybGtaWEpsWkNCb2VYQmxJR0Z1WkNCemFHOTFiR1FnWW1VZ1lYWnZhV1JsWkM0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklHbDBJSGRwZEdnZ0ltOXdkR2x0WVd3aUlHOXlJQ0p5WldGemIyNWhZbXhsSWlCdmNpQnFkWE4wSUhKbGJXOTJhVzVuSUdsMExpY3NDaUFnSUNBZ0lDQWdKMGwwSUdseklHdHViM2R1SnpvZ0owbDBJR2x6SUd0dWIzZHVJSFJvWVhRZ2NHaHlZWE5sY3lCc2FXdGxJQ0pKZENCcGN5QnJibTkzYmlJZ2MyaHZkV3hrSUdKbElHRjJiMmxrWldRdUlFOW1kR1Z1TENCcGRDQnBjeUJ1YjNRZ1lXTjBkV0ZzYkhrZ2EyNXZkMjRnZEc4Z2RHaGxJSEpsWVdSbGNuTXVJRXAxYzNRZ2MzUmhkR1VnZEdobElHWmhZM1FnWVc1a0lITjFjSEJzZVNCaElISmxabVZ5Wlc1alpTNG5MQW9nSUNBZ0lDQWdJQ2RwZENCcGN5QnJibTkzYmljNklDZEpkQ0JwY3lCcmJtOTNiaUIwYUdGMElIQm9jbUZ6WlhNZ2JHbHJaU0FpYVhRZ2FYTWdhMjV2ZDI0aUlITm9iM1ZzWkNCaVpTQmhkbTlwWkdWa0xpQlBablJsYml3Z2FYUWdhWE1nYm05MElHRmpkSFZoYkd4NUlHdHViM2R1SUhSdklIUm9aU0J5WldGa1pYSnpMaUJLZFhOMElITjBZWFJsSUhSb1pTQm1ZV04wSUdGdVpDQnpkWEJ3YkhrZ1lTQnlaV1psY21WdVkyVXVKeXdLSUNBZ0lDQWdJQ0FuWVhKbElIZGxiR3dnYTI1dmQyNG5PaUFuU1hRZ2FYTWdkMlZzYkNCcmJtOTNiaUIwYUdGMElIQm9jbUZ6WlhNZ2QybDBhQ0FpWVhKbElIZGxiR3dnYTI1dmQyNGlJR0Z5WlNCamIyNXphV1JsY21Wa0lHRnljbTluWVc1MExpQlZjM1ZoYkd4NUxDQnBjeUJwZENCdWIzUWdjMjhnZDJWc2JDQnJibTkzYmlCMGJ5QjBhR1VnY21WaFpHVnlMaUJEYjI1emFXUmxjaUJ5WlcxdmRtbHVaeUJwZENCdmNpQmhkQ0JzWldGemRDQnpkWEJ3YkhscGJtY2dkR2hsSUhKbFptVnlaVzVqWlhNdUp5d0tJQ0FnSUNBZ0lDQW5hWE1nZDJWc2JDQnJibTkzYmljNklDZEpkQ0JwY3lCM1pXeHNJR3R1YjNkdUlIUm9ZWFFnY0doeVlYTmxjeUIzYVhSb0lDSnBjeUIzWld4c0lHdHViM2R1SWlCaGNtVWdZMjl1YzJsa1pYSmxaQ0JoY25KdloyRnVkQzRnVlhOMVlXeHNlU3dnYVhNZ2FYUWdibTkwSUhOdklIZGxiR3dnYTI1dmQyNGdkRzhnZEdobElISmxZV1JsY2k0Z1EyOXVjMmxrWlhJZ2NtVnRiM1pwYm1jZ2FYUWdiM0lnWVhRZ2JHVmhjM1FnYzNWd2NHeDVhVzVuSUhSb1pTQnlaV1psY21WdVkyVnpMaWNzQ2lBZ0lDQWdJQ0FnSjNSb1pTQm1hWEp6ZENCMGFXMWxKem9nSjBsbUlDSjBhR1VnWm1seWMzUWdkR2x0WlNJZ2NtVm1aWEp6SUhSdklIUm9aU0JtYVc1a2FXNW5jeXdnZEhKNUlIUnZJR1pwYm1RZ1lTQmlaWFIwWlhJZ2QyRjVJSFJ2SUdOc1lXbHRJRzV2ZG1Wc2RIa2diMllnZEdobElIZHZjbXNnWW1WallYVnpaU0J6ZFdOb0lHVjRjSEpsYzNOcGIyNXpJR0Z5WlNCdlpuUmxiaUJqYjI1emFXUmxjbVZrSUdoNWNHVWdZVzVrSUdScGMyTnZkWEpoWjJWa0lHSjVJR3B2ZFhKdVlXeHpMaUJVY25rZ2RYTnBibWNnZG1WeVluTWdZV3h5WldGa2VTQnpkV2RuWlhOMGFXNW5JSFJvWlNCdWIzWmxiSFI1TENCc2FXdGxJQ0oxYm1OdmRtVnlJaXdnSW1sdWRtVnVkQ0lzSUNKeVpYTnZiSFpsSWl3Z0luTnZiSFpsSWl3Z0luQnliM0J2YzJVaUlHVjBZeTRuTEFvZ0lDQWdJQ0FnSUNkMGFHVWdkbVZ5ZVNCbWFYSnpkQ0IwYVcxbEp6b2dKMGxtSUNKMGFHVWdkbVZ5ZVNCbWFYSnpkQ0IwYVcxbElpQnlaV1psY25NZ2RHOGdkR2hsSUdacGJtUnBibWR6TENCMGNua2dkRzhnWm1sdVpDQmhJR0psZEhSbGNpQjNZWGtnZEc4Z1kyeGhhVzBnYm05MlpXeDBlU0J2WmlCMGFHVWdkMjl5YXlCaVpXTmhkWE5sSUhOMVkyZ2daWGh3Y21WemMybHZibk1nWVhKbElHOW1kR1Z1SUdOdmJuTnBaR1Z5WldRZ2FIbHdaU0JoYm1RZ1pHbHpZMjkxY21GblpXUWdZbmtnYW05MWNtNWhiSE11SUZSeWVTQjFjMmx1WnlCMlpYSmljeUJoYkhKbFlXUjVJSE4xWjJkbGMzUnBibWNnZEdobElHNXZkbVZzZEhrc0lHeHBhMlVnSW5WdVkyOTJaWElpTENBaWFXNTJaVzUwSWl3Z0luSmxjMjlzZG1VaUxDQWljMjlzZG1VaUxDQWljSEp2Y0c5elpTSWdaWFJqTGljc0Nnb2dJQ0FnSUNBZ0lDTWdVWFZsYzNScGIyNWhZbXhsSUhCaGRIUmxjbTV6Q2dvZ0lDQWdJQ0FnSUNkaVpXVnVJR0YwZEhKaFkzUnBibWNnWVNCbmNtVmhkQ0JoZEhSbGJuUnBiMjRuT2lBblFYUjBjbUZqZEdWa0lHRjBkR1Z1ZEdsdmJpQnBjeUJ1YjNRZ2JtVmpaWE56WVhKcGJIa2dZU0JuYjI5a0lHMXZkR2wyWVhScGIyNGdabTl5SUhKbGMyVmhjbU5vTGlCRGIyNXphV1JsY2lCaElITjBjbTl1WjJWeUlHMXZkR2wyWVhScGIyNHVJRTF2Y21WdmRtVnlMQ0IwYUdseklIQm9jbUZ6WlNCcGN5QnZkbVZ5ZFhObFpDNG5MQW9nSUNBZ0lDQWdJQ2RoZEhSeVlXTjBaV1FnWVNCbmNtVmhkQ0JoZEhSbGJuUnBiMjRuT2lBblFYUjBjbUZqZEdWa0lHRjBkR1Z1ZEdsdmJpQnBjeUJ1YjNRZ2JtVmpaWE56WVhKcGJIa2dZU0JuYjI5a0lHMXZkR2wyWVhScGIyNGdabTl5SUhKbGMyVmhjbU5vTGlCRGIyNXphV1JsY2lCaElITjBjbTl1WjJWeUlHMXZkR2wyWVhScGIyNHVJRTF2Y21WdmRtVnlMQ0IwYUdseklIQm9jbUZ6WlNCcGN5QnZkbVZ5ZFhObFpDNG5MQW9nSUNBZ0lDQWdJQ2RoZEhSeVlXTjBaV1FnWjNKbFlYUWdZWFIwWlc1MGFXOXVKem9nSjBGMGRISmhZM1JsWkNCaGRIUmxiblJwYjI0Z2FYTWdibTkwSUc1bFkyVnpjMkZ5YVd4NUlHRWdaMjl2WkNCdGIzUnBkbUYwYVc5dUlHWnZjaUJ5WlhObFlYSmphQzRnUTI5dWMybGtaWElnWVNCemRISnZibWRsY2lCdGIzUnBkbUYwYVc5dUxpQk5iM0psYjNabGNpd2dkR2hwY3lCd2FISmhjMlVnYVhNZ2IzWmxjblZ6WldRdUp5d0tJQ0FnSUNBZ0lDQW5ZWFIwY21GamRHVmtJR0YwZEdWdWRHbHZiaWM2SUNkQmRIUnlZV04wWldRZ1lYUjBaVzUwYVc5dUlHbHpJRzV2ZENCdVpXTmxjM05oY21sc2VTQmhJR2R2YjJRZ2JXOTBhWFpoZEdsdmJpQm1iM0lnY21WelpXRnlZMmd1SUVOdmJuTnBaR1Z5SUdFZ2MzUnliMjVuWlhJZ2JXOTBhWFpoZEdsdmJpNGdUVzl5Wlc5MlpYSXNJSFJvYVhNZ2NHaHlZWE5sSUdseklHOTJaWEoxYzJWa0xpY3NDaUFnSUNBZ0lDQWdKMDl1WlNCdlppQjBhR1VnYlc5emRDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnYVhRZ2QybDBhRzkxZENBaVQyNWxJRzltSUhSb1pTQnRiM04wSWk0Z1FXTmpiM0prYVc1bklIUnZJSFJvWlNCRmJHVnRaVzUwY3lCdlppQlRkSGxzWlRvZ0lsUm9aWEpsSUdseklHNXZkR2hwYm1jZ2QzSnZibWNnYVc0Z2RHaHBjenNnYVhRZ2FYTWdjMmx0Y0d4NUlIUm9jbVZoWkdKaGNtVWdZVzVrSUdadmNtTnBZbXhsTFdabFpXSnNaUzRpSnl3S0lDQWdJQ0FnSUNBbmIyNWxJRzltSUhSb1pTQnRiM04wSnpvZ0owTnZibk5wWkdWeUlISmxkM0pwZEdsdVp5QnBkQ0IzYVhSb2IzVjBJQ0p2Ym1VZ2IyWWdkR2hsSUcxdmMzUWlMaUJCWTJOdmNtUnBibWNnZEc4Z2RHaGxJRVZzWlcxbGJuUnpJRzltSUZOMGVXeGxPaUFpVkdobGNtVWdhWE1nYm05MGFHbHVaeUIzY205dVp5QnBiaUIwYUdsek95QnBkQ0JwY3lCemFXMXdiSGtnZEdoeVpXRmtZbUZ5WlNCaGJtUWdabTl5WTJsaWJHVXRabVZsWW14bExpSW5MQW9nSUNBZ0lDQWdJQ2RVYUdseklITm9iM2R6SnpvZ0owbDBJRzFwWjJoMElHSmxJSFZ1WTJ4bFlYSWdkMmhoZENBaVZHaHBjeUlnY0c5cGJuUnpJSFJ2SUdsbUlIUm9aU0J3Y21WMmFXOTFjeUJ3YUhKaGMyVWdkMkZ6SUdOdmJYQnNhV05oZEdWa0xpQlNaWGR5YVhSbElIZHBkR2dnWVNCdGIzSmxJSE53WldOcFptbGpJSE4xWW1wbFkzUXNJR1V1Wnk0Z0lsUm9hWE1nZEhKbGJtUWdjMmh2ZDNNaUxpY3NDaUFnSUNBZ0lDQWdKMVJvYVhNZ1pHVnRiMjV6ZEhKaGRHVnpKem9nSjBsMElHMXBaMmgwSUdKbElIVnVZMnhsWVhJZ2QyaGhkQ0FpVkdocGN5SWdjRzlwYm5SeklIUnZJR2xtSUhCeVpYWnBiM1Z6SUhCb2NtRnpaU0IzWVhNZ1kyOXRjR3hwWTJGMFpXUXVJRkpsZDNKcGRHVWdkMmwwYUNCaElHMXZjbVVnYzNCbFkybG1hV01nYzNWaWFtVmpkQ3dnWlM1bkxpQWlWR2hwY3lCbGVIQmxjbWx0Wlc1MElHUmxiVzl1YzNSeVlYUmxjeUl1Snl3S0lDQWdJQ0FnSUNBblZHaHBjeUJ3Y205MlpYTW5PaUFuU1hRZ2JXbG5hSFFnWW1VZ2RXNWpiR1ZoY2lCM2FHRjBJQ0pVYUdseklpQndiMmx1ZEhNZ2RHOGdhV1lnZEdobElIQnlaWFpwYjNWeklIQm9jbUZ6WlNCM1lYTWdZMjl0Y0d4cFkyRjBaV1F1SUZKbGQzSnBkR1VnZDJsMGFDQmhJRzF2Y21VZ2MzQmxZMmxtYVdNZ2MzVmlhbVZqZEN3Z1pTNW5MaUFpVkdocGN5QmxlSEJsY21sdFpXNTBJSEJ5YjNabGN5SXVKeXdLSUNBZ0lDQWdJQ0FuVkdocGN5QnBjeWM2SUNkSmRDQnRhV2RvZENCaVpTQjFibU5zWldGeUlIZG9ZWFFnSWxSb2FYTWdhWE1pSUhCdmFXNTBjeUIwYnlCcFppQjBhR1VnY0hKbGRtbHZkWE1nY0doeVlYTmxJSGRoY3lCamIyMXdiR2xqWVhSbFpDNGdVbVYzY21sMFpTQjNhWFJvSUdFZ2JXOXlaU0J6Y0dWamFXWnBZeUJ6ZFdKcVpXTjBMQ0JsTG1jdUlDSlVhR2x6SUhaaGJIVmxJR2x6SWk0bkxBb2dJQ0FnSUNBZ0lDZFVhR2x6SUd4bFlXUnpKem9nSjBsMElHMXBaMmgwSUdKbElIVnVZMnhsWVhJZ2QyaGhkQ0FpVkdocGN5QnNaV0ZrY3lJZ2NHOXBiblJ6SUhSdklHbG1JSFJvWlNCd2NtVjJhVzkxY3lCd2FISmhjMlVnZDJGeklHTnZiWEJzYVdOaGRHVmtMaUJTWlhkeWFYUmxJSGRwZEdnZ1lTQnRiM0psSUhOd1pXTnBabWxqSUhOMVltcGxZM1FzSUdVdVp5NGdJbFJvYVhNZ2NtVnpkV3gwSUd4bFlXUnpJaTRuTEFvZ0lDQWdJQ0FnSUNkbGRDQmhiQ0FuT2lBblRtVmxaSE1nWVNCd1pYSnBiMlFnWVdaMFpYSWdJbVYwSUdGc0lpNGdSbTl5SUdWNFlXMXdiR1VnSWtGc1ptVnliM1lnWlhRZ1lXd3VJSE5vYjNkbFpDSXVKeXdLSUNBZ0lDQWdJQ0FuWTI5dWRtbHVZMmx1WnlCd2NtOXZaaWM2SUNkVmMzVmhiR3g1SUhCeWIyOW1JR2xtSUdKNUlHUmxabWx1YVhScGIyNGdZMjl1ZG1sdVkybHVaeXdnYzI4Z2VXOTFJRzFoZVNCdmJXbDBJSFJvWlNCM2IzSmtJQ0pqYjI1MmFXNWphVzVuSWk0bkxBb0tJQ0FnSUNBZ0lDQWpJRk53Wld4c2FXNW5JRzkxZENCMGFHVWdZV0ppY21WMmFXRjBhVzl1Y3dvS0owWlBVbFJTUVU0bk9pQW5WVzVqWVhCcGRHRnNhWHBsSUNKR1QxSlVVa0ZPSWlCaGN5QWlSbTl5ZEhKaGJpSWdabTl5SUdOc1pXRnlaWElnYkc5dmF5NG5MQW9nSUNBZ0owTlBUVk5QVENjNklDZFZibU5oY0dsMFlXeHBlbVVnSWtOUFRWTlBUQ0lnWVhNZ0lrTnZiWE52YkNJZ1ptOXlJR05zWldGeVpYSWdiRzl2YXk0bkxBb2dJQ0FnSjBGUVVFOU1UeWM2SUNkVmJtTmhjR2wwWVd4cGVtVWdJa0ZRVUU5TVR5SWdZWE1nSWtGd2NHOXNieUlnWm05eUlHTnNaV0Z5WlhJZ2JHOXZheTRuTEFvZ0lDQWdKMFZNVFVWU0p6b2dKMVZ1WTJGd2FYUmhiR2w2WlNBaVJVeE5SVklpSUdGeklDSkZiRzFsY2lJZ1ptOXlJR05zWldGeVpYSWdiRzl2YXk0bkxBb0tJQ0FnSUNNZ1dtOXRZbWxsSUc1dmRXNXpDZ29nSUNBZ0oyMWhaR1VnWVNCa1pXTnBjMmx2YmljNklDZFNaWGR5YVhSbElIVnphVzVuSUhSb1pTQjJaWEppSUNKa1pXTnBaR1ZrSWlCcGJuTjBaV0ZrSUc5bUlIcHZiV0pwWlNCdWIzVnVJQ0prWldOcGMybHZiaUl1Snl3S0lDQWdJQ2R0WVd0bElHRWdaR1ZqYVhOcGIyNG5PaUFuVW1WM2NtbDBaU0IxYzJsdVp5QjBhR1VnZG1WeVlpQWlaR1ZqYVdSbElpQnBibk4wWldGa0lHOW1JSHB2YldKcFpTQnViM1Z1SUNKa1pXTnBjMmx2YmlJdUp5d0tJQ0FnSUNkd1pYSm1iM0p0WldRZ2RHaGxJRzFsWVhOMWNtVnRaVzUwSnpvZ0oxSmxkM0pwZEdVZ2RYTnBibWNnZEdobElIWmxjbUlnSW0xbFlYTjFjbVZrSWlCcGJuTjBaV0ZrSUc5bUlIcHZiV0pwWlNCdWIzVnVJQ0p0WldGemRYSmxiV1Z1ZENJdUp5d0tJQ0FnSUNkdFlXUmxJSFJvWlNCdFpXRnpkWEpsYldWdWRDYzZJQ2RTWlhkeWFYUmxJSFZ6YVc1bklIUm9aU0IyWlhKaUlDSnRaV0Z6ZFhKbFpDSWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaWJXVmhjM1Z5WlcxbGJuUWlMaWNzQ2lBZ0lDQW5iV0ZyWlNCMGFHVWdiV1ZoYzNWeVpXMWxiblFuT2lBblVtVjNjbWwwWlNCMWMybHVaeUIwYUdVZ2RtVnlZaUFpYldWaGMzVnlaU0lnYVc1emRHVmhaQ0J2WmlCNmIyMWlhV1VnYm05MWJpQWliV1ZoYzNWeVpXMWxiblFpTGljc0NpQWdJQ0FuZEdGclpTQnBiblJ2SUdOdmJuTnBaR1Z5WVhScGIyNG5PaUFuVW1WM2NtbDBaU0IxYzJsdVp5QjBhR1VnZG1WeVlpQWlZMjl1YzJsa1pYSWlJR2x1YzNSbFlXUWdiMllnZW05dFltbGxJRzV2ZFc0Z0ltTnZibk5wWkdWeVlYUnBiMjRpTGljc0NpQWdJQ0FuYVhNZ2FXNGdZV2R5WldWdFpXNTBKem9nSjFKbGQzSnBkR1VnZFhOcGJtY2dkR2hsSUhabGNtSWdJbUZuY21WbGN5SWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaVlXZHlaV1Z0Wlc1MElpNG5MQW9nSUNBZ0oybHpJR2x1SUdkdmIyUWdZV2R5WldWdFpXNTBKem9nSjFKbGQzSnBkR1VnZFhOcGJtY2dkR2hsSUhabGNtSWdJbUZuY21WbGN5SWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaVlXZHlaV1Z0Wlc1MElpNG5MQW9nSUNBZ0oyRnlaU0JwYmlCaFozSmxaVzFsYm5Rbk9pQW5VbVYzY21sMFpTQjFjMmx1WnlCMGFHVWdkbVZ5WWlBaVlXZHlaV1VpSUdsdWMzUmxZV1FnYjJZZ2VtOXRZbWxsSUc1dmRXNGdJbUZuY21WbGJXVnVkQ0l1Snl3S0lDQWdJQ2RoY21VZ2FXNGdaMjl2WkNCaFozSmxaVzFsYm5Rbk9pQW5VbVYzY21sMFpTQjFjMmx1WnlCMGFHVWdkbVZ5WWlBaVlXZHlaV1VpSUdsdWMzUmxZV1FnYjJZZ2VtOXRZbWxsSUc1dmRXNGdJbUZuY21WbGJXVnVkQ0l1Snl3S0lDQWdJQ2QzWVhNZ2FXNGdZV2R5WldWdFpXNTBKem9nSjFKbGQzSnBkR1VnZFhOcGJtY2dkR2hsSUhabGNtSWdJbUZuY21WbFpDSWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaVlXZHlaV1Z0Wlc1MElpNG5MQW9nSUNBZ0oybHpJR0Z1SUdsdVpHbGpZWFJwYjI0Z2IyWW5PaUFuVW1WM2NtbDBaU0IxYzJsdVp5QjBhR1VnZG1WeVlpQWlhVzVrYVdOaGRHVWlJR2x1YzNSbFlXUWdiMllnZW05dFltbGxJRzV2ZFc0Z0ltbHVaR2xqWVhScGIyNGlMaWNzQ2lBZ0lDQW5hWE1nYVc1a2FXTmhkR2x2YmlCdlppYzZJQ2RTWlhkeWFYUmxJSFZ6YVc1bklIUm9aU0IyWlhKaUlDSnBibVJwWTJGMFpTSWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaWFXNWthV05oZEdsdmJpSXVKeXdLSUNBZ0lDZGhjbVVnYVc1a2FXTmhkR2x2YmlCdlppYzZJQ2RTWlhkeWFYUmxJSFZ6YVc1bklIUm9aU0IyWlhKaUlDSnBibVJwWTJGMFpTSWdhVzV6ZEdWaFpDQnZaaUI2YjIxaWFXVWdibTkxYmlBaWFXNWthV05oZEdsdmJpSXVKeXdLSUNBZ0lDZG9ZWFpsSUdFZ2RHVnVaR1Z1WTNrbk9pQW5VbVYzY21sMFpTQjFjMmx1WnlCMGFHVWdkbVZ5WWlBaWRHVnVaQ0lnYVc1emRHVmhaQ0J2WmlCNmIyMWlhV1VnYm05MWJpQWlkR1Z1WkdWdVkza2lMaWNzQ2lBZ0lDQW5hR0Z6SUdFZ2RHVnVaR1Z1WTNrbk9pQW5VbVYzY21sMFpTQjFjMmx1WnlCMGFHVWdkbVZ5WWlBaWRHVnVaSE1pSUdsdWMzUmxZV1FnYjJZZ2VtOXRZbWxsSUc1dmRXNGdJblJsYm1SbGJtTjVJaTRuTEFvZ0lDQWdKMmhoZG1VZ2RHVnVaR1Z1WTNrbk9pQW5VbVYzY21sMFpTQjFjMmx1WnlCMGFHVWdkbVZ5WWlBaWRHVnVaQ0lnYVc1emRHVmhaQ0J2WmlCNmIyMWlhV1VnYm05MWJpQWlkR1Z1WkdWdVkza2lMaWNzQ2lBZ0lDQW5hR0Z6SUhSbGJtUmxibU41SnpvZ0oxSmxkM0pwZEdVZ2RYTnBibWNnZEdobElIWmxjbUlnSW5SbGJtUnpJaUJwYm5OMFpXRmtJRzltSUhwdmJXSnBaU0J1YjNWdUlDSjBaVzVrWlc1amVTSXVKeXdLSUNBZ0lDZDBZV3RsSUdsdWRHOGdZMjl1YzJsa1pYSmhkR2x2YmljNklDZFNaWGR5YVhSbElIVnphVzVuSUhSb1pTQjJaWEppSUNKamIyNXphV1JsY2lJZ2FXNXpkR1ZoWkNCdlppQjZiMjFpYVdVZ2JtOTFiaUFpWTI5dWMybGtaWEpoZEdsdmJpSXVKeXdLSUNBZ0lDZHBibVJwWTJGMGFXOXVjeUJ2WmljNklDZFNaWGR5YVhSbElIVnphVzVuSUhSb1pTQjJaWEppSUNKcGJtUnBZMkYwWlNJZ2FXNXpkR1ZoWkNCdlppQjZiMjFpYVdVZ2JtOTFiaUFpYVc1a2FXTmhkR2x2Ym5NaUxpY3NDaUFnSUNBbmFXNWthV05oZEdsdmJpQnZaaWM2SUNkU1pYZHlhWFJsSUhWemFXNW5JSFJvWlNCMlpYSmlJQ0pwYm1ScFkyRjBaU0lnYVc1emRHVmhaQ0J2WmlCNmIyMWlhV1VnYm05MWJpQWlhVzVrYVdOaGRHbHZiaUl1Snl3S0lDQWdJQ2R6ZFdkblpYTjBhWFpsSUc5bUp6b2dKMUpsZDNKcGRHVWdkWE5wYm1jZ2RHaGxJSFpsY21JZ0luTjFaMmRsYzNRaUlHbHVjM1JsWVdRZ2IyWWdZMjl1YzNSeWRXTjBhVzl1SUhkcGRHZ2dJbk4xWjJkbGMzUnBkbVVnYjJZaUxpY3NDaUFnSUNBbmFXNWthV05oZEdsMlpTQnZaaWM2SUNkU1pYZHlhWFJsSUhWemFXNW5JSFJvWlNCMlpYSmlJQ0pwYm1ScFkyRjBaU0lnYVc1emRHVmhaQ0J2WmlCamIyNXpkSEoxWTNScGIyNGdkMmwwYUNBaWFXNWthV05oZEdsMlpTQnZaaUl1Snl3S0NpQWdJQ0FqSUVsdVkyOXVZMmx6WlNCbGVIQnlaWE56YVc5dWN3b0tJQ0FnSUNjZ2FYTWdhMjV2ZDI0Z2RHOGdKem9nSjFSeWVTQnlaWGR5YVhScGJtY2dkMmwwYUc5MWRDQjJZV2QxWlNBaWFYTWdhMjV2ZDI0Z2RHOGlMQ0JsTG1jdUlISmxkM0pwZEdVZ0lrRWdhWE1nYTI1dmQyNGdkRzhnWTJGMWMyVWdRaUlnWVhNZ0lrRWdZMkYxYzJWeklFSWlMaWNzQ2lBZ0lDQW5JR0Z5WlNCcmJtOTNiaUIwYnlBbk9pQW5WSEo1SUhKbGQzSnBkR2x1WnlCM2FYUm9iM1YwSUhaaFozVmxJQ0poY21VZ2EyNXZkMjRnZEc4aUxDQmxMbWN1SUhKbGQzSnBkR1VnSWtFZ1lYSmxJR3R1YjNkdUlIUnZJR05oZFhObElFSWlJR0Z6SUNKQklHTmhkWE5sY3lCQ0lpNG5MQW9nSUNBZ0oyRWdkbUZ5YVdWMGVTQnZaaWM2SUNkU1pYQnNZV05sSUNKaElIWmhjbWxsZEhrZ2IyWWlJSGRwZEdnZ2MyaHZjblJsY2lBaWRtRnlhVzkxY3lJdUp5d0tJQ0FnSUNkaWVTQnRaV0Z1Y3lCdlppYzZJQ2RWYzNWaGJHeDVMQ0FpWW5rZ2JXVmhibk1nYjJZaUlHTmhiaUJpWlNCeVpYQnNZV05sWkNCM2FYUm9JSE5vYjNKMFpYSWdJbUo1SWlCdmNpQWlkWE5wYm1jaUxpY3NDaUFnSUNBblFua2diV1ZoYm5NZ2IyWW5PaUFuVlhOMVlXeHNlU3dnSWtKNUlHMWxZVzV6SUc5bUlpQmpZVzRnWW1VZ2NtVndiR0ZqWldRZ2QybDBhQ0J6YUc5eWRHVnlJQ0pDZVNJZ2IzSWdJbFZ6YVc1bklpNG5MQW9nSUNBZ0owbDBJR2x6SUdsdGNHOXlkR0Z1ZENCMGJ5QnViM1JsSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QnNiMjVuSUNKSmRDQnBjeUJwYlhCdmNuUmhiblFnZEc4Z2JtOTBaU0lnZDJsMGFDQnFkWE4wSUNKT2IzUmxJaTRuTEFvZ0lDQWdKMGx1SUhSb2FYTWdkMjl5YXljNklDZFpiM1VnYldGNUlISmxjR3hoWTJVZ0lrbHVJSFJvYVhNZ2QyOXlheUlnZDJsMGFDQnphRzl5ZEdWeUlDSklaWEpsSWlCdmNpQnFkWE4wSUhOMFlYSjBJSGRwZEdnZ0lsZGxJSE5vYjNjZ2RHaGhkQ0l1Snl3S0lDQWdJQ2RKYmlCMGFHbHpJR0Z5ZEdsamJHVW5PaUFuV1c5MUlHMWhlU0J5WlhCc1lXTmxJQ0pKYmlCMGFHbHpJR0Z5ZEdsamJHVWlJSGRwZEdnZ2FuVnpkQ0FpU0dWeVpTd2dMaTR1SWlCdmNpQnFkWE4wSUhOMFlYSjBJSGRwZEdnZ0lsZGxJSE5vYjNjZ2RHaGhkQ0l1Snl3S0lDQWdJQ2RKYmlCMGFHbHpJSEJoY0dWeUp6b2dKMWx2ZFNCdFlYa2djbVZ3YkdGalpTQWlTVzRnZEdocGN5QmhjblJwWTJ4bElpQjNhWFJvSUdwMWMzUWdJa2hsY21Vc0lDNHVMaUlnYjNJZ2FuVnpkQ0J6ZEdGeWRDQjNhWFJvSUNKWFpTQnphRzkzSUhSb1lYUWlMaWNzQ2lBZ0lDQW5TVzRnY21WalpXNTBJSGxsWVhKekp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpU1c0Z2NtVmpaVzUwSUhsbFlYSnpJaUIzYVhSb0lITm9iM0owWlhJZ0lsSmxZMlZ1ZEd4NUlpQnZjaUJ0YjNKbElITndaV05wWm1saklDSlRhVzVqWlNBeE9UazVJaTRuTEFvZ0lDQWdKMjFoYTJVZ2FYUWdjRzl6YzJsaWJHVW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKdFlXdGxJR2wwSUhCdmMzTnBZbXhsSWlCM2FYUm9JSE5vYjNKMFpYSWdJbVZ1WVdKc1pTSXVKeXdLSUNBZ0lDZHRZV3RsY3lCcGRDQndiM056YVdKc1pTYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW0xaGEyVnpJR2wwSUhCdmMzTnBZbXhsSWlCM2FYUm9JSE5vYjNKMFpYSWdJbVZ1WVdKc1pYTWlMaWNzQ2lBZ0lDQW5hVzRnWVNCeVpXeHBZV0pzWlNCdFlXNXVaWEluT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSnBiaUJoSUhKbGJHbGhZbXhsSUcxaGJtNWxjaUlnZDJsMGFDQnphRzl5ZEdWeUlDSnlaV3hwWVdKc2VTSXVKeXdLSUNBZ0lDZERiMjV6WlhGMVpXNTBiSGtuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkRiMjV6WlhGMVpXNTBiSGtpSUhkcGRHZ2djMmh2Y25SbGNpQWlWR2gxY3lJZ2IzSWdJa2hsYm1ObElpNG5MQW9nSUNBZ0owbHVJSFJvWlNCdFpXRnVkR2x0WlNjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJa2x1SUhSb1pTQnRaV0Z1ZEdsdFpTSWdkMmwwYUNCemFHOXlkR1Z5SUNKTlpXRnVkMmhwYkdVaUxpY3NDaUFnSUNBaklDZFVhR1Z5WldadmNtVW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKVWFHVnlaV1p2Y21VaUlIZHBkR2dnYzJodmNuUmxjaUFpVkdoMWN5SWdiM0lnSWtobGJtTmxJaTRuTEFvZ0lDQWdKM1JvWlhKbFptOXlaU2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0luUm9aWEpsWm05eVpTSWdkMmwwYUNCemFHOXlkR1Z5SUNKMGFIVnpJaUJ2Y2lBaWFHVnVZMlVpTGljc0NpQWdJQ0FuVG1WMlpYSjBhR1ZzWlhOekp6b2dKMWx2ZFNCdFlYa2dZMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pPWlhabGNuUm9aV3hsYzNNaUlIZHBkR2dnYzJodmNuUmxjaUFpV1dWMElpQnZjaUFpUW5WMElpNG5MQW9nSUNBZ0l5QW5TRzkzWlhabGNpYzZJQ2RaYjNVZ2JXRjVJR052Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpU0c5M1pYWmxjaUlnZDJsMGFDQnphRzl5ZEdWeUlDSlpaWFFpSUc5eUlDSkNkWFFpTGljc0NpQWdJQ0FuU1c0Z1lXUmthWFJwYjI0c0p6b2dKMWx2ZFNCdFlYa2dZMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pKYmlCaFpHUnBkR2x2YmlJZ2QybDBhQ0J6YUc5eWRHVnlJQ0pCYkhOdklpQnZjaUFpUW5WMElpNG5MQW9nSUNBZ0owWnZjaUIwYUdseklISmxZWE52YmljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJa1p2Y2lCMGFHbHpJSEpsWVhOdmJpSWdkMmwwYUNCemFHOXlkR1Z5SUNKVWFIVnpJaUJ2Y2lBaVNHVnVZMlVpTGljc0NpQWdJQ0FuUm05eUlIUm9aWE5sSUhKbFlYTnZibk1uT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkdiM0lnZEdobGMyVWdjbVZoYzI5dWN5SWdkMmwwYUNCemFHOXlkR1Z5SUNKVWFIVnpJaUJ2Y2lBaVNHVnVZMlVpTGljc0NpQWdJQ0FuYzJsdGFXeGhjbXg1SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWljMmx0YVd4aGNteDVJaUIzYVhSb0lDSmhiR2xyWlNJc0lHVXVaeTRnSWtFZ1lXNWtJRUlnYkc5dmF5QmhiR2xyWlNJdUp5d0tJQ0FnSUNkVGFXMXBiR0Z5Ykhrc0p6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpVTJsdGFXeGhjbXg1SWlCM2FYUm9JQ0pNYVd0bGQybHpaU0l1Snl3S0lDQWdJQ2RKYmlCamIyNTBjbUZ6ZENCMGJ5YzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSWtsdUlHTnZiblJ5WVhOMElIUnZJaUIzYVhSb0lITm9iM0owWlhJZ0lsVnViR2xyWlNJdUp5d0tJQ0FnSUNkSmJpQmpiMjUwY21GemRDQjNhWFJvSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlTVzRnWTI5dWRISmhjM1FnZDJsMGFDSWdkMmwwYUNCemFHOXlkR1Z5SUNKVmJteHBhMlVpTGljc0NpQWdJQ0FuVTJsdGFXeGhjbXg1SUhSdklIUm9hWE1zSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlVMmx0YVd4aGNteDVJSFJ2SUhSb2FYTWlJSGRwZEdnZ2MyaHZjblJsY2lBaVRHbHJaWGRwYzJVaUxpY3NDaUFnSUNBblUybHRhV3hoY214NUlIUnZJSFJvWlNBbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pUYVcxcGJHRnliSGtnZEc4Z2RHaGxJaUIzYVhSb0lITm9iM0owWlhJZ0lreHBhMlVpTGljc0NpQWdJQ0FuVDNkdWFXNW5JSFJ2SUhSb1pTQm1ZV04wSUhSb1lYUW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKUGQyNXBibWNnZEc4Z2RHaGxJR1poWTNRZ2RHaGhkQ0lnZDJsMGFDQnphVzF3YkdVZ0lsTnBibU5sSWlCdmNpQWlRbVZqWVhWelpTSXVKeXdLSUNBZ0lDZHZkMjVwYm1jZ2RHOGdkR2hsSUdaaFkzUWdkR2hoZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbTkzYm1sdVp5QjBieUIwYUdVZ1ptRmpkQ0IwYUdGMElpQjNhWFJvSUhOcGJYQnNaU0FpYzJsdVkyVWlJRzl5SUNKaVpXTmhkWE5sSWk0bkxBb2dJQ0FnSjBsdUlITndhWFJsSUc5bUlIUm9aU0JtWVdOMElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkpiaUJ6Y0dsMFpTQnZaaUIwYUdVZ1ptRmpkQ0IwYUdGMElpQjNhWFJvSUhOcGJYQnNaU0FpUVd4MGFHOTFaMmdpTGljc0NpQWdJQ0FuYVc0Z2MzQnBkR1VnYjJZZ2RHaGxJR1poWTNRZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltbHVJSE53YVhSbElHOW1JSFJvWlNCbVlXTjBJSFJvWVhRaUlIZHBkR2dnYzJsdGNHeGxJQ0owYUc5MVoyZ2lMaWNzQ2lBZ0lDQW5hVzRnYzNCcGRHVWdiMllnSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhVzRnYzNCcGRHVWdiMllpSUhkcGRHZ2djMmh2Y25SbGNpQWlaR1Z6Y0dsMFpTSXVKeXdLSUNBZ0lDZEVaWE53YVhSbElIUm9aU0JtWVdOMElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkVaWE53YVhSbElIUm9aU0JtWVdOMElIUm9ZWFFpSUhkcGRHZ2djMmx0Y0d4bElDSkJiSFJvYjNWbmFDSXVKeXdLSUNBZ0lDZGtaWE53YVhSbElIUm9aU0JtWVdOMElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSmtaWE53YVhSbElIUm9aU0JtWVdOMElIUm9ZWFFpSUhkcGRHZ2djMmx0Y0d4bElDSjBhRzkxWjJnaUxpY3NDaUFnSUNBblEyOXVjMmxrWlhKcGJtY2dkR2hsSUdaaFkzUWdkR2hoZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJa052Ym5OcFpHVnlhVzVuSUhSb1pTQm1ZV04wSUhSb1lYUWlJSGRwZEdnZ2MybHRjR3hsSUNKVGFXNWpaU0lnYjNJZ0lrSmxZMkYxYzJVaUxpY3NDaUFnSUNBblkyOXVjMmxrWlhKcGJtY2dkR2hsSUdaaFkzUWdkR2hoZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbU52Ym5OcFpHVnlhVzVuSUhSb1pTQm1ZV04wSUhSb1lYUWlJSGRwZEdnZ2MybHRjR3hsSUNKemFXNWpaU0lnYjNJZ0ltSmxZMkYxYzJVaUxpY3NDaUFnSUNBblVtVm5ZWEprYkdWemN5QnZaaUIwYUdVZ1ptRmpkQ0IwYUdGMEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpVW1WbllYSmtiR1Z6Y3lCdlppQjBhR1VnWm1GamRDQjBhR0YwSWlCM2FYUm9JSE5wYlhCc1pTQWlRV3gwYUc5MVoyZ2lMaWNzQ2lBZ0lDQW5jbVZuWVhKa2JHVnpjeUJ2WmlCMGFHVWdabUZqZENCMGFHRjBKem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWNtVm5ZWEprYkdWemN5QnZaaUIwYUdVZ1ptRmpkQ0IwYUdGMElpQjNhWFJvSUhOcGJYQnNaU0FpWVd4MGFHOTFaMmdpTGljc0NpQWdJQ0FuVjJsMGFDQnlaV2RoY21RZ2RHOG5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKWGFYUm9JSEpsWjJGeVpDQjBieUlnZDJsMGFDQnphRzl5ZEdWeUlDSkJZbTkxZENJZ2IzSWdJbEpsWjJGeVpHbHVaeUl1Snl3S0lDQWdJQ2QzYVhSb0lISmxaMkZ5WkNCMGJ5YzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW5kcGRHZ2djbVZuWVhKa0lIUnZJaUIzYVhSb0lITm9iM0owWlhJZ0ltRmliM1YwSWlCdmNpQWljbVZuWVhKa2FXNW5JaTRuTEFvZ0lDQWdKMmx1SUhSb1pTQnVaV2xuYUdKdmNtaHZiMlFnYjJZbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pwYmlCMGFHVWdibVZwWjJoaWIzSm9iMjlrSUc5bUlpQjNhWFJvSUhOb2IzSjBaWElnSW1GaWIzVjBJaTRuTEFvZ0lDQWdKMGRwZG1WdUlIUm9aU0JtWVdOMElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkhhWFpsYmlCMGFHVWdabUZqZENCMGFHRjBJaUIzYVhSb0lITnBiWEJzWlNBaVUybHVZMlVpSUc5eUlDSkNaV05oZFhObElpNG5MQW9nSUNBZ0oyZHBkbVZ1SUhSb1pTQm1ZV04wSUhSb1lYUW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKbmFYWmxiaUIwYUdVZ1ptRmpkQ0IwYUdGMElpQjNhWFJvSUhOcGJYQnNaU0FpYzJsdVkyVWlJRzl5SUNKaVpXTmhkWE5sSWk0bkxBb2dJQ0FnSjBSMVpTQjBieUIwYUdVZ1ptRmpkQ0IwYUdGMEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUkhWbElIUnZJSFJvWlNCbVlXTjBJSFJvWVhRaUlIZHBkR2dnYzJsdGNHeGxJQ0pDWldOaGRYTmxJaTRuTEFvZ0lDQWdKMlIxWlNCMGJ5QjBhR1VnWm1GamRDQjBhR0YwSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlaSFZsSUhSdklIUm9aU0JtWVdOMElIUm9ZWFFpSUhkcGRHZ2djMmx0Y0d4bElDSmlaV05oZFhObElpNG5MQW9nSUNBZ0owbDBJR2x6SUdsdWRHVnlaWE4wYVc1bklIUnZJRzV2ZEdVZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpXMXZkbWx1WnlBaVNYUWdhWE1nYVc1MFpYSmxjM1JwYm1jZ2RHOGdibTkwWlNCMGFHRjBJaTRnUVdOamIzSmthVzVuSUhSdklFTnlZV1owSUc5bUlGTmphV1Z1ZEdsbWFXTWdWM0pwZEdsdVp6b2dJa2xtSUhSb1pTQmtaWFJoYVd3Z2FYTWdibTkwSUdsdWRHVnlaWE4wYVc1bkxDQjBhR1Z1SUhSb1pTQjNjbWwwWlhJZ2MyaHZkV3hrSUc1dmRDQnBibU5zZFdSbElHbDBJaTRuTEFvZ0lDQWdKeUIwYUdVZ1ptRmpkQ0IwYUdGMEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpZEdobElHWmhZM1FnZEdoaGRDSWdkMmwwYUNCcWRYTjBJQ0owYUdGMElpNG5MQW9nSUNBZ0oyRnpJSFJ2SUhkb1pYUm9aWEluT2lBblEyOXVjMmxrWlhJZ2MyaHZjblJsYm1sdVp5QWlZWE1nZEc4Z2QyaGxkR2hsY2lJZ1lYTWdhblZ6ZENBaWQyaGxkR2hsY2lJdUp5d0tJQ0FnSUNkSmJpQnZjbVJsY2lCMGJ5YzZJQ2REYjI1emFXUmxjaUJ6YUc5eWRHVnVhVzVuSUNKSmJpQnZjbVJsY2lCMGJ5SWdZWE1nYW5WemRDQWlWRzhpTGljc0NpQWdJQ0FuYVc0Z2IzSmtaWElnZEc4bk9pQW5RMjl1YzJsa1pYSWdjMmh2Y25SbGJtbHVaeUFpYVc0Z2IzSmtaWElnZEc4aUlHRnpJR3AxYzNRZ0luUnZJaTRuTEFvZ0lDQWdKM1YwYVd4cGVtVW5PaUFuVW1Wd2JHRmpaU0FpZFhScGJHbDZaU0lnZDJsMGFDQnphVzF3YkdVZ0luVnpaU0l1Snl3S0lDQWdJQ2QxZEdsc2FYTmxKem9nSjFKbGNHeGhZMlVnSW5WMGFXeHBjMlVpSUhkcGRHZ2djMmx0Y0d4bElDSjFjMlVpTGljc0NpQWdJQ0FuZFhScGJHbDZZWFJwYjI0bk9pQW5VbVZ3YkdGalpTQWlkWFJwYkdsNllYUnBiMjRpSUhkcGRHZ2djMmx0Y0d4bElDSjFjMlVpTGljc0NpQWdJQ0FuZFhScGJHbHpZWFJwYjI0bk9pQW5VbVZ3YkdGalpTQWlkWFJwYkdsellYUnBiMjRpSUhkcGRHZ2djMmx0Y0d4bElDSjFjMlVpTGljc0NpQWdJQ0FuWld4bGRtRjBaV1FnZEdWdGNHVnlZWFIxY21Vbk9pQW5VbVZ3YkdGalpTQWlaV3hsZG1GMFpXUWlJSGRwZEdnZ2MybHRjR3hsY2lBaWFHbG5hR1Z5SWk0bkxBb2dJQ0FnSjJOdmJtTmxjSFJwYjI0bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pqYjI1alpYQjBhVzl1SWlCM2FYUm9JQ0pqYjI1alpYQjBJaTRuTEFvZ0lDQWdKM1JvWlNCM1lYbHpJR2x1SUhkb2FXTm9Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWRHaGxJSGRoZVhNZ2FXNGdkMmhwWTJnaUlIZHBkR2dnWVNCemFXMXdiR1VnSW1odmR5SXVKeXdLSUNBZ0lDZHZiaUIwYUdVZ2IzUm9aWElnYUdGdVpDYzZJQ2RKYmlCemIyMWxJR05oYzJWekxDQjViM1VnYldGNUlISmxjR3hoWTJVZ0ltOXVJSFJvWlNCdmRHaGxjaUJvWVc1a0lpQjNhWFJvSUhOb2IzSjBaWElnSW1odmQyVjJaWElpSUc5eUlDSmlkWFFpTGljc0NpQWdJQ0FuVDI0Z2RHaGxJRzkwYUdWeUlHaGhibVFuT2lBblNXNGdjMjl0WlNCallYTmxjeXdnZVc5MUlHMWhlU0J5WlhCc1lXTmxJQ0pQYmlCMGFHVWdiM1JvWlhJZ2FHRnVaQ0lnZDJsMGFDQnphRzl5ZEdWeUlDSkliM2RsZG1WeUlpQnZjaUFpUW5WMElpNG5MQW9nSUNBZ0oyWnZjaUIwYUdVZ2NIVnljRzl6WlNCdlppYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1admNpQjBhR1VnY0hWeWNHOXpaU0J2WmlJZ2QybDBhQ0J6YUc5eWRHVnlJQ0ptYjNJaUxpY3NDaUFnSUNBblJtOXlJSFJvWlNCd2RYSndiM05sSUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUm05eUlIUm9aU0J3ZFhKd2IzTmxJRzltSWlCM2FYUm9JSE5vYjNKMFpYSWdJa1p2Y2lJdUp5d0tJQ0FnSUNkR2IzSWdkR2hsSUhKbFlYTnZiaUIwYUdGMEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUm05eUlIUm9aU0J5WldGemIyNGdkR2hoZENJZ2QybDBhQ0J6YUc5eWRHVnlJQ0pDWldOaGRYTmxJaUJ2Y2lBaVFYTWlMaWNzQ2lBZ0lDQW5abTl5SUhSb1pTQnlaV0Z6YjI0Z2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltWnZjaUIwYUdVZ2NtVmhjMjl1SUhSb1lYUWlJSGRwZEdnZ2MyaHZjblJsY2lBaVltVmpZWFZ6WlNJZ2IzSWdJbUZ6SWk0bkxBb2dJQ0FnSjI1dmRDQnZibXg1SnpvZ0owbG1JSGx2ZFNCaGNtVWdkWE5wYm1jZ2RHaGxJR052Ym5OMGNuVmpkR2x2YmlBaVFTQnBjeUJ1YjNRZ2IyNXNlU0JDSUdKMWRDQmhiSE52SUVNaUxDQjBhR1Z5WlNCdGFXZG9kQ0JpWlNCaElHSmxkSFJsY2lCM1lYa2dkRzhnY0doeVlYTmxJR2wwTENCbExtY3VJQ0pCSUdseklFSXVJRTF2Y21WdmRtVnlMQ0JCSUdseklHRnNjMjhnUXlJdUp5d0tJQ0FnSUNkcGJpQnNhV2RvZENCdlppQjBhR1VnWm1GamRDQjBhR0YwSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhVzRnYkdsbmFIUWdiMllnZEdobElHWmhZM1FnZEdoaGRDSWdkMmwwYUNCemFXMXdiR1VnSW1KbFkyRjFjMlVpTGljc0NpQWdJQ0FuU1c0Z2JHbG5hSFFnYjJZZ2RHaGxJR1poWTNRZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0lrbHVJR3hwWjJoMElHOW1JSFJvWlNCbVlXTjBJSFJvWVhRaUlIZHBkR2dnYzJsdGNHeGxJQ0pDWldOaGRYTmxJaTRuTEFvZ0lDQWdKMmx1SUhSb1pTQmxkbVZ1ZENCMGFHRjBKem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWFXNGdkR2hsSUdWMlpXNTBJSFJvWVhRaUlIZHBkR2dnYzJsdGNHeGxJQ0pwWmlJZ2IzSWdJbmRvWlc0aUxpY3NDaUFnSUNBblNXNGdkR2hsSUdWMlpXNTBJSFJvWVhRbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pKYmlCMGFHVWdaWFpsYm5RZ2RHaGhkQ0lnZDJsMGFDQnphVzF3YkdVZ0lrbG1JaUJ2Y2lBaWQyaGxiaUl1Snl3S0lDQWdJQ2QxYm1SbGNpQmphWEpqZFcxemRHRnVZMlZ6SUdsdUlIZG9hV05vSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlkVzVrWlhJZ1kybHlZM1Z0YzNSaGJtTmxjeUJwYmlCM2FHbGphQ0lnZDJsMGFDQnphVzF3YkdVZ0ltbG1JaUJ2Y2lBaWQyaGxiaUl1Snl3S0lDQWdJQ2RWYm1SbGNpQmphWEpqZFcxemRHRnVZMlZ6SUdsdUlIZG9hV05vSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlWVzVrWlhJZ1kybHlZM1Z0YzNSaGJtTmxjeUJwYmlCM2FHbGphQ0lnZDJsMGFDQmhJSE5wYlhCc1pTQWlTV1lpSUc5eUlDSlhhR1Z1SWk0bkxBb2dJQ0FnSjI5dUlIUm9aU0J2WTJOaGMybHZiaUJ2WmljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbTl1SUhSb1pTQnZZMk5oYzJsdmJpQnZaaUlnZDJsMGFDQnphVzF3YkdVZ0luZG9aVzRpTGljc0NpQWdJQ0FuVDI0Z2RHaGxJRzlqWTJGemFXOXVJRzltSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlUMjRnZEdobElHOWpZMkZ6YVc5dUlHOW1JaUIzYVhSb0lHRWdjMmx0Y0d4bElDSlhhR1Z1SWk0bkxBb2dJQ0FnSjJsMElHbHpJR055ZFdOcFlXd2dkR2hoZENjNklDZERiMjV6YVdSbGNpQnlaWGR5YVhScGJtY2dkR2hsSUhCb2NtRnpaU0IzYVhSb0lDSnBkQ0JwY3lCamNuVmphV0ZzSUhSb1lYUWlJSFZ6YVc1bklITnBiWEJzWlNBaWJYVnpkQ0lnYjNJZ0luTm9iM1ZzWkNJdUp5d0tJQ0FnSUNkcGRDQnBjeUJ1WldObGMzTmhjbmtnZEdoaGRDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElIQm9jbUZ6WlNCM2FYUm9JQ0pwZENCcGN5QnVaV05sYzNOaGNua2dkR2hoZENJZ2RYTnBibWNnYzJsdGNHeGxJQ0p0ZFhOMElpQnZjaUFpYzJodmRXeGtJaTRuTEFvZ0lDQWdKMmwwSUdseklHbHRjRzl5ZEdGdWRDQjBhR0YwSnpvZ0owTnZibk5wWkdWeUlISmxkM0pwZEdsdVp5QjBhR1VnY0doeVlYTmxJSGRwZEdnZ0ltbDBJR2x6SUdsdGNHOXlkR0Z1ZENCMGFHRjBJaUIxYzJsdVp5QnphVzF3YkdVZ0ltMTFjM1FpSUc5eUlDSnphRzkxYkdRaUxpY3NDaUFnSUNBbmFYUWdhWE1nYm1WalpYTnpZWEo1SUhSdklDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElIQm9jbUZ6WlNCM2FYUm9JQ0pwZENCcGN5QnVaV05sYzNOaGNua2dkRzhpSUhWemFXNW5JSE5wYlhCc1pTQWliWFZ6ZENJZ2IzSWdJbk5vYjNWc1pDSXVKeXdLSUNBZ0lDZHBkQ0JwY3lCcGJYQnZjblJoYm5RZ2RHOGdKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjR2h5WVhObElIZHBkR2dnSW1sMElHbHpJR2x0Y0c5eWRHRnVkQ0IwYnlJZ2RYTnBibWNnYzJsdGNHeGxJQ0p0ZFhOMElpQnZjaUFpYzJodmRXeGtJaTRuTEFvZ0lDQWdKeUJwY3lCaFlteGxJSFJ2SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhWE1nWVdKc1pTQjBieUlnZDJsMGFDQnphVzF3YkdVZ0ltTmhiaUl1Snl3S0lDQWdJQ2NnWVhKbElHRmliR1VnZEc4bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0poY21VZ1lXSnNaU0IwYnlJZ2QybDBhQ0J6YVcxd2JHVWdJbU5oYmlJdUp5d0tJQ0FnSUNjZ2QyRnpJR0ZpYkdVZ2RHOG5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKM1lYTWdZV0pzWlNCMGJ5SWdkMmwwYUNCemFXMXdiR1VnSW1OdmRXeGtJaTRuTEFvZ0lDQWdKeUIzWlhKbElHRmliR1VnZEc4bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0ozWlhKbElHRmliR1VnZEc4aUlIZHBkR2dnYzJsdGNHeGxJQ0pqYjNWc1pDSXVKeXdLSUNBZ0lDZG9ZWE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhR0Z6SUhSb1pTQnZjSEJ2Y25SMWJtbDBlU0IwYnlJZ2QybDBhQ0J6YVcxd2JHVWdJbU5oYmlJdUp5d0tJQ0FnSUNkb1lYWmxJSFJvWlNCdmNIQnZjblIxYm1sMGVTQjBieWM2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltaGhkbVVnZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SWlCM2FYUm9JSE5wYlhCc1pTQWlZMkZ1SWk0bkxBb2dJQ0FnSjJseklHbHVJR0VnY0c5emFYUnBiMjRnZEc4bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pwY3lCcGJpQmhJSEJ2YzJsMGFXOXVJSFJ2SWlCM2FYUm9JSE5wYlhCc1pTQWlZMkZ1SWk0bkxBb2dJQ0FnSjJGeVpTQnBiaUJoSUhCdmMybDBhVzl1SUhSdkp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpWVhKbElHbHVJR0VnY0c5emFYUnBiMjRnZEc4aUlIZHBkR2dnYzJsdGNHeGxJQ0pqWVc0aUxpY3NDaUFnSUNBbmFHRnpJSFJvWlNCallYQmhZMmwwZVNCbWIzSW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKb1lYTWdkR2hsSUdOaGNHRmphWFI1SUdadmNpSWdkMmwwYUNCemFXMXdiR1VnSW1OaGJpSXVKeXdLSUNBZ0lDZG9ZWFpsSUhSb1pTQmpZWEJoWTJsMGVTQm1iM0luT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSm9ZWFpsSUhSb1pTQmpZWEJoWTJsMGVTQm1iM0lpSUhkcGRHZ2djMmx0Y0d4bElDSmpZVzRpTGljc0NpQWdJQ0FuYUdGeklIUm9aU0JoWW1sc2FYUjVJSFJ2SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhR0Z6SUhSb1pTQmhZbWxzYVhSNUlIUnZJaUIzYVhSb0lITnBiWEJzWlNBaVkyRnVJaTRuTEFvZ0lDQWdKMmhoZG1VZ2RHaGxJR0ZpYVd4cGRIa2dkRzhuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSm9ZWFpsSUhSb1pTQmhZbWxzYVhSNUlIUnZJaUIzYVhSb0lITnBiWEJzWlNBaVkyRnVJaTRuTEFvZ0lDQWdKMmhoY3lCMGFHVWdjRzkwWlc1MGFXRnNJSFJ2SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhR0Z6SUhSb1pTQndiM1JsYm5ScFlXd2dkRzhpSUhkcGRHZ2djMmx0Y0d4bElDSmpZVzRpTGljc0NpQWdJQ0FuYUdGMlpTQjBhR1VnY0c5MFpXNTBhV0ZzSUhSdkp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpYUdGMlpTQjBhR1VnY0c5MFpXNTBhV0ZzSUhSdklpQjNhWFJvSUhOcGJYQnNaU0FpWTJGdUlpNG5MQW9nSUNBZ0oybDBJR2x6SUhCdmMzTnBZbXhsSUhSb1lYUW5PaUFuUTI5dWMybGtaWElnY21WM2NtbDBhVzVuSUhSb1pTQndhSEpoYzJVZ2QybDBhQ0FpYVhRZ2FYTWdjRzl6YzJsaWJHVWdkR2hoZENJZ2RYTnBibWNnYzJsdGNHeGxJQ0p0WVhraUxDQWliV2xuYUhRaUxDQWlZMkZ1SWl3Z2IzSWdJbU52ZFd4a0lpNG5MQW9nSUNBZ0owbDBJR2x6SUhCdmMzTnBZbXhsSUhSb1lYUW5PaUFuUTI5dWMybGtaWElnY21WM2NtbDBhVzVuSUhSb1pTQndhSEpoYzJVZ2QybDBhQ0FpU1hRZ2FYTWdjRzl6YzJsaWJHVWdkR2hoZENJZ2RYTnBibWNnYzJsdGNHeGxJQ0p0WVhraUxDQWliV2xuYUhRaUxDQWlZMkZ1SWl3Z2IzSWdJbU52ZFd4a0lpNG5MQW9nSUNBZ0ozUm9aWEpsSUdseklHRWdZMmhoYm1ObElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVjNjbWwwYVc1bklIUm9aU0J3YUhKaGMyVWdkMmwwYUNBaWRHaGxjbVVnYVhNZ1lTQmphR0Z1WTJVZ2RHaGhkQ0lnZFhOcGJtY2djMmx0Y0d4bElDSnRZWGtpTENBaWJXbG5hSFFpTENBaVkyRnVJaXdnYjNJZ0ltTnZkV3hrSWk0bkxBb2dJQ0FnSjFSb1pYSmxJR2x6SUdFZ1kyaGhibU5sSUhSb1lYUW5PaUFuUTI5dWMybGtaWElnY21WM2NtbDBhVzVuSUhSb1pTQndhSEpoYzJVZ2QybDBhQ0FpVkdobGNtVWdhWE1nWVNCamFHRnVZMlVnZEdoaGRDSWdkWE5wYm1jZ2MybHRjR3hsSUNKdFlYa2lMQ0FpYldsbmFIUWlMQ0FpWTJGdUlpd2diM0lnSW1OdmRXeGtJaTRuTEFvZ0lDQWdKMmwwSUdOdmRXeGtJR2hoY0hCbGJpQjBhR0YwSnpvZ0owTnZibk5wWkdWeUlISmxkM0pwZEdsdVp5QjBhR1VnY0doeVlYTmxJSGRwZEdnZ0ltbDBJR052ZFd4a0lHaGhjSEJsYmlCMGFHRjBJaUIxYzJsdVp5QnphVzF3YkdVZ0ltMWhlU0lzSUNKdGFXZG9kQ0lzSUNKallXNGlMQ0J2Y2lBaVkyOTFiR1FpTGljc0NpQWdJQ0FuU1hRZ1kyOTFiR1FnYUdGd2NHVnVJSFJvWVhRbk9pQW5RMjl1YzJsa1pYSWdjbVYzY21sMGFXNW5JSFJvWlNCd2FISmhjMlVnZDJsMGFDQWlTWFFnWTI5MWJHUWdhR0Z3Y0dWdUlIUm9ZWFFpSUhWemFXNW5JSE5wYlhCc1pTQWliV0Y1SWl3Z0ltMXBaMmgwSWl3Z0ltTmhiaUlzSUc5eUlDSmpiM1ZzWkNJdUp5d0tJQ0FnSUNkMGFHVWdjRzl6YzJsaWFXeHBkSGtnWlhocGMzUnpKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjR2h5WVhObElIZHBkR2dnSW5Sb1pTQndiM056YVdKcGJHbDBlU0JsZUdsemRITWlJSFZ6YVc1bklITnBiWEJzWlNBaWJXRjVJaXdnSW0xcFoyaDBJaXdnSW1OaGJpSXNJRzl5SUNKamIzVnNaQ0l1Snl3S0lDQWdJQ2RVYUdVZ2NHOXpjMmxpYVd4cGRIa2daWGhwYzNSekp6b2dKME52Ym5OcFpHVnlJSEpsZDNKcGRHbHVaeUIwYUdVZ2NHaHlZWE5sSUhkcGRHZ2dJbFJvWlNCd2IzTnphV0pwYkdsMGVTQmxlR2x6ZEhNaUlIVnphVzVuSUhOcGJYQnNaU0FpYldGNUlpd2dJbTFwWjJoMElpd2dJbU5oYmlJc0lHOXlJQ0pqYjNWc1pDSXVKeXdLSUNBZ0lDZHdjbWx2Y2lCMGJ5YzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW5CeWFXOXlJSFJ2SWlCM2FYUm9JSE5wYlhCc1pTQWlZbVZtYjNKbElpNG5MQW9nSUNBZ0oxQnlhVzl5SUhSdkp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpVUhKcGIzSWdkRzhpSUhkcGRHZ2djMmx0Y0d4bElDSkNaV1p2Y21VaUxpY3NDaUFnSUNBbmFXNGdZVzUwYVdOcGNHRjBhVzl1SUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpYVc0Z1lXNTBhV05wY0dGMGFXOXVJRzltSWlCM2FYUm9JR0VnYzJsdGNHeGxJQ0ppWldadmNtVWlMaWNzQ2lBZ0lDQW5TVzRnWVc1MGFXTnBjR0YwYVc5dUlHOW1Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaVNXNGdZVzUwYVdOcGNHRjBhVzl1SUc5bUlpQjNhWFJvSUhOcGJYQnNaU0FpUW1WbWIzSmxJaTRuTEFvZ0lDQWdKM04xWW5ObGNYVmxiblFnZEc4bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0p6ZFdKelpYRjFaVzUwSUhSdklpQjNhWFJvSUhOcGJYQnNaU0FpWVdaMFpYSWlMaWNzQ2lBZ0lDQW5ZWFFnZEdobElITmhiV1VnZEdsdFpTQmhjeWM2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltRjBJSFJvWlNCellXMWxJSFJwYldVZ1lYTWlJSGRwZEdnZ1lTQnphVzF3YkdVZ0ltRnpJaTRuTEFvZ0lDQWdKMEYwSUhSb1pTQnpZVzFsSUhScGJXVWdZWE1uT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkJkQ0IwYUdVZ2MyRnRaU0IwYVcxbElHRnpJaUIzYVhSb0lHRWdjMmx0Y0d4bElDSkJjeUl1Snl3S0lDQWdJQ2R4ZFdWemRHbHZiaUJoY3lCMGJ5QjNhR1YwYUdWeUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpY1hWbGMzUnBiMjRnWVhNZ2RHOGdkMmhsZEdobGNpSWdkMmwwYUNCaElITnBiWEJzWlNBaWQyaGxkR2hsY2lJdUp5d0tJQ0FnSUNkeGRXVnpkR2x2YmlCdlppQjNhR1YwYUdWeUp6b2dKMGx1SUNKeGRXVnpkR2x2YmlCdlppQjNhR1YwYUdWeUlpQjViM1VnWTJGdUlHOXRhWFFnSW05bUlpNG5MQW9nSUNBZ0ozTnBiWFZzZEdGdVpXOTFjMng1SUhkcGRHZ25PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKemFXMTFiSFJoYm1WdmRYTnNlU0IzYVhSb0lpQjNhWFJvSUdFZ2MybHRjR3hsSUNKaGN5SXVKeXdLSUNBZ0lDZFRhVzExYkhSaGJtVnZkWE5zZVNCM2FYUm9Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaVUybHRkV3gwWVc1bGIzVnpiSGtnZDJsMGFDSWdkMmwwYUNCaElITnBiWEJzWlNBaVFYTWlMaWNzQ2lBZ0lDQW5abUZqYVd4cGRHRjBaU2M2SUNkU1pYQnNZV05sSUNKbVlXTnBiR2wwWVhSbElpQjNhWFJvSUhOcGJYQnNaU0FpYUdWc2NDSXVJRUZqWTI5eVpHbHVaeUIwYnlCVWFHVWdRM0poWm5RZ1QyWWdVMk5wWlc1MGFXWnBZeUJYY21sMGFXNW5PaUFpVjI5eVpITWdjM1ZqYUNCaGN5Qm1ZV05wYkdsMFlYUmxJR0Z5WlNCd2NtVjBaVzUwYVc5MWN5SXVKeXdLSUNBZ0lDZG5jbVZoZENCdFlXNTVKem9nSjFKbGNHeGhZMlVnSW1keVpXRjBJRzFoYm5raUlIZHBkR2dnYW5WemRDQWliV0Z1ZVNJdUp5d0tJQ0FnSUNkSGNtVmhkQ0J0WVc1NUp6b2dKMUpsY0d4aFkyVWdJa2R5WldGMElHMWhibmtpSUhkcGRHZ2dhblZ6ZENBaVRXRnVlU0l1Snl3S0lDQWdJQ2RzWVhKblpTQnVkVzFpWlhJZ2IyWW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKc1lYSm5aU0J1ZFcxaVpYSWdiMllpSUhkcGRHZ2dhblZ6ZENBaWJXRnVlU0l1Snl3S0lDQWdJQ2RuY21WaGRDQnVkVzFpWlhJZ2IyWW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKbmNtVmhkQ0J1ZFcxaVpYSWdiMllpSUhkcGRHZ2dhblZ6ZENBaWJXRnVlU0l1Snl3S0lDQWdJQ2RIY21WaGRDQnVkVzFpWlhJZ2IyWW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKSGNtVmhkQ0J1ZFcxaVpYSWdiMllpSUhkcGRHZ2dhblZ6ZENBaVRXRnVlU0l1Snl3S0lDQWdJQ2RDYVdjZ2JuVnRZbVZ5SUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUW1sbklHNTFiV0psY2lCdlppSWdkMmwwYUNCcWRYTjBJQ0pOWVc1NUlpNG5MQW9nSUNBZ0oySnBaeUJ1ZFcxaVpYSWdiMlluT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSmlhV2NnYm5WdFltVnlJRzltSWlCM2FYUm9JR3AxYzNRZ0ltMWhibmtpTGljc0NpQWdJQ0FuUVhRZ2RHaHBjeUJ3YjJsdWRDQnBiaUIwYVcxbEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUVhRZ2RHaHBjeUJ3YjJsdWRDQnBiaUIwYVcxbElpQjNhWFJvSUdwMWMzUWdJazV2ZHlJZ2IzSWdJbFJ2WkdGNUlpNG5MQW9nSUNBZ0oyRjBJSFJvYVhNZ2NHOXBiblFnYVc0Z2RHbHRaU2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltRjBJSFJvYVhNZ2NHOXBiblFnYVc0Z2RHbHRaU0lnZDJsMGFDQnFkWE4wSUNKdWIzY2lJRzl5SUNKMGIyUmhlU0l1Snl3S0lDQWdJQ2RCZENCMGFHbHpJRzF2YldWdWRDQnBiaUIwYVcxbEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpUVhRZ2RHaHBjeUJ0YjIxbGJuUWdhVzRnZEdsdFpTSWdkMmwwYUNCcWRYTjBJQ0pPYjNjaUlHOXlJQ0pVYjJSaGVTSXVKeXdLSUNBZ0lDZGhkQ0IwYUdseklHMXZiV1Z1ZENCcGJpQjBhVzFsSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlZWFFnZEdocGN5QnRiMjFsYm5RZ2FXNGdkR2x0WlNJZ2QybDBhQ0JxZFhOMElDSnViM2NpSUc5eUlDSjBiMlJoZVNJdUp5d0tJQ0FnSUNkSmJpQmhJR05oYzJVZ2FXNGdkMmhwWTJnbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pKYmlCaElHTmhjMlVnYVc0Z2QyaHBZMmdpSUhkcGRHZ2dhblZ6ZENBaVNXWWlJRzl5SUNKWGFHVnVJaTRuTEFvZ0lDQWdKMmx1SUdFZ1kyRnpaU0JwYmlCM2FHbGphQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltbHVJR0VnWTJGelpTQnBiaUIzYUdsamFDSWdkMmwwYUNCcWRYTjBJQ0pwWmlJZ2IzSWdJbmRvWlc0aUxpY3NDaUFnSUNBbllua2dkMkY1SUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpWW5rZ2QyRjVJRzltSWlCM2FYUm9JR3AxYzNRZ0ltSjVJaUJ2Y2lBaWRYTnBibWNpTGljc0NpQWdJQ0FuUVhNZ1lTQnRZWFIwWlhJZ2IyWWdabUZqZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJa0Z6SUdFZ2JXRjBkR1Z5SUc5bUlHWmhZM1FpSUhkcGRHZ2dJa2x1SUdaaFkzUWlJRzl5SUdwMWMzUWdiMjFwZEhScGJtY2dhWFF1Snl3S0lDQWdJQ2RoY3lCaElHMWhkSFJsY2lCdlppQm1ZV04wSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlZWE1nWVNCdFlYUjBaWElnYjJZZ1ptRmpkQ0lnZDJsMGFDQWlhVzRnWm1GamRDSWdiM0lnYW5WemRDQnZiV2wwZEdsdVp5QnBkQzRuTEFvZ0lDQWdKMkYwSUdGc2JDQjBhVzFsY3ljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbUYwSUdGc2JDQjBhVzFsY3lJZ2QybDBhQ0J6YUc5eWRHVnlJQ0poYkhkaGVYTWlMaWNzQ2lBZ0lDQW5TVzRnZEdobElHRmljMlZ1WTJVbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pKYmlCMGFHVWdZV0p6Wlc1alpTSWdkMmwwYUNBaVYybDBhRzkxZENJdUp5d0tJQ0FnSUNkcGJpQjBhR1VnWVdKelpXNWpaU2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltbHVJSFJvWlNCaFluTmxibU5sSWlCM2FYUm9JQ0ozYVhSb2IzVjBJaTRuTEFvZ0lDQWdKMEpsWTJGMWMyVWdiMllnZEdobElHWmhZM1FnZEdoaGRDYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSWtKbFkyRjFjMlVnYjJZZ2RHaGxJR1poWTNRZ2RHaGhkQ0lnZDJsMGFDQnFkWE4wSUNKQ1pXTmhkWE5sSWk0bkxBb2dJQ0FnSjJKbFkyRjFjMlVnYjJZZ2RHaGxJR1poWTNRZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltSmxZMkYxYzJVZ2IyWWdkR2hsSUdaaFkzUWdkR2hoZENJZ2QybDBhQ0JxZFhOMElDSmlaV05oZFhObElpNG5MQW9nSUNBZ0owOTNhVzVuSUhSdklIUm9aU0JtWVdOMElIUm9ZWFFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSlBkMmx1WnlCMGJ5QjBhR1VnWm1GamRDQjBhR0YwSWlCM2FYUm9JR3AxYzNRZ0lrSmxZMkYxYzJVaUxpY3NDaUFnSUNBbmIzZHBibWNnZEc4Z2RHaGxJR1poWTNRZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltOTNhVzVuSUhSdklIUm9aU0JtWVdOMElIUm9ZWFFpSUhkcGRHZ2dhblZ6ZENBaVltVmpZWFZ6WlNJdUp5d0tJQ0FnSUNkcGJpQjBhR1VnZG1samFXNXBkSGtnYjJZbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pwYmlCMGFHVWdkbWxqYVc1cGRIa2diMllpSUhkcGRHZ2dhblZ6ZENBaWJtVmhjaUl1Snl3S0lDQWdJQ2QzWlNCaVpXeHBaWFpsSnpvZ0owTnZibk5wWkdWeUlIZHlhWFJwYm1jZ2QyaGhkQ0I1YjNVZ1ltVnNhV1YyWlNCa2FYSmxZM1JzZVN3Z2QybDBhRzkxZENCemRHRnlkR2x1WnlCM2FYUm9JQ0ozWlNCaVpXeHBaWFpsSWk0bkxBb2dJQ0FnSjFkbElHSmxiR2xsZG1Vbk9pQW5RMjl1YzJsa1pYSWdkM0pwZEdsdVp5QjNhR0YwSUhsdmRTQmlaV3hwWlhabElHUnBjbVZqZEd4NUxDQjNhWFJvYjNWMElITjBZWEowYVc1bklIZHBkR2dnSWxkbElHSmxiR2xsZG1VaUxpY3NDaUFnSUNBblNTQmlaV3hwWlhabEp6b2dKME52Ym5OcFpHVnlJSGR5YVhScGJtY2dkMmhoZENCNWIzVWdZbVZzYVdWMlpTQmthWEpsWTNSc2VTd2dkMmwwYUc5MWRDQnpkR0Z5ZEdsdVp5QjNhWFJvSUNKSklHSmxiR2xsZG1VaUxpY3NDaUFnSUNBbmQyOTFiR1FnYkdsclpTQjBieWM2SUNkRGIyNXphV1JsY2lCeVpXMXZkbWx1WnlBaWQyOTFiR1FnYkdsclpTQjBieUlnWVc1a0lIZHlhWFJwYm1jZ2RHaGxJRzVsZUhRZ2RtVnlZaUJrYVhKbFkzUnNlU3dnWlM1bkxpQWlWMlVnS0hkdmRXeGtJR3hwYTJVZ2RHOHBJR1Z0Y0doaGMybDZaU0IwYUdGMElpY3NDaUFnSUNBblFYUWdkR2hsSUhSbGJYQmxjbUYwZFhKbElHOW1Kem9nSjBOdmJuTnBaR1Z5SUhOb2IzSjBaVzVwYm1jZ0lrRjBJSFJvWlNCMFpXMXdaWEpoZEhWeVpTQnZaaUlnZEc4Z2FuVnpkQ0IyWVd4MVpTd2daUzVuTGlBaVFYUWdOQ0JMSWk0bkxBb2dJQ0FnSjBGMElIUmxiWEJsY21GMGRYSmxJRzltSnpvZ0owTnZibk5wWkdWeUlITm9iM0owWlc1cGJtY2dJa0YwSUhSbGJYQmxjbUYwZFhKbElHOW1JaUIwYnlCcWRYTjBJSFpoYkhWbExDQmxMbWN1SUNKQmRDQTBJRXNpTGljc0NpQWdJQ0FuWVhRZ2RHaGxJSFJsYlhCbGNtRjBkWEpsSUc5bUp6b2dKME52Ym5OcFpHVnlJSE5vYjNKMFpXNXBibWNnSW1GMElIUm9aU0IwWlcxd1pYSmhkSFZ5WlNCdlppSWdkRzhnYW5WemRDQjJZV3gxWlN3Z1pTNW5MaUFpWVhRZ05DQkxJaTRuTEFvZ0lDQWdKMkYwSUhSbGJYQmxjbUYwZFhKbElHOW1Kem9nSjBOdmJuTnBaR1Z5SUhOb2IzSjBaVzVwYm1jZ0ltRjBJSFJsYlhCbGNtRjBkWEpsSUc5bUlpQjBieUJxZFhOMElIWmhiSFZsTENCbExtY3VJQ0poZENBMElFc2lMaWNzQ2lBZ0lDQW5ZV3h2Ym1jZ2RHaGxJR3hwYm1WeklHOW1Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaVlXeHZibWNnZEdobElHeHBibVZ6SUc5bUlpQjNhWFJvSUhOb2IzSjBaWElnSW14cGEyVWlMaWNzQ2lBZ0lDQW5iV0ZxYjNKcGRIa2diMlluT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSnRZV3B2Y21sMGVTQnZaaUlnZDJsMGFDQnphRzl5ZEdWeUlDSnRiM04wSWk0bkxBb2dJQ0FnSjJGa1pYRjFZWFJsSUc1MWJXSmxjaUJ2WmljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbUZrWlhGMVlYUmxJRzUxYldKbGNpQnZaaUlnZDJsMGFDQnphRzl5ZEdWeUlDSmxibTkxWjJnaUxpY3NDaUFnSUNBbloybDJaU0JoYmlCcGJtUnBZMkYwYVc5dUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpWjJsMlpTQmhiaUJwYm1ScFkyRjBhVzl1SWlCM2FYUm9JSE5vYjNKMFpYSWdJbk5vYjNjaUxpY3NDaUFnSUNBbloybDJaWE1nWVc0Z2FXNWthV05oZEdsdmJpYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1kcGRtVnpJR0Z1SUdsdVpHbGpZWFJwYjI0aUlIZHBkR2dnYzJodmNuUmxjaUFpYzJodmQzTWlMaWNzQ2lBZ0lDQW5hR0Z6SUdGdUlHVm1abVZqZENCdmJpYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1oaGN5QmhiaUJsWm1abFkzUWdiMjRpSUhkcGRHZ2djMmh2Y25SbGNpQWlZV1ptWldOMGN5SXVKeXdLSUNBZ0lDZG9ZWFpsSUdGdUlHVm1abVZqZENCdmJpYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1oaGRtVWdZVzRnWldabVpXTjBJRzl1SWlCM2FYUm9JSE5vYjNKMFpYSWdJbUZtWm1WamRDSXVKeXdLSUNBZ0lDZG9ZWE1nZEdobElHTmhjR0ZqYVhSNUlIUnZKem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWFHRnpJSFJvWlNCallYQmhZMmwwZVNCMGJ5SWdkMmwwYUNCemFHOXlkR1Z5SUNKallXNGlMaWNzQ2lBZ0lDQW5hR0YyWlNCMGFHVWdZMkZ3WVdOcGRIa2dkRzhuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSm9ZWFpsSUhSb1pTQmpZWEJoWTJsMGVTQjBieUlnZDJsMGFDQnphRzl5ZEdWeUlDSmpZVzRpTGljc0NpQWdJQ0FuYjI0Z1lTQmtZV2xzZVNCaVlYTnBjeWM2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltOXVJR0VnWkdGcGJIa2dZbUZ6YVhNaUlIZHBkR2dnYzJodmNuUmxjaUFpWkdGcGJIa2lMaWNzQ2lBZ0lDQW5hR0YyWlNCaElIQnlaV1psY21WdVkyVWdabTl5SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhR0YyWlNCaElIQnlaV1psY21WdVkyVWdabTl5SWlCM2FYUm9JSE5vYjNKMFpYSWdJbkJ5WldabGNpSXVKeXdLSUNBZ0lDZG9ZWE1nWVNCd2NtVm1aWEpsYm1ObElHWnZjaWM2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltaGhjeUJoSUhCeVpXWmxjbVZ1WTJVZ1ptOXlJaUIzYVhSb0lITm9iM0owWlhJZ0luQnlaV1psY25NaUxpY3NDaUFnSUNBbmFHRmtJR0VnY0hKbFptVnlaVzVqWlNCbWIzSW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKb1lXUWdZU0J3Y21WbVpYSmxibU5sSUdadmNpSWdkMmwwYUNCemFHOXlkR1Z5SUNKd2NtVm1aWEp5WldRaUxpY3NDaUFnSUNBbmJXVjBhRzlrYjJ4dloza25PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKdFpYUm9iMlJ2Ykc5bmVTSWdkMmwwYUNCemFHOXlkR1Z5SUNKdFpYUm9iMlFpTGljc0NpQWdJQ0FuYzNWaWMyVnhkV1Z1ZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbk4xWW5ObGNYVmxiblFpSUhkcGRHZ2djMmh2Y25SbGNpQWliR0YwWlhJaUxpY3NDaUFnSUNBbmJXOWthV1o1SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWliVzlrYVdaNUlpQjNhWFJvSUhOcGJYQnNaWElnSW1Ob1lXNW5aU0l1Snl3S0lDQWdJQ2R0YjJScFptbGxaQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltMXZaR2xtYVdWa0lpQjNhWFJvSUhOcGJYQnNaWElnSW1Ob1lXNW5aV1FpTGljc0NpQWdJQ0FuYlc5a2FXWnBaWE1uT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSnRiMlJwWm1sbGN5SWdkMmwwYUNCemFXMXdiR1Z5SUNKamFHRnVaMlZ6SWk0bkxBb2dJQ0FnSjIxdlpHbG1hV05oZEdsdmJuTW5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKdGIyUnBabWxqWVhScGIyNXpJaUIzYVhSb0lITnBiWEJzWlhJZ0ltTm9ZVzVuWlhNaUxpY3NDaUFnSUNBbmJXOWthV1pwWTJGMGFXOXVJQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltMXZaR2xtYVdOaGRHbHZiaUlnZDJsMGFDQnphVzF3YkdWeUlDSmphR0Z1WjJVaUxpY3NDaUFnSUNBblkyOXRjRzl1Wlc1MEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpWTI5dGNHOXVaVzUwSWlCM2FYUm9JSE5wYlhCc1pYSWdJbkJoY25RaUxpY3NDaUFnSUNBbmFXNWthV05oZEdsdmJpYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnZDI5eVpDQWlhVzVrYVdOaGRHbHZiaUlnZDJsMGFDQnphVzF3YkdWeUlDSnphV2R1SWk0Z0lsTm9iM0owSUhkdmNtUnpJR0Z5WlNCaVpYTjBJaUF0SUZjdUlFTm9kWEpqYUdsc2JDSW5MQW9nSUNBZ0oyRnNkR2h2ZFdkb0lHbDBJR2x6SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlZV3gwYUc5MVoyZ2dhWFFnYVhNaUlIZHBkR2dnYzJodmNuUmxjaUFpWVd4aVpXbDBJaTRuTEFvZ0lDQWdKMkZzZEdodmRXZG9JR2wwSUhkaGN5YzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1Gc2RHaHZkV2RvSUdsMElIZGhjeUlnZDJsMGFDQnphRzl5ZEdWeUlDSmhiR0psYVhRaUxpY3NDaUFnSUNBbllXeDBhRzkxWjJnZ2FYUWdZbVZqYjIxbGN5YzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1Gc2RHaHZkV2RvSUdsMElHSmxZMjl0WlhNaUlIZHBkR2dnYzJodmNuUmxjaUFpWVd4aVpXbDBJaTRuTEFvZ0lDQWdKM1IzYnlCMGFXMWxjeWM2SUNkWmIzVWdiV0Y1SUhKbGNHeGhZMlVnSW5SM2J5QjBhVzFsY3lJZ2QybDBhQ0J6YUc5eWRHVnlJQ0owZDJsalpTSXVKeXdLSUNBZ0lDZDJZWEpwYjNWeklHUnBabVpsY21WdWRDYzZJQ2RaYjNVZ2JXRjVJSEpsY0d4aFkyVWdJblpoY21sdmRYTWdaR2xtWm1WeVpXNTBJaUIzYVhSb0lHcDFjM1FnSW5aaGNtbHZkWE1pTGljc0NpQWdJQ0FuWW1GelpXUWdiMjRnZEdobElHRnpjM1Z0Y0hScGIyNG5PaUFuUTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUNKaVlYTmxaQ0J2YmlCMGFHVWdZWE56ZFcxd2RHbHZiaUlnZDJsMGFDQnphVzF3YkdWeUlDSmhjM04xYldsdVp5SWdiM0lnYW5WemRDQWlhV1lpTGljc0NpQWdJQ0FuZFc1a1pYSWdkR2hsSUdGemMzVnRjSFJwYjI0bk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0oxYm1SbGNpQjBhR1VnWVhOemRXMXdkR2x2YmlJZ2QybDBhQ0J6YVcxd2JHVnlJQ0poYzNOMWJXbHVaeUlnYjNJZ2FuVnpkQ0FpYVdZaUxpY3NDaUFnSUNBbllYTnpkVzFwYm1jZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0ltRnpjM1Z0YVc1bklIUm9ZWFFpSUhkcGRHZ2dZU0J6YVcxd2JHVWdJbWxtSWk0Z0lsTm9iM0owSUhkdmNtUnpJR0Z5WlNCaVpYTjBJaUF0SUZjdUlFTm9kWEpqYUdsc2JDY3NDaUFnSUNBblFYTnpkVzFwYm1jZ2RHaGhkQ2M2SUNkRGIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ0lrRnpjM1Z0YVc1bklIUm9ZWFFpSUhkcGRHZ2dZU0J6YVcxd2JHVWdJbWxtSWk0Z0lsTm9iM0owSUhkdmNtUnpJR0Z5WlNCaVpYTjBJaUF0SUZjdUlFTm9kWEpqYUdsc2JDY3NDaUFnSUNBblFtRnpaV1FnYjI0Z2RHaGxJR0Z6YzNWdGNIUnBiMjRuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSkNZWE5sWkNCdmJpQjBhR1VnWVhOemRXMXdkR2x2YmlJZ2QybDBhQ0J6YVcxd2JHVnlJQ0pCYzNOMWJXbHVaeUlnYjNJZ2FuVnpkQ0FpU1dZaUxpY3NDaUFnSUNBbmFHRjJaU0JzYjI1bklHSmxaVzRnYTI1dmQyNGdkRzhnWW1Vbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0pvWVhabElHeHZibWNnWW1WbGJpQnJibTkzYmlCMGJ5QmlaU0lnZDJsMGFDQnphVzF3YkdVZ0ltRnlaU0l1Snl3S0lDQWdJQ2RvWVhNZ2JHOXVaeUJpWldWdUlHdHViM2R1SUhSdklHSmxKem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWFHRnpJR3h2Ym1jZ1ltVmxiaUJyYm05M2JpQjBieUJpWlNJZ2QybDBhQ0J6YVcxd2JHVWdJbWx6SWk0bkxBb2dJQ0FnSjJsdUlHOTFjaUJ3Y21WMmFXOTFjeUJ6ZEhWa2VTYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSW1sdUlHOTFjaUJ3Y21WMmFXOTFjeUJ6ZEhWa2VTSWdkMmwwYUNCemFHOXlkR1Z5SUNKd2NtVjJhVzkxYzJ4NUlpNG5MQW9nSUNBZ0oybHVJSFJvWlNCd2NtOWpaWE56SUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpYVc0Z2RHaGxJSEJ5YjJObGMzTWdiMllnSWlCM2FYUm9JSE5vYjNKMFpYSWdJbVIxY21sdVp5SXVKeXdLSUNBZ0lDZEpiaUIwYUdVZ2NISnZZMlZ6Y3lCdlppYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnSWtsdUlIUm9aU0J3Y205alpYTnpJRzltSUNJZ2QybDBhQ0J6YUc5eWRHVnlJQ0pFZFhKcGJtY2lMaWNzQ2dvZ0lDQWdJeUJTWlhCc1lXTmxJQ0owYnlCaVpTSWdkMmwwYUNCaElIWmxjbUlLQ2lBZ0lDQW5hWE1nWW1WbmFXNXVhVzVuSnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlhWE1nWW1WbmFXNXVhVzVuSWlCM2FYUm9JSE5wYlhCc1pTQWlZbVZuYVc1eklpNG5MQW9nSUNBZ0oyRnlaU0JpWldkcGJtNXBibWNuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSmhjbVVnWW1WbmFXNXVhVzVuSWlCM2FYUm9JSE5wYlhCc1pTQWlZbVZuYVc0aUxpY3NDaUFnSUNBbmFYTWdabTlzYkc5M2FXNW5Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaWFYTWdabTlzYkc5M2FXNW5JaUIzYVhSb0lITnBiWEJzWlNBaVptOXNiRzkzY3lJdUp5d0tJQ0FnSUNkaGNtVWdabTlzYkc5M2FXNW5Kem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaVlYSmxJR1p2Ykd4dmQybHVaeUlnZDJsMGFDQnphVzF3YkdVZ0ltWnZiR3h2ZHlJdUp5d0tJQ0FnSUNkcGN5QjFjMlZrSUhSdklHUmxkR1ZqZENjNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbWx6SUhWelpXUWdkRzhnWkdWMFpXTjBJaUIzYVhSb0lITnBiWEJzWlNBaVpHVjBaV04wY3lJdUp5d0tJQ0FnSUNkM1lYTWdkWE5sWkNCMGJ5QmtaWFJsWTNRbk9pQW5RMjl1YzJsa1pYSWdjbVZ3YkdGamFXNW5JQ0ozWVhNZ2RYTmxaQ0IwYnlCa1pYUmxZM1FpSUhkcGRHZ2djMmx0Y0d4bElDSmtaWFJsWTNSbFpDSXVKeXdLSUNBZ0lDZHBjeUJrWlhCbGJtUmxiblFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSnBjeUJrWlhCbGJtUmxiblFpSUhkcGRHZ2djMmx0Y0d4bElDSmtaWEJsYm1SeklpNG5MQW9nSUNBZ0oyRnlaU0JrWlhCbGJtUmxiblFuT2lBblEyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSmhjbVVnWkdWd1pXNWtaVzUwSWlCM2FYUm9JSE5wYlhCc1pTQWlaR1Z3Wlc1a2N5SXVKeXdLQ2lBZ0lDQWpJRVZ0Y0hSNUlHRmthbVZqZEdsMlpYTUtDaUFnSUNBblpHVjBZV2xzWldRbk9pQW5RMjl1YzJsa1pYSWdhV1lnWVdScVpXTjBhWFpsSUNKa1pYUmhhV3hsWkNJZ2NtVmhiR3g1SUdGa1pITWdZVzU1ZEdocGJtY2dhR1Z5WlM0bkxBb2dJQ0FnSjJaMWJtUmhiV1Z1ZEdGc0p6b2dKME52Ym5OcFpHVnlJR2xtSUdGa2FtVmpkR2wyWlNBaVpuVnVaR0Z0Wlc1MFlXd2lJSEpsWVd4c2VTQmhaR1J6SUdGdWVYUm9hVzVuSUdobGNtVXVKeXdLQ2lBZ0lDQWpJRk4xWW1wbFkzUnBkbVVnZDI5eVpITUtDaUFnSUNBblkyeGxZWEpzZVNjNklDZFVhR1VnZDI5eVpDQWlZMnhsWVhKc2VTSWdhWE1nWTJ4bFlYSnNlU0J2ZG1WeWRYTmxaQ0JwYmlCelkybGxibU5sSUdGdVpDQnZablJsYmlCd2IybHVkSE1nZEc4Z2RHaHBibWR6SUhSb1lYUWdZMnhsWVhKc2VTQmhjbVVnYm05MElITnZJR05zWldGeUxpQkRiMjV6YVdSbGNpQnlaVzF2ZG1sdVp5QnBkQzRuTEFvZ0lDQWdKMk5zWldGeUlDYzZJQ2RVYUdVZ2QyOXlaQ0FpWTJ4bFlYSWlJR2x6SUc5MlpYSjFjMlZrSUdsdUlITmphV1Z1WTJVZ1lXNWtJRzltZEdWdUlIQnZhVzUwY3lCMGJ5QjBhR2x1WjNNZ2RHaGhkQ0JoWTNSMVlXeHNlU0JoY21VZ2JtOTBJSE52SUdOc1pXRnlMaUJEYjI1emFXUmxjaUJwWmlCcGRDQnBjeUJ1WldObGMzTmhjbmtnYUdWeVpTNG5MQW9nSUNBZ0oyTnNaV0Z5YkhrZ1pHVnRiMjV6ZEhKaGRHVW5PaUFuUVdOamIzSmthVzVuSUhSdklGUm9aU0JEY21GbWRDQlBaaUJUWTJsbGJuUnBabWxqSUZkeWFYUnBibWM2SUNKWGFHVnVJSE52YldWdmJtVWdkWE5sY3lBaVkyeGxZWEpzZVNCa1pXMXZibk4wY21GMFpTSWdiVzl5WlNCdlpuUmxiaUIwYUdGdUlHNXZkQ0IwYUc5elpTQnlaWE4xYkhSeklHUnZJRzV2ZENCamJHVmhjbXg1SUdSbGJXOXVjM1J5WVhSbElHRnVlWFJvYVc1bklHRjBJR0ZzYkNJdUp5d0tJQ0FnSUNkMWJtRnRZbWxuZFc5MWN5YzZJQ2RCWTJOdmNtUnBibWNnZEc4Z1ZHaGxJRU55WVdaMElFOW1JRk5qYVdWdWRHbG1hV01nVjNKcGRHbHVaem9nSWxSb1pTQjNiM0prSUNKMWJtRnRZbWxuZFc5MWN5SWdhWE1nWVhKeWIyZGhiblE3SUdsMElHUmxabWxsY3lCMGFHVWdjbVZoWkdWeUlIUnZJSEYxWlhOMGFXOXVJSFJvWlNCbWFXZDFjbVVpTGljc0NpQWdJQ0FuYjJKMmFXOTFjMng1SnpvZ0oxUm9aU0IzYjNKa0lDSnZZblpwYjNWemJIa2lJR2x6SUc5bWRHVnVJRzFwYzNWelpXUWdhVzRnYzJOcFpXNWpaU0JoYm1RZ2JXbG5hSFFnWkdWelkzSnBZbVVnYzI5dFpYUm9hVzVuSUhSb1lYUWdhWE1nYm05MElITnZJRzlpZG1sdmRYTXVJRU52Ym5OcFpHVnlJSEpsYlc5MmFXNW5JR2wwTGljc0NpQWdJQ0FuVDJKMmFXOTFjMng1SnpvZ0oxUm9aU0IzYjNKa0lDSlBZblpwYjNWemJIa2lJR2x6SUc5bWRHVnVJRzFwYzNWelpXUWdhVzRnYzJOcFpXNWpaU0JoYm1RZ2JXbG5hSFFnWkdWelkzSnBZbVVnYzI5dFpYUm9hVzVuSUhSb1lYUWdhWE1nYm05MElITnZJRzlpZG1sdmRYTXVJRTlpZG1sdmRYTnNlU3dnWTI5dWMybGtaWElnY21WdGIzWnBibWNnYVhRdUp5d0tJQ0FnSUNkQ1lYTnBZMkZzYkhrbk9pQW5WR2hsSUhkdmNtUWdJa0poYzJsallXeHNlU0lnYVhNZ1ltRnphV05oYkd4NUlHNXZkQ0IyWlhKNUlHRndjSEp2Y0hKcFlYUmxJR1p2Y2lCaFkyRmtaVzFwWXlCM2NtbDBhVzVuTGlCQ1lYTnBZMkZzYkhrc0lHTnZibk5wWkdWeUlISmxiVzkyYVc1bklHbDBMaWNzQ2lBZ0lDQW5ZbUZ6YVdOaGJHeDVKem9nSjFSb1pTQjNiM0prSUNKaVlYTnBZMkZzYkhraUlHbHpJR0poYzJsallXeHNlU0J1YjNRZ2RtVnllU0JoY0hCeWIzQnlhV0YwWlNCbWIzSWdZV05oWkdWdGFXTWdkM0pwZEdsdVp5NGdRbUZ6YVdOaGJHeDVMQ0JqYjI1emFXUmxjaUJ5WlcxdmRtbHVaeUJwZEM0bkxBb2dJQ0FnSjI5aWRtbHZkWE1nSnpvZ0oxUm9aU0IzYjNKa0lDSnZZblpwYjNWeklpQnBjeUJ2Wm5SbGJpQnRhWE4xYzJWa0lHbHVJSE5qYVdWdVkyVWdZVzVrSUcxcFoyaDBJR1JsYzJOeWFXSmxJSE52YldWMGFHbHVaeUIwYUdGMElHbHpJRzV2ZENCemJ5QnZZblpwYjNWekxpQkpkQ0JoYkhOdklHRnVibTk1Y3lCeVpXRmtaWEp6TGlCRGIyNXphV1JsY2lCeVpXMXZkbWx1WnlCcGRDNG5MQW9nSUNBZ0ozTjBjbTl1WjJ4NUp6b2dKMVJvWlNCM2IzSmtJQ0p6ZEhKdmJtZHNlU0lnYVhNZ2IyWjBaVzRnYzNSeWIyNW5iSGtnYldsemRYTmxaQ0IwYnlCa1pYTmpjbWxpWlNCdWIzUWdjMjhnYzNSeWIyNW5JSFJvYVc1bmN5NGdVM1J5YjI1bmJIa2dZMjl1YzJsa1pYSWdjbVZ0YjNacGJtY2dhWFFnWVc1a0lHVjRjSEpsYzNOcGJtY2dkR2hsSUhOMGNtVnVaM1JvSUhGMVlXNTBhWFJoZEdsMlpXeDVMQ0JsTG1jdUlDSTBNaVVnYzNSeWIyNW5aWElpTGljc0NpQWdJQ0FuYzNSeWIyNW5JQ2M2SUNkVWFHVWdkMjl5WkNBaWMzUnliMjVuSWlCcGN5QnZablJsYmlCdGFYTjFjMlZrSUhSdklHUmxjMk55YVdKbElHNXZkQ0J6YnlCemRISnZibWNnZEdocGJtZHpMaUJEYjI1emFXUmxjaUJwWmlCMGFHVWdkWE5oWjJVZ2FHVnlaU0JwY3lCaGNIQnliM0J5YVdGMFpTNG5MQW9nSUNBZ0ozTnBaMjVwWm1sallXNTBiSGtuT2lBblZHaGxJSGR2Y21RZ0luTnBaMjVwWm1sallXNTBiSGtpSUdseklHOW1kR1Z1SUhOcFoyNXBabWxqWVc1MGJIa2diV2x6ZFhObFpDQmhibVFnZG1GbmRXVXVJRWwwSUcxcFoyaDBJRzFsWVc0Z2MzUmhkR2x6ZEdsallXeHNlU0J6YVdkdWFXWnBZMkZ1ZENCdmNpQnphV2R1YVdacFkyRnVkQ0IwYnlCMGFHVWdZWFYwYUc5eUxpQlRkR0YwWlNCemFXZHVhV1pwWTJGdVkyVWdjWFZoYm5ScGRHRjBhWFpsYkhrc0lHVXVaeTRnSW1sdVkzSmxZWE5sWkNCaWVTQTBNaVVpTGlCUGRHaGxjaUJoYkhSbGNtNWhkR2wyWlhNNklDSnpkV0p6ZEdGdWRHbGhiR3g1TENCdWIzUmhZbXg1SWljc0NpQWdJQ0FuYzJsbmJtbG1hV05oYm5RZ0p6b2dKMVJvWlNCM2IzSmtJQ0p6YVdkdWFXWnBZMkZ1ZENJZ2FYTWdiMlowWlc0Z2JXbHpkWE5sWkNCaGJtUWdkbUZuZFdVdUlFbDBJRzFwWjJoMElHMWxZVzRnYzNSaGRHbHpkR2xqWVd4c2VTQnphV2R1YVdacFkyRnVkQ0J2Y2lCemFXZHVhV1pwWTJGdWRDQjBieUIwYUdVZ1lYVjBhRzl5TGlCVGRHRjBaU0J6YVdkdWFXWnBZMkZ1WTJVZ2NYVmhiblJwZEdGMGFYWmxiSGtzSUdVdVp5NGdJbUo1SURReUpTSXVJRTkwYUdWeUlHRnNkR1Z5Ym1GMGFYWmxjem9nSW5OMVluTjBZVzUwYVdGc0xDQnViM1JoWW14bElpY3NDaUFnSUNBaklDY2dkMmhwYkdVbk9pQW5TWFFnYldsbmFIUWdZbVVnWW1WMGRHVnlJSFJ2SUhKbGNHeGhZMlVnSW5kb2FXeGxJaUIzYVhSb0lDSjNhR1Z5WldGeklpd2dkVzVzWlhOeklHbDBJSEpsWVd4c2VTQm9ZWEJ3Wlc1eklITnBiWFZzZEdGdVpXOTFjMng1TGlCVGFXMXdiR1VnY0doeVlYTmxjeUJzYVd0bElDSkJJR2x6SUhkb2FYUmxMQ0IzYUdsc1pTQkNJR2x6SUhKbFpDSWdZMkZ1SUdKbElITnBiWEJzYVdacFpXUWdZWE1nSWtFZ2FYTWdkMmhwZEdVN0lFSWdhWE1nY21Wa0xpSW5MQW9nSUNBZ0owbHVkR1Z5WlhOMGFXNW5iSGtuT2lBblZHaGxJSGR2Y21RZ0lrbHVkR1Z5WlhOMGFXNW5iSGtpSUdseklITjFZbXBsWTNScGRtVXVJRWwwSUcxcFoyaDBJR0psSUdacGJtVWdkRzhnZFhObElHbDBJRzl1WTJVc0lHSjFkQ0JrYnlCdWIzUWdiM1psY25WelpTQnBkQ2NzQ2lBZ0lDQW5VM1Z5Y0hKcGMybHVaMng1SnpvZ0oxUm9aU0IzYjNKa0lDSlRkWEp3Y21semFXNW5iSGtpSUdseklITjFZbXBsWTNScGRtVXVJRWwwSUcxcFoyaDBJR0psSUdacGJtVWdkRzhnZFhObElHbDBJRzl1WTJVc0lHSjFkQ0JrYnlCdWIzUWdiM1psY25WelpTQnBkQ2NzQ2lBZ0lDQW5VbVZ0WVhKcllXSnNlU2M2SUNkVWFHVWdkMjl5WkNBaVVtVnRZWEpyWVdKc2VTSWdhWE1nYzNWaWFtVmpkR2wyWlM0Z1NYUWdiV2xuYUhRZ1ltVWdabWx1WlNCMGJ5QjFjMlVnYVhRZ2IyNWpaU3dnWW5WMElHUnZJRzV2ZENCdmRtVnlkWE5sSUdsMEp5d0tJQ0FnSUNkemIyMWxkMmhoZENjNklDZFVhR1VnZDI5eVpDQWljMjl0Wlhkb1lYUWlJRzFwWjJoMElHSmxJSE4xWW1wbFkzUnBkbVV1SUVOdmJuTnBaR1Z5SUdkcGRtbHVaeUJqYjI1amNtVjBaU0J1ZFcxaVpYSnpMaWNzQ2dvZ0lDQWdJeUJTWVc1a2IyMGdZMjl5Y21WamRHbHZibk1LQ2lBZ0lDQW5iR1Z6Y3lCMGFHVnVKem9nSjFCeWIySmhZbXg1SUNKMGFHVnVJaUJ6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ0IwYnlBaWRHaGhiaUlnYVdZZ2RHaHBjeUJwY3lCaElHTnZiWEJoY21semIyNHVKeXdLSUNBZ0lDZHRiM0psSUhSb1pXNG5PaUFuVUhKdlltRmliSGtnSW5Sb1pXNGlJSE5vYjNWc1pDQmlaU0JqYUdGdVoyVmtJSFJ2SUNKMGFHRnVJaUJwWmlCMGFHbHpJR2x6SUdFZ1kyOXRjR0Z5YVhOdmJpNG5MQW9nSUNBZ0oyaHBaMmhsY2lCMGFHVnVKem9nSjFCeWIySmhZbXg1SUNKMGFHVnVJaUJ6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ0IwYnlBaWRHaGhiaUlnYVdZZ2RHaHBjeUJwY3lCaElHTnZiWEJoY21semIyNHVKeXdLSUNBZ0lDZHNiM2RsY2lCMGFHVnVKem9nSjFCeWIySmhZbXg1SUNKMGFHVnVJaUJ6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ0IwYnlBaWRHaGhiaUlnYVdZZ2RHaHBjeUJwY3lCaElHTnZiWEJoY21semIyNHVKeXdLSUNBZ0lDZGlhV2RuWlhJZ2RHaGxiaWM2SUNkUWNtOWlZV0pzZVNBaWRHaGxiaUlnYzJodmRXeGtJR0psSUdOb1lXNW5aV1FnZEc4Z0luUm9ZVzRpSUdsbUlIUm9hWE1nYVhNZ1lTQmpiMjF3WVhKcGMyOXVMaWNzQ2lBZ0lDQW5jMjFoYkd4bGNpQjBhR1Z1SnpvZ0oxQnliMkpoWW14NUlDSjBhR1Z1SWlCemFHOTFiR1FnWW1VZ1kyaGhibWRsWkNCMGJ5QWlkR2hoYmlJZ2FXWWdkR2hwY3lCcGN5QmhJR052YlhCaGNtbHpiMjR1Snl3S0lDQWdJQ2RzWVhKblpYSWdkR2hsYmljNklDZFFjbTlpWVdKc2VTQWlkR2hsYmlJZ2MyaHZkV3hrSUdKbElHTm9ZVzVuWldRZ2RHOGdJblJvWVc0aUlHbG1JSFJvYVhNZ2FYTWdZU0JqYjIxd1lYSnBjMjl1TGljc0NpQWdJQ0FuWW1WMGRHVnlJSFJvWlc0bk9pQW5VSEp2WW1GaWJIa2dJblJvWlc0aUlITm9iM1ZzWkNCaVpTQmphR0Z1WjJWa0lIUnZJQ0owYUdGdUlpQnBaaUIwYUdseklHbHpJR0VnWTI5dGNHRnlhWE52Ymk0bkxBb2dJQ0FnSjIxcFkzSnZiV1YwWlhJbk9pQW5WRzhnWVhadmFXUWdZMjl1Wm5WemFXOXVJSGRwZEdnZ1lTQmtaWFpwWTJVZ1kyRnNiR1ZrSUNKdGFXTnliMjFsZEdWeUlpd2dlVzkxSUdOaGJpQjFjMlVnSW0xcFkzSnZiaUlnWm05eUlIVnVhWFJ6TGljc0NpQWdJQ0FuSUdSaGRHRWdhWE1uT2lBblZHaGxJSGR2Y21RZ0ltUmhkR0VpSUdseklIQnNkWEpoYkN3Z1pHOTFZbXhsTFdOb1pXTnJJR2xtSUNKa1lYUmhJR2x6SWlCcGN5QmpiM0p5WldOMExpY3NDaUFnSUNBbklHUmhkR0VnYUdGekp6b2dKMVJvWlNCM2IzSmtJQ0prWVhSaElpQnBjeUJ3YkhWeVlXd3NJR1J2ZFdKc1pTMWphR1ZqYXlCcFppQWlaR0YwWVNCb1lYTWlJR2x6SUdOdmNuSmxZM1F1Snl3S0lDQWdJQ2NnWkdGMFlTQnphRzkzY3ljNklDZFVhR1VnZDI5eVpDQWlaR0YwWVNJZ2FYTWdjR3gxY21Gc0xDQmtiM1ZpYkdVdFkyaGxZMnNnYVdZZ0ltUmhkR0VnYzJodmQzTWlJR2x6SUdOdmNuSmxZM1F1Snl3S0lDQWdJQ2NnTUNBbk9pQW5VMmx0Y0d4bElHNTFiV0psY25NZ01DMHhNQ0JoY21VZ1ltVjBkR1Z5SUhSdklHSmxJSE53Wld4c1pXUWdiM1YwTENCbExtY3VJQ0ptYVhabElITmhiWEJzWlhNaUxDQWlZV0p2ZG1VZ2VtVnlieUlzSUNKbGNYVmhiQ0IwYnlCdmJtVWlMaWNzQ2lBZ0lDQW5ZVzVrTDI5eUp6b2dKMVJ5ZVNCMGJ5QnpZWGtnYVhRZ2QybDBhRzkxZENBaVlXNWtMMjl5SWlCdGIyNXpkSEp2YzJsMGVTNGdUMlowWlc0c0lHcDFjM1FnSW1GdVpDSWdiM0lnSW05eUlpQnBjeUJsYm05MVoyZ3VKeXdLSUNBZ0lDZHZjaTloYm1Rbk9pQW5WSEo1SUhSdklITmhlU0JwZENCM2FYUm9iM1YwSUNKdmNpOWxibVFpSUcxdmJuTjBjbTl6YVhSNUxpQlBablJsYml3Z2FuVnpkQ0FpWVc1a0lpQnZjaUFpYjNJaUlHbHpJR1Z1YjNWbmFDNG5MQW9nSUNBZ0oyZGxibVZ5WVhSbElDYzZJQ2RXWlhKcFpua2dkR2hoZENCMGFHVWdkbVZ5WWlBaVoyVnVaWEpoZEdVaUlISmxZV3hzZVNCa1pYTmpjbWxpWlhNZ1lTQm5aVzVsY21GMGFXOXVJSEJ5YjJObGMzTXVJRTkwYUdWeWQybHpaU3dnWTI5dWMybGtaWElnY21Wd2JHRmphVzVuSUdsMElIZHBkR2dnSW1OaGRYTmxJaTRuTEFvZ0lDQWdKMmRsYm1WeVlYUmxaQ2M2SUNkV1pYSnBabmtnZEdoaGRDQjBhR1VnZG1WeVlpQWlaMlZ1WlhKaGRHVmtJaUJ5WldGc2JIa2daR1Z6WTNKcFltVnpJR0VnWjJWdVpYSmhkR2x2YmlCd2NtOWpaWE56TGlCUGRHaGxjbmRwYzJVc0lHTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QnBkQ0IzYVhSb0lDSmpZWFZ6WldRaUxpY3NDaUFnSUNBbloyVnVaWEpoZEdsdVp5YzZJQ2RXWlhKcFpua2dkR2hoZENBaVoyVnVaWEpoZEdsdVp5SWdjbVZoYkd4NUlHUmxjMk55YVdKbGN5QmhJR2RsYm1WeVlYUnBiMjRnY0hKdlkyVnpjeTRnVDNSb1pYSjNhWE5sTENCamIyNXphV1JsY2lCeVpYQnNZV05wYm1jZ2FYUWdkMmwwYUNBaVkyRjFjMmx1WnlJdUp5d0tJQ0FnSUNkSmJpQmpiMjVqYkhWemFXOXVjeWM2SUNkRGIzSnlaV04wSUdGeklDSkpiaUJqYjI1amJIVnphVzl1SWk0bkxBb2dJQ0FnSnlCMGFHVWdkR2hsSUNjNklDZFRaV1Z0Y3lCc2FXdGxJQ0owYUdVaUlHbHpJSEpsY0dWaGRHVmtJSFIzYVdObExDY3NDaUFnSUNBbklHRWdZU0FuT2lBblUyVmxiWE1nYkdsclpTQWlZU0lnYVhNZ2NtVndaV0YwWldRZ2RIZHBZMlVzSnl3S0lDQWdJQ2NnWVc0Z1lXNGdKem9nSjFObFpXMXpJR3hwYTJVZ0ltRWlJR2x6SUhKbGNHVmhkR1ZrSUhSM2FXTmxMQ2NzQ2lBZ0lDQW5SWEV1SUNnbk9pQW5RbkpoWTJ0bGRITWdZWEp2ZFc1a0lIUm9aU0JsY1hWaGRHbHZiaUJ1ZFcxaVpYSWdZWEpsSUhWemRXRnNiSGtnZFc1dVpXTmxjM05oY25rc0lHVXVaeTRnUlhFdUlERXVMQ0JqYUdWamF5Qm5kV2xrWld4cGJtVnpJR1p2Y2lCNWIzVnlJR3B2ZFhKdVlXd3VKeXdLSUNBZ0lDZERieTRuT2lBblJuVnNiQ0J6ZEc5d0lHbHpJRzV2ZENCeVpYRjFhWEpsWkNCaFpuUmxjaUJEYnl3Z2FTNWxMaUJxZFhOMElDSmhibVFnUTI4aUlHbHpJR1pwYm1VdUp5d0tJQ0FnSUNjZ0xTMHRJQ2M2SUNkVmMzVmhiR3g1TENCdExXUmhjMmdnWkc5bGN5QnViM1FnYUdGMlpTQnpjR0ZqWlhNZ1lYSnZkVzVrSUdsMExpQmxMbWN1SUNKUWFHOTBiMjV6TFMwdGNYVmhiblJoSUc5bUlHeHBaMmgwTFMwdGFHRjJaU0J1YnlCdFlYTnpMaUlzSUdKMWRDQnBkQ0JwY3lCaElHMWhkSFJsY2lCdlppQnpkSGxzWlM0bkxBb2dJQ0FnSnlCaGJHeHZkeWM2SUNkRGFHVmpheUJwWmlCMGFHVWdkbVZ5WWlBaVlXeHNiM2NpSUdseklISmxiR0YwWldRZ2RHOGdjMjl0WlNCd1pYSnRhWE56YVc5dWN5NGdTV1lnZVc5MUlHMWxZVzRnSW0xaGEyVWdhWFFnY0c5emMybGliR1VpTENCMWMyVWdkR2hsSUhabGNtSWdJbVZ1WVdKc1pTSXVKeXdLSUNBZ0lDY2dhVzV6ZFhKbEp6b2dKME5vWldOcklHbG1JQ0pwYm5OMWNtVWlJR2x6SUc1dmRDQnRhWE4wWVd0bGJpQm1iM0lnSW1WdWMzVnlaU0l1SUVsbUlIbHZkU0J0WldGdUlDSnRZV3RsSUhOMWNtVWlJSFZ6WlNBaVpXNXpkWEpsSWk0bkxBb2dJQ0FnSjNCeWIzQmhaMkYwWlNCaGN5QnNiMjVuSnpvZ0oxWmxjbWxtZVNCMGFHRjBJSGx2ZFNCa2J5QnViM1FnYldWaGJpQWljSEp2Y0dGbllYUmxJR0Z6SUdaaGNpSWdhVzV6ZEdWaFpDQnZaaUFpY0hKdmNHRm5ZWFJsSUdGeklHeHZibWNpTGljc0NpQWdJQ0FuY0hKdmNHRm5ZWFJsY3lCaGN5QnNiMjVuSnpvZ0oxWmxjbWxtZVNCMGFHRjBJSGx2ZFNCa2J5QnViM1FnYldWaGJpQWljSEp2Y0dGbllYUmxjeUJoY3lCbVlYSWlJR2x1YzNSbFlXUWdiMllnSW5CeWIzQmhaMkYwWlhNZ1lYTWdiRzl1WnlJdUp5d0tJQ0FnSUNkd2NtOXdZV2RoZEdWa0lHRnpJR3h2Ym1jbk9pQW5WbVZ5YVdaNUlIUm9ZWFFnZVc5MUlHUnZJRzV2ZENCdFpXRnVJQ0p3Y205d1lXZGhkR1ZrSUdGeklHWmhjaUlnYVc1emRHVmhaQ0J2WmlBaWNISnZjR0ZuWVhSbFpDQmhjeUJzYjI1bklpNG5MQW9nSUNBZ0ozQnliM0JoWjJGMGFXNW5JR0Z6SUd4dmJtY25PaUFuVm1WeWFXWjVJSFJvWVhRZ2VXOTFJR1J2SUc1dmRDQnRaV0Z1SUNKd2NtOXdZV2RoZEdsdVp5QmhjeUJtWVhJaUlHbHVjM1JsWVdRZ2IyWWdJbkJ5YjNCaFoyRjBhVzVuSUdGeklHeHZibWNpTGljc0NpQWdJQ0FuZEhKaGRtVnNJR0Z6SUd4dmJtY25PaUFuVm1WeWFXWjVJSFJvWVhRZ2VXOTFJR1J2SUc1dmRDQnRaV0Z1SUNKMGNtRjJaV3dnWVhNZ1ptRnlJaUJwYm5OMFpXRmtJRzltSUNKMGNtRjJaV3dnWVhNZ2JHOXVaeUl1Snl3S0lDQWdJQ2QwY21GMlpXeHpJR0Z6SUd4dmJtY25PaUFuVm1WeWFXWjVJSFJvWVhRZ2VXOTFJR1J2SUc1dmRDQnRaV0Z1SUNKMGNtRjJaV3h6SUdGeklHWmhjaUlnYVc1emRHVmhaQ0J2WmlBaWRISmhkbVZzY3lCaGN5QnNiMjVuSWk0bkxBb2dJQ0FnSjNSeVlYWmxiR1ZrSUdGeklHeHZibWNuT2lBblZtVnlhV1o1SUhSb1lYUWdlVzkxSUdSdklHNXZkQ0J0WldGdUlDSjBjbUYyWld4bFpDQmhjeUJtWVhJaUlHbHVjM1JsWVdRZ2IyWWdJblJ5WVhabGJHVmtJR0Z6SUd4dmJtY2lMaWNzQ2lBZ0lDQW5kSEpoZG1Wc2FXNW5JR0Z6SUd4dmJtY25PaUFuVm1WeWFXWjVJSFJvWVhRZ2VXOTFJR1J2SUc1dmRDQnRaV0Z1SUNKMGNtRjJaV3hwYm1jZ1lYTWdabUZ5SWlCcGJuTjBaV0ZrSUc5bUlDSjBjbUYyWld4cGJtY2dZWE1nYkc5dVp5SXVKeXdLSUNBZ0lDZDBjbUYyWld4c1pXUWdZWE1nYkc5dVp5YzZJQ2RXWlhKcFpua2dkR2hoZENCNWIzVWdaRzhnYm05MElHMWxZVzRnSW5SeVlYWmxiR3hsWkNCaGN5Qm1ZWElpSUdsdWMzUmxZV1FnYjJZZ0luUnlZWFpsYkdWa0lHRnpJR3h2Ym1jaUxpY3NDaUFnSUNBbmRISmhkbVZzYkdsdVp5QmhjeUJzYjI1bkp6b2dKMVpsY21sbWVTQjBhR0YwSUhsdmRTQmtieUJ1YjNRZ2JXVmhiaUFpZEhKaGRtVnNiR2x1WnlCaGN5Qm1ZWElpSUdsdWMzUmxZV1FnYjJZZ0luUnlZWFpsYkdsdVp5QmhjeUJzYjI1bklpNG5MQW9nSUNBZ0p5UmNhSE5zWVhOb0pDQnBjeUIwYUdVZ2NtVmtkV05sWkNCUWJHRnVZMnNuT2lBblNYUWdhWE1nYzJGbVpTQjBieUJoYzNOMWJXVWdkR2hoZENCaGJHd2djR2g1YzJsamFYTjBjeUJyYm05M0lIUm9aU0J0WldGdWFXNW5JRzltSUdndFltRnlMaWNzQ2lBZ0lDQW5KRnhvYzJ4aGMyZ2tJR2x6SUhSb1pTQlFiR0Z1WTJzbk9pQW5TWFFnYVhNZ2MyRm1aU0IwYnlCaGMzTjFiV1VnZEdoaGRDQmhiR3dnY0doNWMybGphWE4wY3lCcmJtOTNJSFJvWlNCdFpXRnVhVzVuSUc5bUlHZ3RZbUZ5TGljc0NpQWdJQ0FuSkZ4b2MyeGhjMmdrSUdseklGQnNZVzVqYXljNklDZEpkQ0JwY3lCellXWmxJSFJ2SUdGemMzVnRaU0IwYUdGMElHRnNiQ0J3YUhsemFXTnBjM1J6SUd0dWIzY2dkR2hsSUcxbFlXNXBibWNnYjJZZ2FDMWlZWEl1Snl3S0lDQWdJQ2NrWEdoaVlYSWtJR2x6SUhSb1pTQnlaV1IxWTJWa0lGQnNZVzVqYXljNklDZEpkQ0JwY3lCellXWmxJSFJ2SUdGemMzVnRaU0IwYUdGMElHRnNiQ0J3YUhsemFXTnBjM1J6SUd0dWIzY2dkR2hsSUcxbFlXNXBibWNnYjJZZ2FDMWlZWEl1Snl3S0lDQWdJQ2NrWEdoaVlYSWtJR2x6SUhSb1pTQlFiR0Z1WTJzbk9pQW5TWFFnYVhNZ2MyRm1aU0IwYnlCaGMzTjFiV1VnZEdoaGRDQmhiR3dnY0doNWMybGphWE4wY3lCcmJtOTNJSFJvWlNCdFpXRnVhVzVuSUc5bUlHZ3RZbUZ5TGljc0NpQWdJQ0FuSkZ4b1ltRnlKQ0JwY3lCUWJHRnVZMnNuT2lBblNYUWdhWE1nYzJGbVpTQjBieUJoYzNOMWJXVWdkR2hoZENCaGJHd2djR2g1YzJsamFYTjBjeUJyYm05M0lIUm9aU0J0WldGdWFXNW5JRzltSUdndFltRnlMaWNzQ2lBZ0lDQW5hWEp5WldkaGNtUnNaWE56SnpvZ0oxSmxjR3hoWTJVZ0ltbHljbVZuWVhKa2JHVnpjeUlnZDJsMGFDQWljbVZuWVhKa2JHVnpjeUl1Snl3S0lDQWdJQ2ROYjI1MFpTMURZWEpzYnljNklDZFRjR1ZzYkNBaVRXOXVkR1V0UTJGeWJHOGlJSGRwZEdodmRYUWdZU0JvZVhCb1pXNHNJR2t1WlM0Z0lrMXZiblJsSUVOaGNteHZJaTRuTEFvZ0lDQWdKMmhoZG1VZ2RHOGdhR0YyWlNjNklDZFNaWEJzWVdObElDSm9ZWFpsSUhSdklHaGhkbVVpSUhkcGRHZ2dJbTExYzNRZ2FHRjJaU0lnYjNJZ0luTm9iM1ZzWkNCb1lYWmxJaTRuTEFvZ0lDQWdKMmhoY3lCMGJ5Qm9ZWFpsSnpvZ0oxSmxjR3hoWTJVZ0ltaGhkbVVnZEc4Z2FHRjJaU0lnZDJsMGFDQWliWFZ6ZENCb1lYWmxJaUJ2Y2lBaWMyaHZkV3hrSUdoaGRtVWlMaWNzQ2lBZ0lDQW5aWFpsY25sdmJtVWdiMllnSnpvZ0owTnZjbkpsWTNRZ0ltVjJaWEo1YjI1bElHOW1JaUJoY3lBaVpYWmxjbmtnYjI1bElHOW1JaTRuTEFvZ0lDQWdKeUJoYmlCdmRHaGxjaUFuT2lBblEyOXljbVZqZENBaVlXNGdiM1JvWlhJaUlHRnpJQ0poYm05MGFHVnlJaTRuTEFvZ0lDQWdKeUJwY3lCamIyMXdjbWx6WldRZ2IyWWdKem9nSjBOdmNuSmxZM1FnSW1seklHTnZiWEJ5YVhObFpDQnZaaUlnWVhNZ0ltTnZiWEJ5YVhObGN5SXVJRlJvWlNCM2FHOXNaU0JqYjIxd2NtbHpaWE1nYVhSeklIQmhjblJ6TGljc0NpQWdJQ0FuSUdGeVpTQmpiMjF3Y21selpXUWdiMllnSnpvZ0owTnZjbkpsWTNRZ0ltRnlaU0JqYjIxd2NtbHpaV1FnYjJZaUlHRnpJQ0pqYjIxd2NtbHpaU0l1SUZSb1pTQjNhRzlzWlNCamIyMXdjbWx6WlhNZ2FYUnpJSEJoY25SekxpY3NDaUFnSUNBbklHOXVZbTloY21RZ0p6b2dKME52Y25KbFkzUWdJbTl1WW05aGNtUWlJR0Z6SUNKdmJpMWliMkZ5WkNJdUp5d0tJQ0FnSUNjZ1kyRjFjMlVnWVc1a0lHRm1abVZqZENjNklDZERiM0p5WldOMElHRnpJQ0pqWVhWelpTQmhibVFnWVdabVpXTjBJaUJoY3lBaVkyRjFjMlVnWVc1a0lHVm1abVZqZENJdUp5d0tJQ0FnSUNkallYSmxablZzYkhrZ1kyaHZjMlZ1SnpvZ0oxUm9aU0IzYjNKa0lDSmpZWEpsWm5Wc2JIa2lJR1J2WlhNZ2JtOTBJR0ZrWkNCdGRXTm9JR2hsY21VdUlGUm9aU0JoWTNRZ2IyWWdZMmh2YVdObElHRnNjbVZoWkhrZ2FXMXdiR2xsY3lCemIyMWxJR052Ym5OcFpHVnlZWFJwYjI0dUp5d0tJQ0FnSUNkallYSmxablZzYkhrZ2MyVnNaV04wWldRbk9pQW5WR2hsSUhkdmNtUWdJbU5oY21WbWRXeHNlU0lnWkc5bGN5QnViM1FnWVdSa0lHMTFZMmdnYUdWeVpTNGdWR2hsSUdGamRDQnZaaUJ6Wld4bFkzUnBiMjRnWVd4eVpXRmtlU0JwYlhCc2FXVnpJSE52YldVZ1kyOXVjMmxrWlhKaGRHbHZiaTRuTEFvZ0lDQWdKMk5oY21WbWRXeHNlU0J6Wld4bFkzUW5PaUFuVkdobElIZHZjbVFnSW1OaGNtVm1kV3hzZVNJZ1pHOWxjeUJ1YjNRZ1lXUmtJRzExWTJnZ2FHVnlaUzRnVkdobElHRmpkQ0J2WmlCelpXeGxZM1JwYjI0Z1lXeHlaV0ZrZVNCcGJYQnNhV1Z6SUhOdmJXVWdZMjl1YzJsa1pYSmhkR2x2Ymk0bkxBb2dJQ0FnSjJOaGNtVm1kV3hzZVNCamFHOXZjMlVuT2lBblZHaGxJSGR2Y21RZ0ltTmhjbVZtZFd4c2VTSWdaRzlsY3lCdWIzUWdZV1JrSUcxMVkyZ2dhR1Z5WlM0Z1ZHaGxJR0ZqZENCdlppQmphRzlwWTJVZ1lXeHlaV0ZrZVNCcGJYQnNhV1Z6SUhOdmJXVWdZMjl1YzJsa1pYSmhkR2x2Ymk0bkxBb2dJQ0FnSjJ4dmR5Qm1jbVZ4ZFdWdVkza2djbUZ1WjJVbk9pQW5RMjl5Y21WamRDQmhjeUFpYkc5M0xXWnlaWEYxWlc1amVTSXVKeXdLSUNBZ0lDZG9hV2RvSUdaeVpYRjFaVzVqZVNCeVlXNW5aU2M2SUNkRGIzSnlaV04wSUdGeklDSm9hV2RvTFdaeVpYRjFaVzVqZVNJdUp5d0tJQ0FnSUNkb2FXZG9JR1p5WlhGMVpXNWplU0IyYVdKeVlYUnBiMjRuT2lBblEyOXljbVZqZENCaGN5QWlhR2xuYUMxbWNtVnhkV1Z1WTNraUxpY3NDaUFnSUNBbmJHOTNJR1p5WlhGMVpXNWplU0IyYVdKeVlYUnBiMjRuT2lBblEyOXljbVZqZENCaGN5QWliRzkzTFdaeVpYRjFaVzVqZVNJdUp5d0tJQ0FnSUNkb2FXZG9JR1p5WlhGMVpXNWplU0J3YUc5dWIyNG5PaUFuUTI5eWNtVmpkQ0JoY3lBaWFHbG5hQzFtY21WeGRXVnVZM2tpTGljc0NpQWdJQ0FuYkc5M0lHWnlaWEYxWlc1amVTQndhRzl1YjI0bk9pQW5RMjl5Y21WamRDQmhjeUFpYkc5M0xXWnlaWEYxWlc1amVTSXVKeXdLSUNBZ0lDZHpkSEpoYVdkb2RDQmpkWEoyWlNjNklDZFZjM1ZoYkd4NUlHRWdiR2x1WlNCcGN5QmxhWFJvWlhJZ2MzUnlZV2xuYUhRZ2IzSWdZM1Z5ZG1Wa0xpQkRiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbk4wY21GcFoyaDBJR04xY25abElpQjNhWFJvSUNKemRISmhhV2RvZENCc2FXNWxJaTRuTEFvZ0lDQWdKMnhwYm1WaGNpQmpkWEoyWlNjNklDZFZjM1ZoYkd4NUlHRWdiR2x1WldGeUlHUmxjR1Z1WkdWdVkyVWdhWE1nYm05MElHTjFjblpsWkM0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSnNhVzVsWVhJZ1kzVnlkbVVpSUhkcGRHZ2dJbXhwYm1VaUxpY3NDaUFnSUNBblltVm1iM0psSUdoaGJtUW5PaUFuUW1WbWIzSmxhR0Z1WkNCcGN5QnpjR1ZzYkdWa0lHRnpJRzl1WlNCM2IzSmtMaWNzQ2lBZ0lDQW5aR2xtWm1WeVpXNTBJSFJvWVc0bk9pQW5RMjl5Y21WamRDQWlaR2xtWm1WeVpXNTBJSFJvWVc0aUlHRnpJQ0prYVdabVpYSmxiblFnWm5KdmJTSXVKeXdLQ2lBZ0lDQWpJRTUxYldKbGNuTWdibVY0ZENCMGJ5QjNiM0prY3dvS0lDQWdJQ2N5TFd4aGVXVnlKem9nSjFOd1pXeHNJRzkxZENCemFXMXdiR1VnYm5WdFltVnljeUJzYVd0bElDSjBkMjh0YkdGNVpYSWlMaWNzQ2lBZ0lDQW5NeTFzWVhsbGNpYzZJQ2RUY0dWc2JDQnZkWFFnYzJsdGNHeGxJRzUxYldKbGNuTWdiR2xyWlNBaWRHaHlaV1V0YkdGNVpYSWlMaWNzQ2lBZ0lDQW5OQzFzWVhsbGNpYzZJQ2RUY0dWc2JDQnZkWFFnYzJsdGNHeGxJRzUxYldKbGNuTWdiR2xyWlNBaVptOTFjaTFzWVhsbGNpSXVKeXdLSUNBZ0lDY3lMV0psWVcwbk9pQW5VM0JsYkd3Z2IzVjBJSE5wYlhCc1pTQnVkVzFpWlhKeklHeHBhMlVnSW5SM2J5MWlaV0Z0SWk0bkxBb2dJQ0FnSnpNdFltVmhiU2M2SUNkVGNHVnNiQ0J2ZFhRZ2MybHRjR3hsSUc1MWJXSmxjbk1nYkdsclpTQWlkR2h5WldVdFltVmhiU0l1Snl3S0lDQWdJQ2MwTFdKbFlXMG5PaUFuVTNCbGJHd2diM1YwSUhOcGJYQnNaU0J1ZFcxaVpYSnpJR3hwYTJVZ0ltWnZkWEl0WW1WaGJTSXVKeXdLSUNBZ0lDY3lMV1p2YkdRbk9pQW5VM0JsYkd3Z2IzVjBJSE5wYlhCc1pTQnVkVzFpWlhKeklHeHBhMlVnSW5SM2J5MW1iMnhrSWk0bkxBb2dJQ0FnSnpNdFptOXNaQ2M2SUNkVGNHVnNiQ0J2ZFhRZ2MybHRjR3hsSUc1MWJXSmxjbk1nYkdsclpTQWlkR2h5WldVdFptOXNaQ0l1Snl3S0lDQWdJQ2MwTFdadmJHUW5PaUFuVTNCbGJHd2diM1YwSUhOcGJYQnNaU0J1ZFcxaVpYSnpJR3hwYTJVZ0ltWnZkWEl0Wm05c1pDSXVKeXdLSUNBZ0lDYzFMV1p2YkdRbk9pQW5VM0JsYkd3Z2IzVjBJSE5wYlhCc1pTQnVkVzFpWlhKeklHeHBhMlVnSW1acGRtVXRabTlzWkNJdUp5d0tJQ0FnSUNjeUxXSnZaSGtuT2lBblUzQmxiR3dnYjNWMElITnBiWEJzWlNCdWRXMWlaWEp6SUd4cGEyVWdJblIzYnkxaWIyUjVJaTRuTEFvZ0lDQWdKek10WW05a2VTYzZJQ2RUY0dWc2JDQnZkWFFnYzJsdGNHeGxJRzUxYldKbGNuTWdiR2xyWlNBaWRHaHlaV1V0WW05a2VTSXVKeXdLQ2lBZ0lDQWpJRWx1WTNKbFlYTmxjeUJoY3lCMFpXMXdaWEpoZEhWeVpTQnBjeUJwYm1OeVpXRnpaV1FLQ2lBZ0lDQW5hVzVqY21WaGMyVnpJR0Z6SUhSb1pTQjBaVzF3WlhKaGRIVnlaU0JwY3lCcGJtTnlaV0Z6WldRbk9pQW5WR2hsSUhCb2NtRnpaU0FpYVc1amNtVmhjMlZ6SUdGeklIUm9aU0IwWlcxd1pYSmhkSFZ5WlNCcGN5QnBibU55WldGelpXUWlJR05oYmlCaVpTQnphVzF3YkdsbWFXVmtJR0Z6SUNKcGJtTnlaV0Z6WlhNZ2QybDBhQ0IwWlcxd1pYSmhkSFZ5WlM0bkxBb2dJQ0FnSjJsdVkzSmxZWE5sSUdGeklIUm9aU0IwWlcxd1pYSmhkSFZ5WlNCcGN5QnBibU55WldGelpXUW5PaUFuVkdobElIQm9jbUZ6WlNBaWFXNWpjbVZoYzJVZ1lYTWdkR2hsSUhSbGJYQmxjbUYwZFhKbElHbHpJR2x1WTNKbFlYTmxaQ0lnWTJGdUlHSmxJSE5wYlhCc2FXWnBaV1FnWVhNZ0ltbHVZM0psWVhObElIZHBkR2dnZEdWdGNHVnlZWFIxY21VdUp5d0tJQ0FnSUNkcGJtTnlaV0Z6WldRZ1lYTWdkR2hsSUhSbGJYQmxjbUYwZFhKbElHbHpJR2x1WTNKbFlYTmxaQ2M2SUNkVWFHVWdjR2h5WVhObElDSnBibU55WldGelpXUWdZWE1nZEdobElIUmxiWEJsY21GMGRYSmxJR2x6SUdsdVkzSmxZWE5sWkNJZ1kyRnVJR0psSUhOcGJYQnNhV1pwWldRZ1lYTWdJbWx1WTNKbFlYTmxJSGRwZEdnZ2RHVnRjR1Z5WVhSMWNtVXVKeXdLSUNBZ0lDZHBibU55WldGelpTQmhjeUIwYUdVZ2RHVnRjR1Z5WVhSMWNtVWdkMkZ6SUdsdVkzSmxZWE5sWkNjNklDZFVhR1VnY0doeVlYTmxJQ0pwYm1OeVpXRnpaU0JoY3lCMGFHVWdkR1Z0Y0dWeVlYUjFjbVVnZDJGeklHbHVZM0psWVhObFpDSWdZMkZ1SUdKbElITnBiWEJzYVdacFpXUWdZWE1nSW1sdVkzSmxZWE5sWkNCM2FYUm9JSFJsYlhCbGNtRjBkWEpsTGljc0NpQWdJQ0FuYVc1amNtVmhjMlZrSUdGeklIUm9aU0IwWlcxd1pYSmhkSFZ5WlNCM1lYTWdhVzVqY21WaGMyVmtKem9nSjFSb1pTQndhSEpoYzJVZ0ltbHVZM0psWVhObFpDQmhjeUIwYUdVZ2RHVnRjR1Z5WVhSMWNtVWdkMkZ6SUdsdVkzSmxZWE5sWkNJZ1kyRnVJR0psSUhOcGJYQnNhV1pwWldRZ1lYTWdJbWx1WTNKbFlYTmxaQ0IzYVhSb0lIUmxiWEJsY21GMGRYSmxMaWNzQ2dvZ0lDQWdJeUJTWldabGNuSnBibWNnZEc4Z1ptbG5kWEpsY3dvS0lDQWdJQ2NnWm1sbkxpYzZJQ2ROYjNOMElHcHZkWEp1WVd4eklIQnlaV1psY2lCallYQnBkR0ZzYVhwbFpDQnlaV1psY21WdVkyVnpJSFJ2SUdacFozVnlaWE1zSUdVdVp5NGdJbUZ6SUhOb2IzZHVJR2x1SUVacFp5NGdNU0l1Snl3S0lDQWdJQ2NnWm1sbmN5NG5PaUFuVFc5emRDQnFiM1Z5Ym1Gc2N5QndjbVZtWlhJZ1kyRndhWFJoYkdsNlpXUWdjbVZtWlhKbGJtTmxjeUIwYnlCbWFXZDFjbVZ6TENCbExtY3VJQ0poY3lCemFHOTNiaUJwYmlCR2FXZHpMaUF4TFRJaUxpY3NDaUFnSUNBblcwWnBaeWM2SUNkTmIzTjBJR3B2ZFhKdVlXeHpJSEJ5WldabGNpQnlaV2QxYkdGeUlHSnlZV05yWlhSeklHWnZjaUJtYVdkMWNtVWdjbVZtWlhKbGJtTmxjeXdnWlM1bkxpQW9SbWxuTGlBeEtTNG5MQW9nSUNBZ0p5aHpaV1VnUm1sbkp6b2dKMWx2ZFNCallXNGdiMjFwZENCMGFHVWdkMjl5WkNBaWMyVmxJaUJwYmlCMGFHVWdabWxuZFhKbElISmxabVZ5Wlc1alpTd2daUzVuTGlBb1JtbG5MaUF4S1M0bkxBb2dJQ0FnSnloelpXVWdabWxuSnpvZ0oxbHZkU0JqWVc0Z2IyMXBkQ0IwYUdVZ2QyOXlaQ0FpYzJWbElpQnBiaUIwYUdVZ1ptbG5kWEpsSUhKbFptVnlaVzVqWlN3Z1pTNW5MaUFvUm1sbkxpQXhLUzRuTEFvZ0lDQWdKeWhoY3lCemFHOTNiaUJwYmlCR2FXY25PaUFuV1c5MUlHTmhiaUJ2YldsMElIUm9aU0IzYjNKa2N5QWlZWE1nYzJodmQyNGdhVzRpSUdsdUlIUm9aU0JtYVdkMWNtVWdjbVZtWlhKbGJtTmxMQ0JsTG1jdUlDaEdhV2N1SURFcExpY3NDaUFnSUNBbktITm9iM2R1SUdsdUlFWnBaeWM2SUNkWmIzVWdZMkZ1SUc5dGFYUWdkR2hsSUhkdmNtUnpJQ0p6YUc5M2JpQnBiaUlnYVc0Z2RHaGxJR1pwWjNWeVpTQnlaV1psY21WdVkyVXNJR1V1Wnk0Z0tFWnBaeTRnTVNrdUp5d0tJQ0FnSUNjb2MyVmxJRk5KSnpvZ0oxbHZkU0JqWVc0Z2IyMXBkQ0IwYUdVZ2QyOXlaQ0FpYzJWbElpQnBiaUIwYUdVZ1Uwa2djbVZtWlhKbGJtTmxMQ0JsTG1jdUlDaFRkWEJ3YkdWdFpXNTBZWEo1SUVsdVptOXliV0YwYVc5dUlGTXhLUzRuTEFvZ0lDQWdKeWh6WldVZ1UzVndjQ2M2SUNkWmIzVWdZMkZ1SUc5dGFYUWdkR2hsSUhkdmNtUWdJbk5sWlNJZ2FXNGdkR2hsSUdacFozVnlaU0J5WldabGNtVnVZMlVzSUdVdVp5NGdLRk4xY0hCc1pXMWxiblJoY25rZ1JtbG5kWEpsSUZNeEtTNG5MQW9nSUNBZ0p5aHpaV1VnVTAwbk9pQW5XVzkxSUdOaGJpQnZiV2wwSUhSb1pTQjNiM0prSUNKelpXVWlJR2x1SUhSb1pTQm1hV2QxY21VZ2NtVm1aWEpsYm1ObExDQmxMbWN1SUNoVGRYQndiR1Z0Wlc1MFlYSjVJRVpwWjNWeVpTQlRNU2t1Snl3S0lDQWdJQ2NvYzJWbElFMWxkR2h2WkhNbk9pQW5XVzkxSUdOaGJpQnZiV2wwSUhSb1pTQjNiM0prSUNKelpXVWlJR2x1SUhSb1pTQk5aWFJvYjJSeklISmxabVZ5Wlc1alpTQmhibVFnYW5WemRDQjNjbWwwWlNBb1RXVjBhRzlrY3lrdUp5d0tJQ0FnSUNjb2MyVmxJRUZ3Y0dWdVpHbDRKem9nSjFsdmRTQmpZVzRnYjIxcGRDQjBhR1VnZDI5eVpDQWljMlZsSWlCcGJpQjBhR1VnUVhCd1pXNWthWGdnY21WbVpYSmxibU5sSUdGdVpDQnFkWE4wSUhkeWFYUmxJQ2hCY0hCbGJtUnBlQ0F4S1M0bkxBb0tJQ0FnSUNNZ1UyaHZjblJsYm1Wa0lIVnVhWFJ6Q2dvZ0lDQWdKM1JvYjNWellXNWtjeUJ2WmlCTElDYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJR3RsYkhacGJpY3NDaUFnSUNBbmFIVnVaSEpsWkhNZ2IyWWdTeUFuT2lBblEyOXVjMmxrWlhJZ2MzQmxiR3hwYm1jZ2IzVnlJSFJvWlNCMWJtbDBjeUJoY3lCclpXeDJhVzRuTEFvZ0lDQWdKM1JsYm5NZ2IyWWdTeUFuT2lBblEyOXVjMmxrWlhJZ2MzQmxiR3hwYm1jZ2IzVnlJSFJvWlNCMWJtbDBjeUJoY3lCclpXeDJhVzRuTEFvZ0lDQWdKMlpsZHlCTElDYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJR3RsYkhacGJpY3NDaUFnSUNBbmMyVjJaWEpoYkNCTElDYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJR3RsYkhacGJpY3NDaUFnSUNBbmRHaHZkWE5oYm1SeklHOW1JRXN1SnpvZ0owTnZibk5wWkdWeUlITndaV3hzYVc1bklHOTFjaUIwYUdVZ2RXNXBkSE1nWVhNZ2EyVnNkbWx1Snl3S0lDQWdJQ2RvZFc1a2NtVmtjeUJ2WmlCTExpYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJR3RsYkhacGJpY3NDaUFnSUNBbmRHVnVjeUJ2WmlCTExpYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJR3RsYkhacGJpY3NDaUFnSUNBblptVjNJRXN1SnpvZ0owTnZibk5wWkdWeUlITndaV3hzYVc1bklHOTFjaUIwYUdVZ2RXNXBkSE1nWVhNZ2EyVnNkbWx1Snl3S0lDQWdJQ2R6WlhabGNtRnNJRXN1SnpvZ0owTnZibk5wWkdWeUlITndaV3hzYVc1bklHOTFjaUIwYUdVZ2RXNXBkSE1nWVhNZ2EyVnNkbWx1Snl3S0lDQWdJQ2QwYUc5MWMyRnVaSE1nYjJZZ3dyVnRKem9nSjBOdmJuTnBaR1Z5SUhOd1pXeHNhVzVuSUc5MWRDQjBhR1VnZFc1cGRITWdZWE1nYldsamNtOXVjeWNzQ2lBZ0lDQW5hSFZ1WkhKbFpITWdiMllnd3JWdEp6b2dKME52Ym5OcFpHVnlJSE53Wld4c2FXNW5JRzkxZENCMGFHVWdkVzVwZEhNZ1lYTWdiV2xqY205dWN5Y3NDaUFnSUNBbmRHVnVjeUJ2WmlEQ3RXMG5PaUFuUTI5dWMybGtaWElnYzNCbGJHeHBibWNnYjNWMElIUm9aU0IxYm1sMGN5QmhjeUJ0YVdOeWIyNXpKeXdLSUNBZ0lDZG1aWGNnd3JWdEp6b2dKME52Ym5OcFpHVnlJSE53Wld4c2FXNW5JRzkxZENCMGFHVWdkVzVwZEhNZ1lYTWdiV2xqY205dWN5Y3NDaUFnSUNBbmMyVjJaWEpoYkNEQ3RXMG5PaUFuUTI5dWMybGtaWElnYzNCbGJHeHBibWNnYjNWeUlIUm9aU0IxYm1sMGN5QmhjeUJ0YVdOeWIyNXpKeXdLSUNBZ0lDZDBhRzkxYzJGdVpITWdiMllnYm0wbk9pQW5RMjl1YzJsa1pYSWdjM0JsYkd4cGJtY2diM1Z5SUhSb1pTQjFibWwwY3lCaGN5QnVZVzV2YldWMFpYSnpJR2x1YzNSbFlXUWdiMllnYm0wbkxBb2dJQ0FnSjJoMWJtUnlaV1J6SUc5bUlHNXRKem9nSjBOdmJuTnBaR1Z5SUhOd1pXeHNhVzVuSUc5MWNpQjBhR1VnZFc1cGRITWdZWE1nYm1GdWIyMWxkR1Z5Y3lCcGJuTjBaV0ZrSUc5bUlHNXRKeXdLSUNBZ0lDZDBaVzV6SUc5bUlHNXRKem9nSjBOdmJuTnBaR1Z5SUhOd1pXeHNhVzVuSUc5MWNpQjBhR1VnZFc1cGRITWdZWE1nYm1GdWIyMWxkR1Z5Y3lCcGJuTjBaV0ZrSUc5bUlHNXRKeXdLSUNBZ0lDZG1aWGNnYm0wbk9pQW5RMjl1YzJsa1pYSWdjM0JsYkd4cGJtY2diM1Z5SUhSb1pTQjFibWwwY3lCaGN5QnVZVzV2YldWMFpYSnpJR2x1YzNSbFlXUWdiMllnYlcwbkxBb2dJQ0FnSjNObGRtVnlZV3dnYm0wbk9pQW5RMjl1YzJsa1pYSWdjM0JsYkd4cGJtY2diM1Z5SUhSb1pTQjFibWwwY3lCaGN5QnVZVzV2YldWMFpYSnpJR2x1YzNSbFlXUWdiMllnYm0wbkxBb2dJQ0FnSjNSb2IzVnpZVzVrY3lCdlppQnRiU2M2SUNkRGIyNXphV1JsY2lCemNHVnNiR2x1WnlCdmRYSWdkR2hsSUhWdWFYUnpJR0Z6SUcxcGJHeHBiV1YwWlhKeklHbHVjM1JsWVdRZ2IyWWdiVzBuTEFvZ0lDQWdKMmgxYm1SeVpXUnpJRzltSUcxdEp6b2dKME52Ym5OcFpHVnlJSE53Wld4c2FXNW5JRzkxY2lCMGFHVWdkVzVwZEhNZ1lYTWdiV2xzYkdsdFpYUmxjbk1nYVc1emRHVmhaQ0J2WmlCdWJTY3NDaUFnSUNBbmRHVnVjeUJ2WmlCdGJTYzZJQ2REYjI1emFXUmxjaUJ6Y0dWc2JHbHVaeUJ2ZFhJZ2RHaGxJSFZ1YVhSeklHRnpJRzFwYkd4cGJXVjBaWEp6SUdsdWMzUmxZV1FnYjJZZ2JXMG5MQW9nSUNBZ0oyWmxkeUJ0YlNjNklDZERiMjV6YVdSbGNpQnpjR1ZzYkdsdVp5QnZkWElnZEdobElIVnVhWFJ6SUdGeklHMXBiR3hwYldWMFpYSnpJR2x1YzNSbFlXUWdiMllnYlcwbkxBb2dJQ0FnSjNObGRtVnlZV3dnYlcwbk9pQW5RMjl1YzJsa1pYSWdjM0JsYkd4cGJtY2diM1Z5SUhSb1pTQjFibWwwY3lCaGN5QnRhV3hzYVcxbGRHVnljeUJwYm5OMFpXRmtJRzltSUcxdEp5d0tDaUFnSUNBaklFNTFiV0psY25NZ2FXNXpkR1ZoWkNCdlppQjNiM0prY3dvS0lDQWdJQ2N4TURCeklHOW1JQ2M2SUNkWGNtbDBaU0FpYUhWdVpISmxaSE1nYjJZaUlHbHVjM1JsWVdRZ2IyWWdJakV3TUhNZ2IyWWdJaWNzQ2lBZ0lDQW5NVEJ6SUc5bUlDYzZJQ2RYY21sMFpTQWlkR1Z1Y3lCdlppSWdhVzV6ZEdWaFpDQnZaaUFpTVRBd2N5QnZaaUFpSnl3S0lDQWdJQ2N4TURBd2N5QnZaaUFuT2lBblYzSnBkR1VnSW5Sb2IzVnpZVzVrY3lCdlppSWdhVzV6ZEdWaFpDQnZaaUFpTVRBd2N5QnZaaUFpSnl3S0lDQWdJQ2N4TURBd01EQXdjeUJ2WmlBbk9pQW5WM0pwZEdVZ0ltMXBiR3hwYjI1eklHOW1JaUJwYm5OMFpXRmtJRzltSUNJeE1EQnpJRzltSUNJbkxBb0tJQ0FnSUNNZ1VHRnpjMmwyWlNCMmIybGpaUW9LSUNBZ0lDZG9ZWE1nWW1WbGJpQnZZbk5sY25abFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW1oaGN5QmlaV1Z1SUc5aWMyVnlkbVZrSWlCcGJpQmhZM1JwZG1VZ2RtOXBZMlVzSUdVdVp5NGdJbmRsSUc5aWMyVnlkbVZrSUhSb1lYUWlMaWNzQ2lBZ0lDQW5hR0YyWlNCaVpXVnVJRzlpYzJWeWRtVmtKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjMlZ1ZEdWdVkyVWdkMmwwYUNBaWFHRjJaU0JpWldWdUlHOWljMlZ5ZG1Wa0lpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5kbElHOWljMlZ5ZG1Wa0lIUm9ZWFFpTGljc0NpQWdJQ0FuYUdGMlpTQmlaV1Z1SUdSbGJXOXVjM1J5WVhSbFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW1oaGRtVWdZbVZsYmlCa1pXMXZibk4wY21GMFpXUWlJR2x1SUdGamRHbDJaU0IyYjJsalpTd2daUzVuTGlBaWQyVWdaR1Z0YjI1emRISmhkR1ZrSUhSb1lYUWlMaWNzQ2lBZ0lDQW5hR0Z6SUdKbFpXNGdaR1Z0YjI1emRISmhkR1ZrSnpvZ0owTnZibk5wWkdWeUlISmxkM0pwZEdsdVp5QjBhR1VnYzJWdWRHVnVZMlVnZDJsMGFDQWlhR0Z6SUdKbFpXNGdaR1Z0YjI1emRISmhkR1ZrSWlCcGJpQmhZM1JwZG1VZ2RtOXBZMlVzSUdVdVp5NGdJbmRsSUdSbGJXOXVjM1J5WVhSbFpDQjBhR0YwSWk0bkxBb2dJQ0FnSjJoaGN5QmlaV1Z1SUhOb2IzZHVKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjMlZ1ZEdWdVkyVWdkMmwwYUNBaWFHRnpJR0psWlc0Z2MyaHZkMjRpSUdsdUlHRmpkR2wyWlNCMmIybGpaU3dnWlM1bkxpQWlkMlVnYzJodmQyVmtJSFJvWVhRaUxpY3NDaUFnSUNBbmFHRjJaU0JpWldWdUlITm9iM2R1SnpvZ0owTnZibk5wWkdWeUlISmxkM0pwZEdsdVp5QjBhR1VnYzJWdWRHVnVZMlVnZDJsMGFDQWlhR0YyWlNCaVpXVnVJSE5vYjNkdUlpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5kbElITm9iM2RsWkNCMGFHRjBJaTRuTEFvZ0lDQWdKMmhoZG1VZ1ltVmxiaUJwYm5abGMzUnBaMkYwWldRbk9pQW5RMjl1YzJsa1pYSWdjbVYzY21sMGFXNW5JSFJvWlNCelpXNTBaVzVqWlNCM2FYUm9JQ0pvWVhabElHSmxaVzRnYVc1MlpYTjBhV2RoZEdWa0lpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5KbGMyVmhjbU5vWlhKeklHbHVkbVZ6ZEdsbllYUmxaQ0IwYUdVZ1pXWm1aV04wSWk0bkxBb2dJQ0FnSjJoaGN5QmlaV1Z1SUdsdWRtVnpkR2xuWVhSbFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW1oaGN5QmlaV1Z1SUdsdWRtVnpkR2xuWVhSbFpDSWdhVzRnWVdOMGFYWmxJSFp2YVdObExDQmxMbWN1SUNKeVpYTmxZWEpqYUdWeWN5QnBiblpsYzNScFoyRjBaV1FnZEdobElHVm1abVZqZENJdUp5d0tJQ0FnSUNkb1lYWmxJR0psWlc0Z2MzUjFaR2xsWkNjNklDZERiMjV6YVdSbGNpQnlaWGR5YVhScGJtY2dkR2hsSUhObGJuUmxibU5sSUhkcGRHZ2dJbWhoZG1VZ1ltVmxiaUJ6ZEhWa2FXVmtJaUJwYmlCaFkzUnBkbVVnZG05cFkyVXNJR1V1Wnk0Z0luSmxjMlZoY21Ob1pYSnpJSE4wZFdScFpXUWdkR2hsSUdWbVptVmpkQ0l1Snl3S0lDQWdJQ2RvWVhNZ1ltVmxiaUJ6ZEhWa2FXVmtKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjMlZ1ZEdWdVkyVWdkMmwwYUNBaWFHRnpJR0psWlc0Z2MzUjFaR2xsWkNJZ2FXNGdZV04wYVhabElIWnZhV05sTENCbExtY3VJQ0p5WlhObFlYSmphR1Z5Y3lCemRIVmthV1ZrSUhSb1pTQmxabVpsWTNRaUxpY3NDaUFnSUNBbmQyRnpJRzlpYzJWeWRtVmtKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjMlZ1ZEdWdVkyVWdkMmwwYUNBaWQyRnpJRzlpYzJWeWRtVmtJaUJwYmlCaFkzUnBkbVVnZG05cFkyVXNJR1V1Wnk0Z0luZGxJRzlpYzJWeWRtVmtJSFJvWVhRaUxpY3NDaUFnSUNBbmQyVnlaU0J2WW5ObGNuWmxaQ2M2SUNkRGIyNXphV1JsY2lCeVpYZHlhWFJwYm1jZ2RHaGxJSE5sYm5SbGJtTmxJSGRwZEdnZ0luZGxjbVVnYjJKelpYSjJaV1FpSUdsdUlHRmpkR2wyWlNCMmIybGpaU3dnWlM1bkxpQWlkMlVnYjJKelpYSjJaV1FnZEdoaGRDSXVKeXdLSUNBZ0lDZDNaWEpsSUdSbGJXOXVjM1J5WVhSbFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW5kbGNtVWdaR1Z0YjI1emRISmhkR1ZrSWlCcGJpQmhZM1JwZG1VZ2RtOXBZMlVzSUdVdVp5NGdJbmRsSUdSbGJXOXVjM1J5WVhSbFpDQjBhR0YwSWk0bkxBb2dJQ0FnSjNkaGN5QmtaVzF2Ym5OMGNtRjBaV1FuT2lBblEyOXVjMmxrWlhJZ2NtVjNjbWwwYVc1bklIUm9aU0J6Wlc1MFpXNWpaU0IzYVhSb0lDSjNZWE1nWkdWdGIyNXpkSEpoZEdWa0lpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5kbElHUmxiVzl1YzNSeVlYUmxaQ0IwYUdGMElpNG5MQW9nSUNBZ0ozZGhjeUJ6YUc5M2JpYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW5kaGN5QnphRzkzYmlJZ2FXNGdZV04wYVhabElIWnZhV05sTENCbExtY3VJQ0ozWlNCemFHOTNaV1FnZEdoaGRDSXVKeXdLSUNBZ0lDZDNaWEpsSUhOb2IzZHVKem9nSjBOdmJuTnBaR1Z5SUhKbGQzSnBkR2x1WnlCMGFHVWdjMlZ1ZEdWdVkyVWdkMmwwYUNBaWQyVnlaU0J6YUc5M2JpSWdhVzRnWVdOMGFYWmxJSFp2YVdObExDQmxMbWN1SUNKM1pTQnphRzkzWldRZ2RHaGhkQ0l1Snl3S0lDQWdJQ2QzWlhKbElHbHVkbVZ6ZEdsbllYUmxaQ2M2SUNkRGIyNXphV1JsY2lCeVpYZHlhWFJwYm1jZ2RHaGxJSE5sYm5SbGJtTmxJSGRwZEdnZ0luZGxjbVVnYVc1MlpYTjBhV2RoZEdWa0lpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5KbGMyVmhjbU5vWlhKeklHbHVkbVZ6ZEdsbllYUmxaQ0IwYUdVZ1pXWm1aV04wSWk0bkxBb2dJQ0FnSjNkaGN5QnBiblpsYzNScFoyRjBaV1FuT2lBblEyOXVjMmxrWlhJZ2NtVjNjbWwwYVc1bklIUm9aU0J6Wlc1MFpXNWpaU0IzYVhSb0lDSjNZWE1nYVc1MlpYTjBhV2RoZEdWa0lpQnBiaUJoWTNScGRtVWdkbTlwWTJVc0lHVXVaeTRnSW5KbGMyVmhjbU5vWlhKeklHbHVkbVZ6ZEdsbllYUmxaQ0IwYUdVZ1pXWm1aV04wSWk0bkxBb2dJQ0FnSjNkbGNtVWdjM1IxWkdsbFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW5kbGNtVWdjM1IxWkdsbFpDSWdhVzRnWVdOMGFYWmxJSFp2YVdObExDQmxMbWN1SUNKeVpYTmxZWEpqYUdWeWN5QnpkSFZrYVdWa0lIUm9aU0JsWm1abFkzUWlMaWNzQ2lBZ0lDQW5kMkZ6SUhOMGRXUnBaV1FuT2lBblEyOXVjMmxrWlhJZ2NtVjNjbWwwYVc1bklIUm9aU0J6Wlc1MFpXNWpaU0IzYVhSb0lDSjNZWE1nYzNSMVpHbGxaQ0lnYVc0Z1lXTjBhWFpsSUhadmFXTmxMQ0JsTG1jdUlDSnlaWE5sWVhKamFHVnljeUJ6ZEhWa2FXVmtJSFJvWlNCbFptWmxZM1FpTGljc0NpQWdJQ0FuZDJGeklHVjJZV3gxWVhSbFpDYzZJQ2REYjI1emFXUmxjaUJ5WlhkeWFYUnBibWNnZEdobElITmxiblJsYm1ObElIZHBkR2dnSW5kaGN5QmxkbUZzZFdGMFpXUWlJR2x1SUdGamRHbDJaU0IyYjJsalpTd2daUzVuTGlBaWNtVnpaV0Z5WTJobGNuTWdaWFpoYkhWaGRHVmtJQzR1TGlJdUp5d0tJQ0FnSUNkM1pYSmxJR1YyWVd4MVlYUmxaQ2M2SUNkRGIyNXphV1JsY2lCeVpYZHlhWFJwYm1jZ2RHaGxJSE5sYm5SbGJtTmxJSGRwZEdnZ0luZGhjeUJsZG1Gc2RXRjBaV1FpSUdsdUlHRmpkR2wyWlNCMmIybGpaU3dnWlM1bkxpQWljbVZ6WldGeVkyaGxjbk1nWlhaaGJIVmhkR1ZrSUM0dUxpSXVKeXdLQ2lBZ0lDQWpJRWx1WVhCd2NtOXdjbWxoZEdVZ2JHRnVaM1ZoWjJVS0NpQWdJQ0FpYVhRbmN5STZJQ2RKWmlCNWIzVWdiV1ZoYmlBaWFYUWdhWE1pTENCcGRDQnBjeUJpWlhSMFpYSWdhblZ6ZENCMGJ5QjNjbWwwWlNBaWFYUWdhWE1pTGlCUGRHaGxjbmRwYzJVc0lHbDBJRzFwWjJoMElHNWxaV1FnZEc4Z1ltVWdZMjl5Y21WamRHVmtJR0Z6SUNKcGRITWlMQ0JsTG1jdUlDSnRZWFJsY21saGJDQmhibVFnYVhSeklIQnliM0JsY25ScFpYTWlMaWNzQ2lBZ0lDQWlhWFJnY3lJNklDZEpaaUI1YjNVZ2JXVmhiaUFpYVhRZ2FYTWlMQ0JwZENCcGN5QmlaWFIwWlhJZ2FuVnpkQ0IwYnlCM2NtbDBaU0FpYVhRZ2FYTWlMaUJQZEdobGNuZHBjMlVzSUdsMElHMXBaMmgwSUc1bFpXUWdkRzhnWW1VZ1kyOXljbVZqZEdWa0lHRnpJQ0pwZEhNaUxDQmxMbWN1SUNKdFlYUmxjbWxoYkNCaGJtUWdhWFJ6SUhCeWIzQmxjblJwWlhNaUxpY3NDaUFnSUNBbmEybHVaQ0J2WmljNklDZERiMjV6YVdSbGNpQnJhVzVrSUc5bUlISmxjR3hoWTJsdVp5QWlhMmx1WkNCdlppSWdkMmwwYUNBaWNtRjBhR1Z5SWlCdmNpQnJhVzVrSUc5bUlHRjJiMmxrYVc1bklHbDBJR052YlhCc1pYUmxiSGt1Snl3S0lDQWdJQ2R3Y21WMGRIa2diWFZqYUNjNklDZERiMjV6YVdSbGNpQndjbVYwZEhrZ2JYVmphQ0JrWld4bGRHbHVaeUFpY0hKbGRIUjVJRzExWTJnaUxpY3NDaUFnSUNBbklHRnVaQ0J6YnlCdmJpNG5PaUFuVkhKNUlIUnZJSEpsZDNKcGRHVWdkMmwwYUc5MWRDQWlMaTR1WVc1a0lITnZJRzl1SWk0Z1NYUWdiV2xuYUhRZ1ltVWdkRzl2SUdsdVptOXliV0ZzSUdGdVpDQjJZV2QxWlNCcFppQnZkR2hsY2lCcGRHVnRjeUJwYmlCMGFHVWdiR2x6ZENCaGNtVWdkVzVqYkdWaGNpNGdSV2wwYUdWeUlHeHBjM1FnWVd4c0lHbHRjRzl5ZEdGdWRDQnBkR1Z0Y3lCdmNpQm5aVzVsY21Gc2FYcGxJSFJvWlNCeVpXMWhhVzVwYm1jc0lHWnZjaUJsZUdGdGNHeGxJQ0pXYjNsaFoyVnlJR1pzWlhjZ2NHRnpkQ0JOWVhKekxDQktkWEJwZEdWeUxDQmhibVFnYjNSb1pYSWdjR3hoYm1WMGN5NG5MQW9nSUNBZ0p5QmhibVFnYzI4Z1ptOXlkR2duT2lBblZISjVJSFJ2SUhKbGQzSnBkR1VnZDJsMGFHOTFkQ0FpTGk0dVlXNWtJSE52SUc5dUlpNGdTWFFnYldsbmFIUWdZbVVnZEc5dklHbHVabTl5YldGc0lHRnVaQ0IyWVdkMVpTQnBaaUJ2ZEdobGNpQnBkR1Z0Y3lCcGJpQjBhR1VnYkdsemRDQmhjbVVnZFc1amJHVmhjaTRnUldsMGFHVnlJR3hwYzNRZ1lXeHNJR2x0Y0c5eWRHRnVkQ0JwZEdWdGN5QnZjaUJuWlc1bGNtRnNhWHBsSUhSb1pTQnlaVzFoYVc1cGJtY3NJR1p2Y2lCbGVHRnRjR3hsSUNKV2IzbGhaMlZ5SUdac1pYY2djR0Z6ZENCTllYSnpMQ0JLZFhCcGRHVnlMQ0JoYm1RZ2IzUm9aWElnY0d4aGJtVjBjeTRuTEFvZ0lDQWdKM052Y25RZ2IyWW5PaUFuUTI5dWMybGtaWElnYzI5eWRDQnZaaUJ5WlhCc1lXTnBibWNnSW5OdmNuUWdiMllpSUhkcGRHZ2dJbkpoZEdobGNpSWdiM0lnYzI5eWRDQnZaaUJoZG05cFpHbHVaeUJwZENCamIyMXdiR1YwWld4NUxpY3NDaUFnSUNBbklHeGxjM01nSnpvZ0oxWmxjbWxtZVNCMGFHRjBJQ0pzWlhOeklpQnBjeUJ1YjNRZ2JXbHpkWE5sWkNCbWIzSWdJbVpsZDJWeUlpQW9aUzVuTGlBaWJHVnpjeUIwYVcxbElpd2dZblYwSUNKbVpYZGxjaUJ6WVcxd2JHVnpJaWtnYjNJZ1kyRnVibTkwSUdKbElISmxjR3hoWTJWa0lIZHBkR2dnWVNCdGIzSmxJSEJ5WldOcGMyVWdkMjl5WkNCc2FXdGxJQ0owYUdsdWJtVnlJaXdnSW5Ob2IzSjBaWElpTENBaWQyVmhhMlZ5SWlCbGRHTXVKeXdLSUNBZ0lDY2dkbVZ5ZVNBbk9pQW5RMjl1YzJsa1pYSWdhV1lnZEdobElIZHZjbVFnSW5abGNua2lJR2x6SUhabGNua2dkbVZ5ZVNCdVpXTmxjM05oY25rdUlFbG1JSFJvWlNCbGJYQm9ZWE5wY3lCcGN5QnlaWEYxYVhKbFpDd2dkWE5sSUhkdmNtUnpJSE4wY205dVp5QnBiaUIwYUdWdGMyVnNkbVZ6SUc5eUlIRjFZVzUwYVdaNUlIUm9aU0J6ZEdGMFpXMWxiblF1Snl3S0lDQWdJQ2NnZEdobGMyVWdaR0Y1Y3k0bk9pQW5WR2hsYzJVZ1pHRjVjeUIzWlNCamIyNXphV1JsY2lBaWRHaGxjMlVnWkdGNWN5SWdkRzl2SUdsdVptOXliV0ZzTGlCRGIyNXphV1JsY2lCdmJXbDBkR2x1WnlCdmNpQjFjMmx1WnlBaWNtVmpaVzUwYkhraUxpY3NDaUFnSUNBbmRtbGxkM0J2YVc1MEp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUIzYVhSb0lDSndiMmx1ZENCdlppQjJhV1YzSWk0bkxBb2dJQ0FnSW1SdmJpZDBJam9nSWsxdmMzUWdZV05oWkdWdGFXTWdhbTkxY201aGJITWdjSEpsWm1WeUlHUnZJRzV2ZENCcGJuTjBaV0ZrSUc5bUlHUnZiaWQwTGlJc0NpQWdJQ0FpYVhOdUozUWlPaUFpVFc5emRDQmhZMkZrWlcxcFl5QnFiM1Z5Ym1Gc2N5QndjbVZtWlhJZ2FYTWdibTkwSUdsdWMzUmxZV1FnYjJZZ2FYTnVKM1F1SWl3S0lDQWdJQ0ozWVhOdUozUWlPaUFpVFc5emRDQmhZMkZrWlcxcFl5QnFiM1Z5Ym1Gc2N5QndjbVZtWlhJZ2QyRnpJRzV2ZENCcGJuTjBaV0ZrSUc5bUlIZGhjMjRuZEM0aUxBb2dJQ0FnSW1SdlpYTnVKM1FpT2lBaVRXOXpkQ0JoWTJGa1pXMXBZeUJxYjNWeWJtRnNjeUJ3Y21WbVpYSWdaRzlsY3lCdWIzUWdhVzV6ZEdWaFpDQnZaaUJrYjJWemJpZDBMaUlzQ2lBZ0lDQWlkMjkxYkdSdUozUWlPaUFpVFc5emRDQmhZMkZrWlcxcFl5QnFiM1Z5Ym1Gc2N5QndjbVZtWlhJZ2QyOTFiR1FnYm05MElHbHVjM1JsWVdRZ2IyWWdkMjkxYkdSdUozUXVJaXdLSUNBZ0lDSnphRzkxYkdSdUozUWlPaUFpVFc5emRDQmhZMkZrWlcxcFl5QnFiM1Z5Ym1Gc2N5QndjbVZtWlhJZ2MyaHZkV3hrSUc1dmRDQnBibk4wWldGa0lHOW1JSE5vYjNWc1pHNG5kQzRpTEFvZ0lDQWdKMmwwSUdsekp6b2dKMEYyYjJsa0lHTnZibk4wY25WamRHbHZibk1nZDJsMGFDQWlhWFFnYVhNaUlITnBibU5sSUhSb1pYa2diMkp6WTNWeVpTQjBhR1VnYldGcGJpQnpkV0pxWldOMElHRnVaQ0JoWTNScGIyNGdiMllnWVNCelpXNTBaVzVqWlM0bkxBb2dJQ0FnSjNSb1pYSmxJR2x6SnpvZ0owRjJiMmxrSUdOdmJuTjBjblZqZEdsdmJuTWdkMmwwYUNBaWRHaGxjbVVnYVhNaUlITnBibU5sSUhSb1pYa2diMkp6WTNWeVpTQjBhR1VnYldGcGJpQnpkV0pxWldOMElHRnVaQ0JoWTNScGIyNGdiMllnWVNCelpXNTBaVzVqWlM0bkxBb2dJQ0FnSjNSb1pYSmxJR0Z5WlNjNklDZEJkbTlwWkNCamIyNXpkSEoxWTNScGIyNXpJSGRwZEdnZ0luUm9aWEpsSUdGeVpTSWdjMmx1WTJVZ2RHaGxlU0J2WW5OamRYSmxJSFJvWlNCdFlXbHVJSE4xWW1wbFkzUWdZVzVrSUdGamRHbHZiaUJ2WmlCaElITmxiblJsYm1ObExpY3NDaUFnSUNBblNYUWdhWE1uT2lBblFYWnZhV1FnWTI5dWMzUnlkV04wYVc5dWN5QjNhWFJvSUNKSmRDQnBjeUlnYzJsdVkyVWdkR2hsZVNCdlluTmpkWEpsSUhSb1pTQnRZV2x1SUhOMVltcGxZM1FnWVc1a0lHRmpkR2x2YmlCdlppQmhJSE5sYm5SbGJtTmxMaWNzQ2lBZ0lDQW5WR2hsY21VZ2FYTW5PaUFuUVhadmFXUWdZMjl1YzNSeWRXTjBhVzl1Y3lCM2FYUm9JQ0pVYUdWeVpTQnBjeUlnYzJsdVkyVWdkR2hsZVNCdlluTmpkWEpsSUhSb1pTQnRZV2x1SUhOMVltcGxZM1FnWVc1a0lHRmpkR2x2YmlCdlppQmhJSE5sYm5SbGJtTmxMaWNzQ2lBZ0lDQW5WR2hsY21VZ1lYSmxKem9nSjBGMmIybGtJR052Ym5OMGNuVmpkR2x2Ym5NZ2QybDBhQ0FpVkdobGNtVWdZWEpsSWlCemFXNWpaU0IwYUdWNUlHOWljMk4xY21VZ2RHaGxJRzFoYVc0Z2MzVmlhbVZqZENCaGJtUWdZV04wYVc5dUlHOW1JR0VnYzJWdWRHVnVZMlV1Snl3S0lDQWdJQ2RCWTNSMVlXeHNlU2M2SUNkVWFHVWdkMjl5WkNBaVFXTjBkV0ZzYkhraUlHMXBaMmgwSUdGamRIVmhiR3g1SUdKbElIVnVibVZqWlhOellYSjVMaWNzQ2lBZ0lDQW5ZV04wZFdGc2JIa25PaUFuVkdobElIZHZjbVFnSW1GamRIVmhiR3g1SWlCdGFXZG9kQ0JoWTNSMVlXeHNlU0JpWlNCMWJtNWxZMlZ6YzJGeWVTNG5MQW9nSUNBZ0ozSmxZV3hzZVNjNklDZFVhR1VnZDI5eVpDQWljbVZoYkd4NUlpQnRhV2RvZENCaVpTQnlaV0ZzYkhrZ2RXNXVaV05sYzNOaGNua3VKeXdLSUNBZ0lDZDVaV0Z5Y3ljNklDZEpibk4wWldGa0lHOW1JQ0o1WldGeWN5SXNJR2wwSUcxcFoyaDBJR0psSUdKbGRIUmxjaUIwYnlCbmFYWmxJSFJvWlNCbGVHRmpkQ0I1WldGeUlHOW1JSFJvWlNCbGRtVnVkQzRuTEFvZ0lDQWdKMkVnWW1sMElDYzZJQ2REYjI1emFXUmxjaUJ5WlhCc1lXTnBibWNnYVc1bWIzSnRZV3dnSW1FZ1ltbDBJaUIzYVhSb0lHRWdZbWwwSUcxdmNtVWdabTl5YldGc0lDSnpiMjFsZDJoaGRDSWdiM0lnY21WdGIzWnBibWNnYVhRZ1kyOXRjR3hsZEdWc2VTNG5MQW9nSUNBZ0oyRWdiRzkwSUc5bUp6b2dKME52Ym5OcFpHVnlJSEpsY0d4aFkybHVaeUFpWVNCc2IzUWdiMllpSUhkcGRHZ2dJbTFoYm5raUlHOXlJQ0p6WlhabGNtRnNJaXdnYjNJZ2FuVnpkQ0JuYVhabElIUm9aU0JsZUdGamRDQnVkVzFpWlhJdUp5d0tJQ0FnSUNkQklHeHZkQ0J2WmljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJa0VnYkc5MElHOW1JaUIzYVhSb0lDSk5ZVzU1SWlCdmNpQWlVMlYyWlhKaGJDSXNJRzl5SUdwMWMzUWdaMmwyWlNCMGFHVWdaWGhoWTNRZ2JuVnRZbVZ5TGljc0NpQWdJQ0FuV1c5MUlDYzZJQ2RWYzJsdVp5QWlXVzkxSWlCdGFXZG9kQ0JpWlNCcGJtRndjSEp2Y0hKcFlYUmxJR2x1SUdGallXUmxiV2xqSUhkeWFYUnBibWN1SUVOdmJuTnBaR1Z5SUhWemFXNW5JQ0pQYm1VaUxDQmxMbWN1SUNKUGJtVWdZMkZ1SUhObFpTNHVMaUl1Snl3S0lDQWdJQ2Q1YjNVZ0p6b2dKMVZ6YVc1bklDSjViM1VpSUcxcFoyaDBJR0psSUdsdVlYQndjbTl3Y21saGRHVWdhVzRnWVdOaFpHVnRhV01nZDNKcGRHbHVaeTRnUTI5dWMybGtaWElnZFhOcGJtY2dJazl1WlNJc0lHVXVaeTRnSWs5dVpTQmpZVzRnYzJWbExpNHVJaTRuTEFvZ0lDQWdKMEZ1WkNBbk9pQW5TVzV6ZEdWaFpDQnZaaUJ6ZEdGeWRHbHVaeUIwYUdseklITmxiblJsYm1ObElIZHBkR2dnSWtGdVpDSWdkSEo1SUdwMWMzUWdjbVZ0YjNacGJtY2dhWFF1Snl3S0lDQWdJQ2NnZEdocGJtY25PaUFuVkdobElIZHZjbVFnSW5Sb2FXNW5JaUJwY3lCeVlYUm9aWElnZG1GbmRXVXNJSFJ5ZVNCMGJ5QmlaU0J0YjNKbElITndaV05wWm1sakxpY3NDaUFnSUNBblJHVmhjaUJGWkdsMGIzSW5PaUFuUTI5dWMybGtaWElnZEc4Z1lXUmtjbVZ6Y3lCNWIzVnlJR1JsWVhJZ1pXUnBkRzl5SUdKNUlIUm9aU0J5WldGc0lHNWhiV1V1Snl3S0lDQWdJQ2RFWldGeUlHVmthWFJ2Y2ljNklDZERiMjV6YVdSbGNpQjBieUJoWkdSeVpYTnpJSGx2ZFhJZ1pHVmhjaUJsWkdsMGIzSWdZbmtnZEdobElISmxZV3dnYm1GdFpTNG5MQW9nSUNBZ0owWnBjbk4wYkhrbk9pQW5TVzRnYlc5a1pYSnVJRVZ1WjJ4cGMyZ2dJa1pwY25OMElpQnBjeUJ3Y21WbVpYSnlaV1FnZEc4Z0lrWnBjbk4wYkhraUxpY3NDaUFnSUNBblptbHljM1JzZVNjNklDZEpiaUJ0YjJSbGNtNGdSVzVuYkdsemFDQWlabWx5YzNRaUlHbHpJSEJ5WldabGNuSmxaQ0IwYnlBaVptbHljM1JzZVNJdUp5d0tJQ0FnSUNkVFpXTnZibVJzZVNjNklDZEpiaUJ0YjJSbGNtNGdSVzVuYkdsemFDQWlVMlZqYjI1a0lpQnBjeUJ3Y21WbVpYSnlaV1FnZEc4Z0lsTmxZMjl1Wkd4NUlpNG5MQW9nSUNBZ0ozTmxZMjl1Wkd4NUp6b2dKMGx1SUcxdlpHVnliaUJGYm1kc2FYTm9JQ0p6WldOdmJtUWlJR2x6SUhCeVpXWmxjbkpsWkNCMGJ5QWljMlZqYjI1a2JIa2lMaWNzQ2lBZ0lDQW5aR2x0YVc1cGMyZ2dKem9nSjBsbUlHSjVJQ0prYVcxcGJtbHphQ0lnZVc5MUlHMWxZVzRnZEdoaGRDQnpiMjFsZEdocGJtY2dhWE1nWkdWamNtVmhjMmx1Wnl3Z1kyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklIZHBkR2dnSW1SbFkzSmxZWE5sSWk0bkxBb2dJQ0FnSjJScGJXbHVhWE5vYVc1bklDYzZJQ2RKWmlCaWVTQWlaR2x0YVc1cGMyaHBibWNpSUhsdmRTQnRaV0Z1SUhSb1lYUWdjMjl0WlhSb2FXNW5JR2x6SUdSbFkzSmxZWE5wYm1jc0lHTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QjNhWFJvSUNKa1pXTnlaV0Z6YVc1bklpNG5MQW9nSUNBZ0oyUnBiV2x1YVhOb1pXUWdKem9nSjBsbUlHSjVJQ0prYVcxcGJtbHphR1ZrSWlCNWIzVWdiV1ZoYmlCMGFHRjBJSE52YldWMGFHbHVaeUJwY3lCa1pXTnlaV0Z6YVc1bkxDQmpiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dkMmwwYUNBaVpHVmpjbVZoYzJWa0lpNG5MQW9nSUNBZ0oxTnZMQ2M2SUNkQ1pXZHBibTVwYm1jZ2QybDBhQ0FpVTI4aUlHMXBaMmgwSUhObFpXMGdjMjhnYVc1bWIzSnRZV3d1SUZOdkxDQmpiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dhWFFnZDJsMGFDQWlWR2gxY3l3aUxpY3NDaUFnSUNBblUyOGdKem9nSjBKbFoybHVibWx1WnlCM2FYUm9JQ0pUYnlJZ2JXbG5hSFFnYzJWbGJTQnpieUJwYm1admNtMWhiQzRnVTI4c0lHTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QnBkQ0IzYVhSb0lDSlVhSFZ6SWk0bkxBb2dJQ0FnSjBKNUlIUm9aU0IzWVhrbk9pQW5Ja0o1SUhSb1pTQjNZWGtpSUcxcFoyaDBJSE5sWlcwZ2RHOXZJR2x1Wm05eWJXRnNMaWNzQ2lBZ0lDQW5jM1JoYm1RZ1ptOXlKem9nSnlKemRHRnVaQ0JtYjNJaUlHMXBaMmgwSUhObFpXMGdkRzl2SUdsdVptOXliV0ZzTGlCRGIyNXphV1JsY2lBaWNtVndjbVZ6Wlc1MElpNG5MQW9nSUNBZ0ozTjBZVzVrY3lCbWIzSW5PaUFuSW5OMFlXNWtjeUJtYjNJaUlHMXBaMmgwSUhObFpXMGdkRzl2SUdsdVptOXliV0ZzTGlCRGIyNXphV1JsY2lBaWNtVndjbVZ6Wlc1MGN5SXVKeXdLSUNBZ0lDZHNaV0YyWlNCdmRYUW5PaUFuSW14bFlYWmxJRzkxZENJZ2JXbG5hSFFnYzJWbGJTQjBiMjhnYVc1bWIzSnRZV3d1SUVOdmJuTnBaR1Z5SUNKdmJXbDBJaTRuTEFvZ0lDQWdKM1JvYVc1cklHRmliM1YwSnpvZ0p5SjBhR2x1YXlCaFltOTFkQ0lnYldsbmFIUWdjMlZsYlNCMGIyOGdhVzVtYjNKdFlXd3VJRU52Ym5OcFpHVnlJQ0pqYjI1emFXUmxjaUl1Snl3S0lDQWdJQ2R3YjJsdWRDQnZkWFFuT2lBbkluQnZhVzUwSUc5MWRDSWdiV2xuYUhRZ2MyVmxiU0IwYjI4Z2FXNW1iM0p0WVd3dUlFTnZibk5wWkdWeUlDSnBibVJwWTJGMFpTSXVKeXdLQ2lBZ0lDQWpJRXhoZEdsdWFYTnRjd29LSUNBZ0lDZHlZV1JwZFhObGN5YzZJQ2RRY21WbVpYSmhZbXg1SUhKbGNHeGhZMlVnSW5KaFpHbDFjMlZ6SWlCM2FYUm9JQ0p5WVdScGFTSXVKeXdLSUNBZ0lDZGhlR2x6WlhNbk9pQW5RMjl5Y21WamRDQWlZWGhwYzJWeklpQmhjeUFpWVhobGN5SXVKeXdLSUNBZ0lDZDBhR1Z6YVhObGN5YzZJQ2REYjNKeVpXTjBJQ0owYUdWemFYTmxjeUlnWVhNZ0luUm9aWE5sY3lJdUp5d0tJQ0FnSUNkaVlXTjBaWEpwZFcxekp6b2dKME52Y25KbFkzUWdJbUpoWTNSbGNtbDFiWE1pSUdGeklDSmlZV04wWlhKcFlTSXVKeXdLSUNBZ0lDZGxjbkpoZEhWdGN5YzZJQ2REYjNKeVpXTjBJQ0psY25KaGRIVnRjeUlnWVhNZ0ltVnljbUYwWVNJdUp5d0tJQ0FnSUNkaGJtRnNlWE5wYzJWekp6b2dKME52Y25KbFkzUWdJbUZ1WVd4NWMybHpaWE1pSUdGeklDSmhibUZzZVhObGN5SXVKeXdLSUNBZ0lDZGhjSEJsYm1ScGVHVnpKem9nSjBOdmNuSmxZM1FnSW1Gd2NHVnVaR2w0WlhNaUlHRnpJQ0poY0hCbGJtUnBZMlZ6SWk0bkxBb2dJQ0FnSjJKaFkzUmxjbWwxYlhNbk9pQW5RMjl5Y21WamRDQWlZbUZqZEdWeWFYVnRjeUlnWVhNZ0ltSmhZM1JsY21saElpNG5MQW9nSUNBZ0ozTjBhVzExYkhWelpYTW5PaUFuUTI5eWNtVmpkQ0FpYzNScGJYVnNkWE5sY3lJZ1lYTWdJbk4wYVcxMWJHa2lMaWNzQ2lBZ0lDQW5kbTl5ZEdWNFpYTW5PaUFuUTI5eWNtVmpkQ0FpZG05eWRHVjRaWE1pSUdGeklDSjJiM0owYVdObGN5SXVKeXdLSUNBZ0lDZGhZaUJwYm1sMGFXOGdKem9nSjBOdmJuTnBaR1Z5SUdsbUlIbHZkWElnY21WaFpHVnljeUJyYm05M0lIUm9aU0JNWVhScGJpQmxlSEJ5WlhOemFXOXVjeUFpWVdJZ2FXNXBkR2x2SWk0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklIZHBkR2dnSW1aeWIyMGdabWx5YzNRZ2NISnBibU5wY0d4bGN5SWdiM0lnYzJsdGFXeGhjaTRuTEFvZ0lDQWdKMmx1SUhacGRISnZJQ2M2SUNkRGIyNXphV1JsY2lCcFppQjViM1Z5SUhKbFlXUmxjbk1nYTI1dmR5QjBhR1VnVEdGMGFXNGdaWGh3Y21WemMybHZibk1nSW1sdUlIWnBkSEp2SWlCdmNpQnBaaUIwYUdWeVpTQnRhV2RvZENCaVpTQmhJRzF2Y21VZ1kyOXRiVzl1SUhSbGNtMHVKeXdLSUNBZ0lDZHBiaUIyYVhadklDYzZJQ2REYjI1emFXUmxjaUJwWmlCNWIzVnlJSEpsWVdSbGNuTWdhMjV2ZHlCMGFHVWdUR0YwYVc0Z1pYaHdjbVZ6YzJsdmJuTWdJbWx1SUhacGRtOGlJRzl5SUdsbUlIUm9aWEpsSUcxcFoyaDBJR0psSUdFZ2JXOXlaU0JqYjIxdGIyNGdkR1Z5YlM0bkxBb2dJQ0FnSjJVdVp5NG5PaUFuUTI5dWMybGtaWElnYVdZZ2VXOTFjaUJ5WldGa1pYSnpJR3R1YjNjZ2RHaGxJRXhoZEdsdUlHVjRjSEpsYzNOcGIyNXpJQ0psTG1jdUlpNGdTWFFnYldsbmFIUWdZbVVnWW1WMGRHVnlJSFJ2SUhkeWFYUmxJQ0ptYjNJZ1pYaGhiWEJzWlNJdUp5d0tJQ0FnSUNkcExtVXVKem9nSjBOdmJuTnBaR1Z5SUdsbUlIbHZkWElnY21WaFpHVnljeUJyYm05M0lIUm9aU0JNWVhScGJpQmxlSEJ5WlhOemFXOXVjeUFpYVM1bExpSXVJRWwwSUcxcFoyaDBJR0psSUdKbGRIUmxjaUIwYnlCM2NtbDBaU0FpZEdoaGRDQnBjeUl1Snl3S0lDQWdJQ2RwYmlCemFXeHBZMjhnSnpvZ0owTnZibk5wWkdWeUlHbG1JSGx2ZFhJZ2NtVmhaR1Z5Y3lCcmJtOTNJSFJvWlNCTVlYUnBiaUJsZUhCeVpYTnphVzl1Y3lBaWFXNGdjMmxzYVdOdklpQnZjaUJwWmlCMGFHVnlaU0J0YVdkb2RDQmlaU0JoSUcxdmNtVWdZMjl0Ylc5dUlIUmxjbTB1Snl3S0lDQWdJQ2RwYmlCMWRHVnlieWM2SUNkRGIyNXphV1JsY2lCcFppQjViM1Z5SUhKbFlXUmxjbk1nYTI1dmR5QjBhR1VnVEdGMGFXNGdaWGh3Y21WemMybHZibk1nSW1sdUlIVjBaWEp2SWlCdmNpQnBaaUIwYUdWeVpTQnRhV2RvZENCaVpTQmhJRzF2Y21VZ1kyOXRiVzl1SUhSbGNtMHVKeXdLSUNBZ0lDZHBiaUJ6YVhSMUlDYzZJQ2REYjI1emFXUmxjaUJwWmlCNWIzVnlJSEpsWVdSbGNuTWdhMjV2ZHlCMGFHVWdUR0YwYVc0Z1pYaHdjbVZ6YzJsdmJuTWdJbWx1SUhOcGRIVWlJRzl5SUdsbUlIUm9aWEpsSUcxcFoyaDBJR0psSUdFZ2JXOXlaU0JqYjIxdGIyNGdkR1Z5YlM0bkxBb2dJQ0FnSjJWNElIWnBkbThnSnpvZ0owTnZibk5wWkdWeUlHbG1JSGx2ZFhJZ2NtVmhaR1Z5Y3lCcmJtOTNJSFJvWlNCTVlYUnBiaUJsZUhCeVpYTnphVzl1Y3lBaVpYZ2dkbWwyYnlJZ2IzSWdhV1lnZEdobGNtVWdiV2xuYUhRZ1ltVWdZU0J0YjNKbElHTnZiVzF2YmlCMFpYSnRMaWNzQ2lBZ0lDQW5kbk11SnpvZ0owTnZibk5wWkdWeUlHbG1JSGx2ZFhJZ2NtVmhaR1Z5Y3lCcmJtOTNJSFJvWlNCTVlYUnBiaUJsZUhCeVpYTnphVzl1Y3lBaWRuTXVJaTRnU1hRZ2JXbG5hSFFnWW1VZ1ltVjBkR1Z5SUhSdklISmxjR3hoWTJVZ2QybDBhQ0FpWVdkaGFXNXpkQ0lnYjNJZ0ltRnpJR0VnWm5WdVkzUnBiMjRnYjJZaUxpY3NDaUFnSUNBbllTNXJMbUV1SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWlZUzVyTG1FdUlpQjNhWFJvSUNKaGJITnZJR3R1YjNkdUlHRnpJaUJtYjNJZ1kyeGhjbWwwZVM0bkxBb2dJQ0FnSnlCaGEyRWdKem9nSjBOdmJuTnBaR1Z5SUhKbGNHeGhZMmx1WnlBaVlXdGhJaUIzYVhSb0lDSmhiSE52SUd0dWIzZHVJR0Z6SWlCbWIzSWdZMnhoY21sMGVTNG5MQW9nSUNBZ0p5QndMbUV1SnpvZ0owTnZibk5wWkdWeUlISmxjR3hoWTJsdVp5QWljQzVoTGlJZ2QybDBhQ0FpY0dWeUlIbGxZWElpSUdadmNpQmpiR0Z5YVhSNUxpY3NDaUFnSUNBbklHRmtJR2h2WXljNklDZERiMjV6YVdSbGNpQnlaWEJzWVdOcGJtY2dJbUZrSUdodll5SWdkMmwwYUNBaWFXMXdjbTkyYVhObFpDSWdabTl5SUdOc1lYSnBkSGt1Snl3S0NpQWdJQ0FqSUV4aGRHVjRJR0psYzNRZ2NISmhZM1JwWTJWekNnb2dJQ0FnSnlSY2JYVWtiU2M2SUNkWmIzVWdiV0Y1SUhKbGNHeGhZMlVnVEdGVVpWZ2daWGh3Y21WemMybHZiaUFpSkZ4dGRTUnRJaUIzYVhSb0lDSjdYRngwWlhoMGJYVjliU0lnWm05eUlHSmxkSFJsY2lCc2IyOXJhVzVuSUd4bGRIUmxjaUJ0ZFM0bkxBb2dJQ0FnSnlSY2JYVWtjeWM2SUNkWmIzVWdiV0Y1SUhKbGNHeGhZMlVnVEdGVVpWZ2daWGh3Y21WemMybHZiaUFpSkZ4dGRTUnRJaUIzYVhSb0lDSjdYRngwWlhoMGJYVjljeUlnWm05eUlHSmxkSFJsY2lCc2IyOXJhVzVuSUd4bGRIUmxjaUJ0ZFM0bkxBb2dJQ0FnSnlSY2JYVWtaeWM2SUNkWmIzVWdiV0Y1SUhKbGNHeGhZMlVnVEdGVVpWZ2daWGh3Y21WemMybHZiaUFpSkZ4dGRTUnRJaUIzYVhSb0lDSjdYRngwWlhoMGJYVjlaeUlnWm05eUlHSmxkSFJsY2lCc2IyOXJhVzVuSUd4bGRIUmxjaUJ0ZFM0bkxBb2dJQ0FnSnlSY2JYVWtWRVJVVWljNklDZFpiM1VnYldGNUlISmxjR3hoWTJVZ1RHRlVaVmdnWlhod2NtVnpjMmx2YmlBaUpGeHRkU1JVUkZSU0lpQjNhWFJvSUNKN1hGeDBaWGgwYlhWOVZFUlVVaUlnWm05eUlHSmxkSFJsY2lCc2IyOXJhVzVuSUd4bGRIUmxjaUJ0ZFM0bkxBb2dJQ0FnSjF4b2MyeGhjMmduT2lBblNXWWdZbmtnSWx4b2MyeGhjMmdpSUhsdmRTQnRaV0Z1SUhSb1pTQnlaV1IxWTJWa0lGQnNZVzVqYXlCamIyNXpkR0Z1ZEN3Z2RYTmxJQ0pjYUdKaGNpSXVKeXdLSUNBZ0lDY3JMeTBuT2lBblNXWWdlVzkxSUdGeVpTQnBiaUJNWVZSbFdDd2dkWE5sSUNKY2NHMGlJR2x1YzNSbFlXUWdiMllnSWlzdkxTSXVJRTkwYUdWeWQybHpaU3dnWm1sdVpDQndjbTl3WlhJZ2NHeDFjeTF0YVc1MWN5QnplVzFpYjJ3dUp5d0tJQ0FnSUNjZ0pGNWNZMmx5WXlSREp6b2dKMFJsWjNKbFpYTWdRMlZzYzJsMWN5QnphRzkxYkdRZ2JtOTBJR0psSUhObGNHRnlZWFJsWkNCbWNtOXRJSFJvWlNCdWRXMWlaWElnZDJsMGFDQmhJSE53WVdObEp5d0tJQ0FnSUNjZ0pGNWNZMmx5WXlSR0p6b2dKMFJsWjNKbFpYTWdSbUZvY21WdWFHVnBkQ0J6YUc5MWJHUWdibTkwSUdKbElITmxjR0Z5WVhSbFpDQm1jbTl0SUhSb1pTQnVkVzFpWlhJZ2QybDBhQ0JoSUhOd1lXTmxMaWNzQ2lBZ0lDQjlDZ29qSUZSb2FYTWdiR2x6ZENCdlppQmpiR2xqYUdWeklIZGhjeUIwWVd0bGJpQm1jbTl0SUhOMWMzQmxibk5sTG01bGREb0tJeUJYWldJZ1VHRm5aVG9nYUhSMGNEb3ZMM04xYzNCbGJuTmxMbTVsZEM5M2FHbDBaV1pwYzJndlkyeHBZMmhsTG1oMGJRb2pJRVZ0WVdsc09pQnpkWE53Wlc1elpVQnpkWE53Wlc1elpTNXVaWFFnQ2dwRFRFbERTRVZUSUQwZ2MyVjBLRnNLSUNBZ0lDSklZV3hzYldGeWF5SXNDaUFnSUNBaWNHRnlZV1JwWjIwZ2MyaHBablFpTEFvZ0lDQWdJa0YwSUhSb1pTQmxibVFnYjJZZ2RHaGxJR1JoZVNJc0NpQWdJQ0FpWVhRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnWkdGNUlpd0tJQ0FnSUNKSmJpQmhJRzUxZEhOb1pXeHNJaXdLSUNBZ0lDSnBiaUJoSUc1MWRITm9aV3hzSWl3S0lDQWdJQ0pJYjJ4NUlFZHlZV2xzSWl3S0lDQWdJQ0pvYjJ4NUlHZHlZV2xzSWl3S0lDQWdJQ0poWTJVZ2RYQWdlVzkxY2lCemJHVmxkbVVpTEFvZ0lDQWdJbUZzYkNCMFlXeHJMQ0J1YnlCaFkzUnBiMjRpTEFvZ0lDQWdJbUZzYkNCaWIyOXpkR1Z5TENCdWJ5QndZWGxzYjJGa0lpd0tJQ0FnSUNKaGJHd2dhR0YwTENCdWJ5QmpZWFIwYkdVaUxBb2dJQ0FnSW1Gc2JDQm9ZVzF0WlhJc0lHNXZJRzVoYVd3aUxBb2dJQ0FnSW1Gc2JDQnBZMmx1Wnl3Z2JtOGdZMkZyWlNJc0NpQWdJQ0FpWVd4c0lITm9iM1FzSUc1dklIQnZkMlJsY2lJc0NpQWdJQ0FpWVd4c0lITnBlbnBzWlN3Z2JtOGdjM1JsWVdzaUxBb2dJQ0FnSW1Gc2JDQjNZWGdnWVc1a0lHNXZJSGRwWTJzaUxBb2dJQ0FnSW1Gc2JDQjBhR0YwSUdGdVpDQmhJR0poWnlCdlppQmphR2x3Y3lJc0NpQWdJQ0FpWVd4c0lIUm9kVzFpY3lJc0NpQWdJQ0FpWVd4c0lIZGxkQ0lzQ2lBZ0lDQWlZV3hzSjNNZ1ptRnBjaUJwYmlCc2IzWmxJR0Z1WkNCM1lYSWlMQW9nSUNBZ0ltRnNiV2xuYUhSNUlHUnZiR3hoY2lJc0NpQWdJQ0FpWVd4M1lYbHpJR0VnWW5KcFpHVnpiV0ZwWkNJc0NpQWdJQ0FpWVcxaWRXeGhibU5sSUdOb1lYTmxJaXdLSUNBZ0lDSmhjbTFqYUdGcGNpQnhkV0Z5ZEdWeVltRmpheUlzQ2lBZ0lDQWlZWEp0ZVNCaWNtRjBJaXdLSUNBZ0lDSmhjblFnYVcxcGRHRjBaWE1nYkdsbVpTSXNDaUFnSUNBaVlYTWdiSFZqYXlCM2IzVnNaQ0JvWVhabElHbDBJaXdLSUNBZ0lDSmhjeUJ2YkdRZ1lYTWdkR2x0WlNJc0NpQWdJQ0FpWW1GamF5QmhaMkZwYm5OMElIUm9aU0IzWVd4c0lpd0tJQ0FnSUNKaVlXTnJJR2x1SUhSb1pTQnpZV1JrYkdVaUxBb2dJQ0FnSW1KaFkyc2dkRzhnYzNGMVlYSmxJRzl1WlNJc0NpQWdJQ0FpWW1GamF5QjBieUIwYUdVZ1pISmhkMmx1WnlCaWIyRnlaQ0lzQ2lBZ0lDQWlZbUZrSUhSdklIUm9aU0JpYjI1bElpd0tJQ0FnSUNKaVlXeHNjR0Z5YXlCbWFXZDFjbVVpTEFvZ0lDQWdJbUpoY0hScGMyMGdiMllnWm1seVpTSXNDaUFnSUNBaVltRnlaU0JpYjI1bGN5SXNDaUFnSUNBaVltRnlheUJwY3lCM2IzSnpaU0IwYUdGdUlIUm9aU0JpYVhSbElpd0tJQ0FnSUNKaVlYSnJJSFZ3SUhSb1pTQjNjbTl1WnlCMGNtVmxJaXdLSUNBZ0lDSmlZWFJ6SUdsdUlIUm9aU0JpWld4bWNua2lMQW9nSUNBZ0ltSmxZWFFnWVhKdmRXNWtJSFJvWlNCaWRYTm9JaXdLSUNBZ0lDSmlaV0YwSUhSb1pTQmlkWE5vWlhNaUxBb2dJQ0FnSW1KbGRIUmxjaUJzWVhSbElIUm9ZVzRnYm1WMlpYSWlMQW9nSUNBZ0ltSmxkSFJsY2lCellXWmxJSFJvWVc0Z2MyOXljbmtpTEFvZ0lDQWdJbUpsZEhkbFpXNGdZU0J5YjJOcklHRnVaQ0JoSUdoaGNtUWdjR3hoWTJVaUxBb2dJQ0FnSW1KbGVXOXVaQ0IwYUdVZ2NHRnNaU0lzQ2lBZ0lDQWlZbWxuSUdGeklHeHBabVVpTEFvZ0lDQWdJbUpwWnlCbWFYTm9JR2x1SUdFZ2MyMWhiR3dnY0c5dVpDSXNDaUFnSUNBaVltbG5JRzFoYmlCdmJpQmpZVzF3ZFhNaUxBb2dJQ0FnSW1KcGNtUWdhVzRnZEdobElHaGhibVFpTEFvaVltbDBaU0IwYUdVZ1pIVnpkQ0lzQ2lBZ0lDQWlZbWwwZEdWeUlHUnBjMkZ3Y0c5cGJuUnRaVzUwSWl3S0lDQWdJQ0ppYkdGamF5QmhjeUJqYjJGc0lpd0tJQ0FnSUNKaWJHRnpkQ0JtY205dElIUm9aU0J3WVhOMElpd0tJQ0FnSUNKaWJHVmxaR2x1WnlCb1pXRnlkQ0lzQ2lBZ0lDQWlZbXhwYm1RZ1lYTWdZU0JpWVhRaUxBb2dJQ0FnSW1Kc2IyOWtJR2x6SUhSb2FXTnJaWElnZEdoaGJpQjNZWFJsY2lJc0NpQWdJQ0FpWW14dmIyUWdiVzl1WlhraUxBb2dJQ0FnSW1Kc2IyOWtJRzl1SUhsdmRYSWdhR0Z1WkhNaUxBb2dJQ0FnSW1Kc2IyOWtMQ0J6ZDJWaGRDQmhibVFnZEdWaGNuTWlMQW9nSUNBZ0ltSnNiM2NnZEdocGN5QnFiMmx1ZENJc0NpQWdJQ0FpWW05cGJDQnBkQ0JrYjNkdUlIUnZJaXdLSUNBZ0lDSmliMmxzY3lCa2IzZHVJSFJ2SWl3S0lDQWdJQ0ppYjI5NlpTQmhibVFnWW5KdllXUnpJaXdLSUNBZ0lDSmliM0psWkNCMGJ5QjBaV0Z5Y3lJc0NpQWdJQ0FpWW05eWJpQmhibVFnY21GcGMyVmtJaXdLSUNBZ0lDSmliM0p1SUhsbGMzUmxjbVJoZVNJc0NpQWdJQ0FpWW05MGRHOXRJR3hwYm1VaUxBb2dJQ0FnSW1KeVlXbHVJR1J5WVdsdUlpd0tJQ0FnSUNKaWNtRnBiaUJrZFcxd0lpd0tJQ0FnSUNKaWNtRnpjeUIwWVdOcmN5SXNDaUFnSUNBaVluSnBibWNnYUc5dFpTQjBhR1VnWW1GamIyNGlMQW9nSUNBZ0ltSnliMnRsYmlCeVpXTnZjbVFpTEFvZ0lDQWdJbUoxYkd3Z1lua2dkR2hsSUdodmNtNXpJaXdLSUNBZ0lDSmlkV3hzSUdsdUlHRWdZMmhwYm1FZ2MyaHZjQ0lzQ2lBZ0lDQWlZblZ0Y0NCcGJpQjBhR1VnYm1sbmFIUWlMQW9nSUNBZ0ltSjFjM2tnWVhNZ1lTQmlaV1VpTEFvZ0lDQWdJbUo1SUdGdVpDQnNZWEpuWlNJc0NpQWdJQ0FpWTJGc2JTQmlaV1p2Y21VZ2RHaGxJSE4wYjNKdElpd0tJQ0FnSUNKallXNWtiR1VnWVhRZ1ltOTBhQ0JsYm1Seklpd0tJQ0FnSUNKallYTmxJRzltSUcxcGMzUmhhMlZ1SUdsa1pXNTBhWFI1SWl3S0lDQWdJQ0pqWVhRZ2IzVjBJRzltSUhSb1pTQmlZV2NpTEFvZ0lDQWdJbU5oZFdkb2RDQnlaV1F0YUdGdVpHVmtJaXdLSUNBZ0lDSmphR1ZqYTJWeVpXUWdZMkZ5WldWeUlpd0tJQ0FnSUNKamFHbGphMlZ1Y3lCamIyMWxJR2h2YldVZ2RHOGdjbTl2YzNRaUxBb2dJQ0FnSW1Ob2IyMXdhVzVuSUdGMElIUm9aU0JpYVhRaUxBb2dJQ0FnSW1Oc1pXRnViR2x1WlhOeklHbHpJRzVsZUhRZ2RHOGdaMjlrYkdsdVpYTnpJaXdLSUNBZ0lDSmpiR1ZoY2lCaGN5QmhJR0psYkd3aUxBb2dJQ0FnSW1Oc1pXRnlJR0Z6SUcxMVpDSXNDaUFnSUNBaVkyOXNaQ0J6YUc5MWJHUmxjaUlzQ2lBZ0lDQWlZMjkxYkdRZ1kyRnlaU0JzWlhOeklpd0tJQ0FnSUNKamIzVnNaRzRuZENCallYSmxJR3hsYzNNaUxBb2dJQ0FnSW1OdmRXeGtiaWQwSUdkbGRDQjBieUJtYVhKemRDQmlZWE5sSWl3S0lDQWdJQ0pqYjNWdWRDQjViM1Z5SUdKc1pYTnphVzVuY3lJc0NpQWdJQ0FpWTI5MWJuUnNaWE56SUdodmRYSnpJaXdLSUNBZ0lDSmpjbVZoZEhWeVpTQmpiMjFtYjNKMElpd0tJQ0FnSUNKamNtbHRaU0JwYmlCMGFHVWdjM1J5WldWMElpd0tJQ0FnSUNKamRYSnBiM05wZEhrZ2EybHNiR1ZrSUhSb1pTQmpZWFFpTEFvZ0lDQWdJbU4xZENCaElHWnBibVVnWm1sbmRYSmxJaXdLSUNBZ0lDSmpkWFFnWVc1a0lHUnlhV1ZrSWl3S0lDQWdJQ0pqZFhRZ2RHOGdkR2hsSUdOb1lYTmxJaXdLSUNBZ0lDSmpkWFFnZEc4Z2RHaGxJSEYxYVdOcklpd0tJQ0FnSUNKamRYUmxJR0Z6SUdFZ1luVjBkRzl1SWl3S0lDQWdJQ0prWVhKclpYTjBJR0psWm05eVpTQjBhR1VnWkdGM2JpSXNDaUFnSUNBaVpHVmhaQ0JoY3lCaElHUnZiM0p1WVdsc0lpd0tJQ0FnSUNKa1pXRjBhQ0JoYm1RZ2RHRjRaWE1pTEFvZ0lDQWdJbVJsWVhSb0ozTWdaRzl2Y25OMFpYQWlMQW9nSUNBZ0ltUmxkbWxzSUdseklHbHVJSFJvWlNCa1pYUmhhV3h6SWl3S0lDQWdJQ0prYjJjZ2FXNGdkR2hsSUcxaGJtZGxJaXdLSUNBZ0lDSmtiMjRuZENCamIzVnVkQ0I1YjNWeUlHTm9hV05yWlc1eklHSmxabTl5WlNCMGFHVjVKM0psSUdoaGRHTm9aV1FpTEFvZ0lDQWdJbVJ2YmlkMElHUnZJSFJvWlNCamNtbHRaU0JwWmlCNWIzVWdZMkZ1SjNRZ1pHOGdkR2hsSUhScGJXVWlMQW9nSUNBZ0ltUnZkV0owYVc1bklGUm9iMjFoY3lJc0NpQWdJQ0FpWkc5M2JpQmhibVFnWkdseWRIa2lMQW9nSUNBZ0ltUnZkMjRnYVc0Z2RHaGxJR1IxYlhCeklpd0tJQ0FnSUNKa2IzZHVJSEJoZENJc0NpQWdJQ0FpWkc5M2JpQjBhR1VnWkhKaGFXNGlMQW9nSUNBZ0ltUnZkMjRnZEdobElIUnZhV3hsZENJc0NpQWdJQ0FpWkc5M2JpQjBhR1VnYUdGMFkyZ2lMQW9nSUNBZ0ltUnZkMjRnZEc4Z1pXRnlkR2dpTEFvZ0lDQWdJbVJ5YVhabElIbHZkU0IxY0NCaElIZGhiR3dpTEFvZ0lDQWdJbVI1WldRZ2FXNGdkR2hsSUhkdmIyd2lMQW9nSUNBZ0ltVmhjaUIwYnlCMGFHVWdaM0p2ZFc1a0lpd0tJQ0FnSUNKbFlYSnNlU0JpYVhKa0lHTmhkR05vWlhNZ2RHaGxJSGR2Y20waUxBb2dJQ0FnSW1WaGMybGxjaUJ6WVdsa0lIUm9ZVzRnWkc5dVpTSXNDaUFnSUNBaVpXRnplU0JoY3lBeExUSXRNeUlzQ2lBZ0lDQWlaV0Z6ZVNCaGN5QndhV1VpTEFvZ0lDQWdJbVZoZENCamNtOTNJaXdLSUNBZ0lDSmxZWFFnYUhWdFlteGxJSEJwWlNJc0NpQWdJQ0FpWlc1dmRXZG9JR0ZzY21WaFpIa2lMQW9nSUNBZ0ltVjJaWEo1SUdSdlp5Qm9ZWE1nYVhSeklHUmhlU0lzQ2lBZ0lDQWlaWFpsY25rZ1ptbGlaWElnYjJZZ2JYa2dZbVZwYm1jaUxBb2dJQ0FnSW1WMlpYSjVkR2hwYm1jZ1luVjBJSFJvWlNCcmFYUmphR1Z1SUhOcGJtc2lMQW9nSUNBZ0ltVjJhV3dnZEhkcGJpSXNDaUFnSUNBaVpYaHBjM1JsYm5ScFlXd2dZVzVuYzNRaUxBb2dJQ0FnSW1WNGNHVnlkSE1nWVdkeVpXVWlMQW9nSUNBZ0ltVjVaU0JtYjNJZ1lXNGdaWGxsSWl3S0lDQWdJQ0ptWVdOMGN5QnZaaUJzYVdabElpd0tJQ0FnSUNKbVlXbHlMV2hoYVhKbFpDQnZibVVpTEFvZ0lDQWdJbVpoYVhJZ2QyVmhkR2hsY2lCbWNtbGxibVFpTEFvZ0lDQWdJbVpoYkd3Z2IyWm1JRzltSUdFZ2RIVnlibWx3SUhSeWRXTnJJaXdLSUNBZ0lDSm1ZWFFnYzJ4dllpSXNDaUFnSUNBaVptRjJiM0lnZFhNZ2QybDBhQ0JoSUhOdmJtY2lMQW9nSUNBZ0ltWmxZWElnWVc1a0lHeHZZWFJvYVc1bklpd0tJQ0FnSUNKbVpXRjBhR1Z5SUhsdmRYSWdibVZ6ZENJc0NpQWdJQ0FpWm1Wc2JHOTNJSFJ5WVhabGJHVnlJaXdLSUNBZ0lDSm1aWGNnWVc1a0lHWmhjaUJpWlhSM1pXVnVJaXdLSUNBZ0lDSm1hV1ZzWkNCMGFHbHpJRzl1WlNJc0NpQWdJQ0FpWm1sbWRHVmxiaUJ0YVc1MWRHVnpJRzltSUdaaGJXVWlMQW9nSUNBZ0ltWnBjMmdnYm05eUlHWnZkMndpTEFvZ0lDQWdJbVpzZVNCaWVTQnVhV2RvZENJc0NpQWdJQ0FpWm14NUlIUm9aU0JqYjI5d0lpd0tJQ0FnSUNKbWIzSWdkR2hsSUdKcGNtUnpJaXdLSUNBZ0lDSm1iM2dnYVc0Z2RHaGxJR2hsYm1odmRYTmxJaXdLSUNBZ0lDSm1jbVYxWkdsaGJpQnpiR2x3SWl3S0lDQWdJQ0ptZFc0Z1lXNWtJR2RoYldWeklpd0tJQ0FnSUNKbWRXNGdhVzRnZEdobElITjFiaUlzQ2lBZ0lDQWlaMkZ5WW1GblpTQnBiaXdnWjJGeVltRm5aU0J2ZFhRaUxBb2dJQ0FnSW1kbGRDQjBhR1VnYzJGamF5SXNDaUFnSUNBaVoyVjBJSGx2ZFhJZ1ozSnZiM1psSUdKaFkyc2lMQW9nSUNBZ0ltZGxkSE1nYlhrZ1oyOWhkQ0lzQ2lBZ0lDQWlaMmxtZENCb2IzSnpaU0JwYmlCMGFHVWdiVzkxZEdnaUxBb2dJQ0FnSW1kcGJHUnBibWNnZEdobElHeHBiSGtpTEFvZ0lDQWdJbWRwZG1VZ1lTQmtZVzF1SWl3S0lDQWdJQ0puYVhabElHMWxJR0VnWW5KbFlXc2lMQW9nSUNBZ0ltZHBkbVZ6SUcxbElIUm9aU0JqY21WbGNITWlMQW9nSUNBZ0ltZHZJR2hwYlNCdmJtVWdZbVYwZEdWeUlpd0tJQ0FnSUNKbmIyVnpJSGRwZEdodmRYUWdjMkY1YVc1bklpd0tJQ0FnSUNKbmIyOWtJR1JsWldRZ1ptOXlJSFJvWlNCa1lYa2lMQW9nSUNBZ0ltZHZiMlFnZEdsdFpTQjNZWE1nYUdGa0lHSjVJR0ZzYkNJc0NpQWdJQ0FpUjNKbFpXc2dkRzhnYldVaUxBb2dJQ0FnSW1keVpXVnVJSFJvZFcxaUlpd0tJQ0FnSUNKbmNtVmxiaTFsZVdWa0lHMXZibk4wWlhJaUxBb2dJQ0FnSW1keWFYTjBJR1p2Y2lCMGFHVWdiV2xzYkNJc0NpQWdJQ0FpWjNWcFpHbHVaeUJzYVdkb2RDSXNDaUFnSUNBaWFHRnBjaUJ2WmlCMGFHVWdaRzluSWl3S0lDQWdJQ0pvWVhKa0lIUnZJR0psYkdsbGRtVWlMQW9nSUNBZ0ltaGhkbVVnWVNCdWFXTmxJR1JoZVNJc0NpQWdJQ0FpYUdWaFpDQm9iMjVqYUc4aUxBb2dJQ0FnSW1obFlYSjBKM01nWTI5dWRHVnVkQ0lzQ2lBZ0lDQWlhR1ZzYkMxaVpXNTBJR1p2Y2lCc1pXRjBhR1Z5SWl3S0lDQWdJQ0pvYVdSa1pXNGdZV2RsYm1SaElpd0tJQ0FnSUNKb2FXZG9JRzl1SUhSb1pTQm9iMmNpTEFvZ0lDQWdJbWh2YkdRZ1lTQmpZVzVrYkdVZ2RHOGlMQW9nSUNBZ0ltaHZiR1FnZVc5MWNpQm9iM0p6WlhNaUxBb2dJQ0FnSW1odmJHUWdlVzkxY2lCMGIyNW5kV1VpTEFvZ0lDQWdJbWh2YjJzZ2IzSWdZbmtnWTNKdmIyc2lMQW9nSUNBZ0ltaHZjbk5sSUc5bUlHRWdaR2xtWm1WeVpXNTBJR052Ykc5eUlpd0tJQ0FnSUNKb2IzUWdhMjVwWm1VZ2RHaHliM1ZuYUNCaWRYUjBaU0lzQ2lBZ0lDQWlhRzkzSUdkdlpYTWdkR2hsSUdKaGRIUnNaU0lzQ2lBZ0lDQWlhV1lnZEdobElITm9iMlVnWm1sMGN5SXNDaUFnSUNBaWFXNGdZU0J3YVc1amFDSXNDaUFnSUNBaWFXNGdZU0IzYVc1cklpd0tJQ0FnSUNKcGJpQm9ZWEp0SjNNZ2QyRjVJaXdLSUNBZ0lDSnBiaUIwYUdVZ2RHRnVheUlzQ2lBZ0lDQWlhVzRnZVc5MWNpQmtjbVZoYlhNaUxBb2dJQ0FnSW1sdUlIbHZkWElnWm1GalpTSXNDaUFnSUNBaWFXNWxlRzl5WVdKc2VTQmtjbUYzYmlJc0NpQWdJQ0FpYVc1bWJ5QmtkVzF3SWl3S0lDQWdJQ0pwYm1ac2RXVnVZMlVnY0dWa1pHeHBibWNpTEFvZ0lDQWdJbWx1ZEdWdWRITWdZVzVrSUhCMWNuQnZjMlZ6SWl3S0lDQWdJQ0pwZENCM1lYTWdZU0JrWVhKcklHRnVaQ0J6ZEc5eWJYa2dibWxuYUhRaUxBb2dJQ0FnSW1sMElIZHZiaWQwSUdac2VTSXNDaUFnSUNBaVNtRmpheUJ2WmlCaGJHd2dkSEpoWkdWeklpd0tJQ0FnSUNKcWIyTnJaWGtnWm05eUlIQnZjMmwwYVc5dUlpd0tJQ0FnSUNKS2IyaHVibmt0WTI5dFpTMXNZWFJsYkhraUxBb2dJQ0FnSW1wdmFXNWxaQ0JoZENCMGFHVWdhR2x3SWl3S0lDQWdJQ0pxZFcxd0lHUnZkMjRnZVc5MWNpQjBhSEp2WVhRaUxBb2dJQ0FnSW1wMWJYQWdhVzRnZDJsMGFDQmliM1JvSUdabFpYUWlMQW9nSUNBZ0ltcDFiWEFnYjI0Z2RHaGxJR0poYm1SM1lXZHZiaUlzQ2lBZ0lDQWlhblZ0Y0NCMGFHVWdaM1Z1SWl3S0lDQWdJQ0pxZFcxd0lHaGxjaUJpYjI1bGN5SXNDaUFnSUNBaWFuVnRjQ0JvYVhNZ1ltOXVaWE1pTEFvZ0lDQWdJbXAxYm1zZ2FXNGdkR2hsSUhSeWRXNXJJaXdLSUNBZ0lDSnFkWEo1SUdseklITjBhV3hzSUc5MWRDSXNDaUFnSUNBaWFuVnpkR2xqWlNCcGN5QmliR2x1WkNJc0NpQWdJQ0FpYTJWbGNDQmhiaUJsZVdVZ2IyNGdlVzkxSWl3S0lDQWdJQ0pyWldWd0lHbDBJR1J2ZDI0aUxBb2dJQ0FnSW10bFpYQWdhWFFnYzJsdGNHeGxMQ0J6ZEhWd2FXUWlMQW9nSUNBZ0ltdGxaWEFnZFhBZ2QybDBhQ0IwYUdVZ1NtOXVaWE5sY3lJc0NpQWdJQ0FpYTJWbGNDQjViM1Z5SUdOaGNtUnpJR05zYjNObElIUnZJSFpsYzNRaUxBb2dJQ0FnSW10bFpYQWdlVzkxY2lCamFHbHVJSFZ3SWl3S0lDQWdJQ0pyWldWd0lIbHZkWElnWm1sdVoyVnljeUJqY205emMyVmtJaXdLSUNBZ0lDSnJaV1Z3SUhsdmRYSWdjRzkzWkdWeUlHUnllU0lzQ2lBZ0lDQWlhMmxqYXlCaGMzTWlMQW9nSUNBZ0ltdHBZMnRpZFhSMElpd0tJQ0FnSUNKcmFXTnJJSFJvWlNCaWRXTnJaWFFpTEFvZ0lDQWdJbXRwWTJzZ2RYQWdlVzkxY2lCb1pXVnNjeUlzQ2lBZ0lDQWlhMmxqYXlCNWIzVWdkRzhnZEdobElHTjFjbUlpTEFvZ0lDQWdJbXRwWTJzZ2VXOTFjaUJtWldWMElIVndJaXdLSUNBZ0lDSnJhV1FnYVc0Z1lTQmpZVzVrZVNCemRHOXlaU0lzQ2lBZ0lDQWlhMmxzYkNCMGQyOGdZbWx5WkhNZ2QybDBhQ0J2Ym1VZ2MzUnZibVVpTEFvZ0lDQWdJa3RwYm1jbmN5QkZibWRzYVhOb0lpd0tJQ0FnSUNKcmFXNW5KM01nY21GdWMyOXRJaXdLSUNBZ0lDSnJhWE56SUdGdVpDQjBaV3hzSWl3S0lDQWdJQ0pyYVhOeklHOW1JR1JsWVhSb0lpd0tJQ0FnSUNKcmFYUWdZVzVrSUd0aFltOXZaR3hsSWl3S0lDQWdJQ0pyYm1WbExXaHBaMmdnZEc4Z1lTQm5jbUZ6YzJodmNIQmxJaXdLSUNBZ0lDSnJibTlqYXlCcGRDQnZkWFFnYjJZZ2RHaGxJSEJoY21zaUxBb2dJQ0FnSW10dWIyTnJJRzl1SUhkdmIyUWlMQW9nSUNBZ0ltdHViMk5ySUhsdmRYSWdjMjlqYTNNZ2IyWm1JaXdLSUNBZ0lDSnJibTlqYTJWa0lIVndJaXdLSUNBZ0lDSnJibTkzSUdocGJTQm1jbTl0SUVGa1lXMGlMQW9nSUNBZ0ltdHViM2NnZEdobElISnZjR1Z6SWl3S0lDQWdJQ0pyYm05M0lIUm9aU0J6WTI5eVpTSXNDaUFnSUNBaWEyNTFZMnRzWlNCa2IzZHVJaXdLSUNBZ0lDSnJiblZqYTJ4bElITmhibVIzYVdOb0lpd0tJQ0FnSUNKcmJuVmphMnhsSUhWdVpHVnlJaXdLSUNBZ0lDSnNZV0p2Y2lCdlppQnNiM1psSWl3S0lDQWdJQ0pzWVhBZ2IyWWdiSFY0ZFhKNUlpd0tJQ0FnSUNKc1lYTjBJR0oxZENCdWIzUWdiR1ZoYzNRaUxBb2dJQ0FnSW14aGMzUXRaR2wwWTJnZ1pXWm1iM0owSWl3S0lDQWdJQ0pzWVhOMElHaDFjbkpoYUNJc0NpQWdJQ0FpYkdGM0lHOW1JSFJvWlNCcWRXNW5iR1VpTEFvZ0lDQWdJbXhoZHlCdlppQjBhR1VnYkdGdVpDSXNDaUFnSUNBaWJHRjVJR1J2ZDI0Z2RHaGxJR3hoZHlJc0NpQWdJQ0FpYkdWaGNITWdZVzVrSUdKdmRXNWtjeUlzQ2lBZ0lDQWliR1YwSUhOc1pXVndhVzVuSUdSdlozTWdiR2xsSWl3S0lDQWdJQ0pzWlhRZ2RHaGxJR05oZENCdmRYUWdiMllnZEdobElHSmhaeUlzQ2lBZ0lDQWliR1YwSjNNZ2MzQnNhWFFpTEFvZ0lDQWdJbXhwWlNCc2FXdGxJR0VnY25Wbklpd0tJQ0FnSUNKc2FXWmxJR0Z1WkNCc2FXMWlJaXdLSUNBZ0lDSnNhV1psSUdsdGFYUmhkR1Z6SUdGeWRDSXNDaUFnSUNBaWJHbG1aU2R6SUdFZ1ltbDBZMmdpTEFvZ0lDQWdJbXhwWjJoMFpXNGdkWEFpTEFvZ0lDQWdJbXhwWjJoMGN5QnZkWFFpTEFvZ0lDQWdJbXhwYTJVZ1lTQnpiM0psSUhSb2RXMWlJaXdLSUNBZ0lDSnNhV3RsSUdKMWRIUmxjaUlzQ2lBZ0lDQWliR2xyWlNCMGFHVWdjR3hoWjNWbElpd0tJQ0FnSUNKc2FXdGxJSFJvWlhKbEozTWdibThnZEc5dGIzSnliM2NpTEFvZ0lDQWdJbXhwYjI0bmN5QnphR0Z5WlNJc0NpQWdJQ0FpYkdsMGJYVnpJSFJsYzNRaUxBb2dJQ0FnSW14cGRIUnNaU0JpYkdGamF5QmliMjlySWl3S0lDQWdJQ0pzYVhabElHRnVaQ0JzWldGeWJpSXNDaUFnSUNBaWJHOXVaeUJoYm1RZ2MyaHZjblFnYjJZZ2FYUWlMQW9nSUNBZ0lteHZibWNnYkc5emRDQnNiM1psSWl3S0lDQWdJQ0pzYjI5cklHSmxabTl5WlNCNWIzVWdiR1ZoY0NJc0NpQWdJQ0FpYkc5MWJtZGxJR3hwZW1GeVpDSXNDaUFnSUNBaWJHOTJaV1FnWVc1a0lHeHZjM1FpTEFvZ0lDQWdJbXh2ZHlCdFlXNGdiMjRnZEdobElIUnZkR1Z0SUhCdmJHVWlMQW9nSUNBZ0lteDFZMnNnYjJZZ2RHaGxJR1J5WVhjaUxBb2dJQ0FnSW14MVkyc2diMllnZEdobElFbHlhWE5vSWl3S0lDQWdJQ0p0WVd0bElHMTVJR1JoZVNJc0NpQWdJQ0FpYldGc1pTQmphR0YxZG1sdWFYTjBJaXdLSUNBZ0lDSnRZVzRuY3lCaVpYTjBJR1p5YVdWdVpDSXNDaUFnSUNBaWJXRnVlU0J0YjI5dWN5SXNDaUFnSUNBaWJXRnVlUzF6Y0d4bGJtUnZjbVZrSUhSb2FXNW5JaXdLSUNBZ0lDSnRZWEpySUcxNUlIZHZjbVJ6SWl3S0lDQWdJQ0p0WldGdWFXNW5ablZzSUhKbGJHRjBhVzl1YzJocGNDSXNDaUFnSUNBaWJXVnNiRzkzSUc5MWRDSXNDaUFnSUNBaWJXOXRaVzUwSUc5bUlHZHNiM0o1SWl3S0lDQWdJQ0p0YjIxbGJuUW5jeUJ5WlhOd2FYUmxJaXdLSUNBZ0lDSk5iMjVrWVhrZ2JXOXlibWx1WnlCeGRXRnlkR1Z5WW1GamF5SXNDaUFnSUNBaWJXOXVhMlY1SUhOMWFYUWlMQW9nSUNBZ0ltMXZibXRsZVNCelpXVXNJRzF2Ym10bGVTQmtieUlzQ2lBZ0lDQWliVzkwYUdWeWFHOXZaQ0JoYm1RZ1lYQndiR1VnY0dsbElpd0tJQ0FnSUNKdGIzWmxjbk1nWVc1a0lITm9ZV3RsY25NaUxBb2dJQ0FnSW0xdmRtbHVaeUJsZUhCbGNtbGxibU5sSWl3S0lDQWdJQ0p0ZVNCMGQyOGdZMlZ1ZEhNaUxBb2dJQ0FnSW01bFlYUWdZWE1nWVNCd2FXNGlMQW9nSUNBZ0ltNWxaV1JzWlhOeklIUnZJSE5oZVNJc0NpQWdJQ0FpYm1sd0lHbDBJR2x1SUhSb1pTQmlkV1FpTEFvZ0lDQWdJbTV2SUdkMWRITXNJRzV2SUdkc2IzSjVJaXdLSUNBZ0lDSnVieUJzYjNabElHeHZjM1FpTEFvZ0lDQWdJbTV2SUhCaGFXNHNJRzV2SUdkaGFXNGlMQW9nSUNBZ0ltNXZJSE4wYjI1bElIVnVkSFZ5Ym1Wa0lpd0tJQ0FnSUNKdWJ5QjBhVzFsSUd4cGEyVWdkR2hsSUhCeVpYTmxiblFpTEFvZ0lDQWdJbTV2YzJVZ2RHOGdkR2hsSUdkeWFXNWtjM1J2Ym1VaUxBb2dJQ0FnSW01dmRDQnBiaUJ0ZVNCaVlXTnJJSGxoY21RaUxBb2dJQ0FnSW01dmRDQnZiaUI1YjNWeUlIUnBiblI1Y0dVaUxBb2dJQ0FnSW01MWJXSmxjaUJ2Ym1VZ1ptRnVJaXdLSUNBZ0lDSnVkVzFsY205MWN5QjBieUJ0Wlc1MGFXOXVJaXdLSUNBZ0lDSnZabVlnZEdobElIZGhaMjl1SWl3S0lDQWdJQ0p2YkdRZ1kyOXNiR1ZuWlNCMGNua2lMQW9nSUNBZ0ltOXNaQ0J0WldWMGN5QnVaWGNpTEFvZ0lDQWdJbTlzWkdWeUlHRnVaQ0IzYVhObElpd0tJQ0FnSUNKdmJHUmxjaUIwYUdGdUlHUnBjblFpTEFvZ0lDQWdJbTlzWkdWeUlIUm9ZVzRnVFdWMGFIVnpaV3hoYUNJc0NpQWdJQ0FpYjI0Z2RHaGxJR0poYm1SM1lXZHZiaUlzQ2lBZ0lDQWliMjRnZEdobElHNXZjMlVpTEFvZ0lDQWdJbTl1SUhSb1pTQjNZV2R2YmlJc0NpQWdJQ0FpYjI0Z2RHaHBiaUJwWTJVaUxBb2dJQ0FnSW05dVpTQmliM0p1SUdWMlpYSjVJRzFwYm5WMFpTSXNDaUFnSUNBaWIyNWxJR1p2YjNRZ2FXNGdkR2hsSUdkeVlYWmxJaXdLSUNBZ0lDSnZibVVnYVc0Z1lTQnRhV3hzYVc5dUlpd0tJQ0FnSUNKdmJteDVJR2RoYldVZ2FXNGdkRzkzYmlJc0NpQWdJQ0FpYjI1c2VTQjBieUJpWlNCdFpYUWlMQW9nSUNBZ0ltOTFkQ0J2WmlCd2IyTnJaWFFpTEFvZ0lDQWdJbTkxZENCdlppQjBhR1VnWm5KNWFXNW5JSEJoYmlJc0NpQWdJQ0FpYjNWMElHOXVJR0VnYkdsdFlpSXNDaUFnSUNBaWNHRnVhV01nWW5WMGRHOXVJaXdLSUNBZ0lDSndZWEowZVNCd2IyOXdaWElpTEFvZ0lDQWdJbkJoZEhSbGNpQnZaaUJzYVhSMGJHVWdabVZsZENJc0NpQWdJQ0FpY0dGemN5QjBhR1VnYzI1cFptWWdkR1Z6ZENJc0NpQWdJQ0FpY0dGNUlIUm9jbTkxWjJnZ2RHaGxJRzV2YzJVaUxBb2dJQ0FnSW5CbFlYTWdhVzRnWVNCd2IyUWlMQW9nSUNBZ0luQmxjbVpsWTNRZ2MzUnZjbTBpTEFvZ0lDQWdJbkJwWnlCcGJpQmhJSEJ2YTJVaUxBb2dJQ0FnSW5CcGJHeGhjaUJ2WmlCemIyTnBaWFI1SWl3S0lDQWdJQ0p3YkdWdWRIa2diMllnWm1semFDQnBiaUIwYUdVZ2MyVmhJaXdLSUNBZ0lDSndiMmx6YjI0Z2NHVnVJaXdLSUNBZ0lDSndiMjl5SUdGeklHRWdZMmgxY21Ob2JXOTFjMlVpTEFvZ0lDQWdJbkJ2YjNJZ1pYaGpkWE5sSUdadmNpSXNDaUFnSUNBaWNHOTBJR05oYkd4cGJtY2dkR2hsSUd0bGRIUnNaU0JpYkdGamF5SXNDaUFnSUNBaWNISnZkV1FnY0c5emMyVnpjMjl5SWl3S0lDQWdJQ0p3ZFhRZ2JYa2dabTl2ZENCa2IzZHVJaXdLSUNBZ0lDSndkWFFnZVc5MWNpQm1iMjkwSUdSdmQyNGlMQW9nSUNBZ0luRjFhV05ySUdGeklHRWdZblZ1Ym5raUxBb2dJQ0FnSW5GMWFXTnJJR0Z1WkNCMGFHVWdaR1ZoWkNJc0NpQWdJQ0FpY21GbmN5QjBieUJ5YVdOb1pYTWlMQW9nSUNBZ0luSmhhVzVwYm1jZ1luVmphMlYwY3lJc0NpQWdJQ0FpY21GcGJtbHVaeUJqWVhSeklHRnVaQ0JrYjJkeklpd0tJQ0FnSUNKeVlXNXJJR0Z1WkNCbWFXeGxJaXdLSUNBZ0lDSnlaV0ZrSUcxNUlHeHBjSE1pTEFvZ0lDQWdJbkpsWkNCb1pYSnlhVzVuSWl3S0lDQWdJQ0p5WldSb1pXRmtaV1FnYzNSbGNHTm9hV3hrSWl3S0lDQWdJQ0p5WldsbmJpQnpkWEJ5WlcxbElpd0tJQ0FnSUNKeVpXMWxiV0psY2lCMGFHVWdZV3hoYlc4aUxBb2dJQ0FnSW5KdllXUWdkRzhnYUdWc2JDQnBjeUJ3WVhabFpDQjNhWFJvSUdkdmIyUWdhVzUwWlc1MGFXOXVjeUlzQ2lBZ0lDQWljbTlpSUZCbGRHVnlJSFJ2SUhCaGVTQlFZWFZzSWl3S0lDQWdJQ0p5YjJOcklHRnVaQ0JoSUdoaGNtUWdjR3hoWTJVaUxBb2dJQ0FnSW5KdlkydGxkQ0J6WTJsbGJtTmxJaXdLSUNBZ0lDSnliMk5yWlhRZ2MyTnBaVzUwYVhOMElpd0tJQ0FnSUNKeWIzQmxJR0VnWkc5d1pTSXNDaUFnSUNBaWNuVnVJR2wwSUhWd0lIUm9aU0JtYkdGbmNHOXNaU0lzQ2lBZ0lDQWljblZ1Ym1sdVp5QmtiMmNnYkdGamEyVjVJaXdLSUNBZ0lDSnpZV1psSUhSb1lXNGdjMjl5Y25raUxBb2dJQ0FnSW5OaGJIUWdiMllnZEdobElHVmhjblJvSWl3S0lDQWdJQ0p6WVhabElHWmhZMlVpTEFvZ0lDQWdJbk5qWVhKbFpDQnpkR2xtWmlJc0NpQWdJQ0FpYzJOaGNtVmtJSFJ2SUdSbFlYUm9JaXdLSUNBZ0lDSnpZMmh2YjJ3bmN5QnZkWFFpTEFvZ0lDQWdJbk5qY21WaGJXbHVaeUJ0WldWdGFXVnpJaXdLSUNBZ0lDSnpaVzV6WlhNZ2NtVmxiQ0lzQ2lBZ0lDQWljMlYwSUhSb1pTQnlaV052Y21RZ2MzUnlZV2xuYUhRaUxBb2dJQ0FnSW5Ob1lXdGxJR0VnYzNScFkyc2djMmh2ZFd4a0lHOW1JaXdLSUNBZ0lDSnphRzkxYkdSbGNpQjBieUIwYUdVZ2QyaGxaV3dpTEFvZ0lDQWdJbk5vYjNWc1pHVnlaV1FnYUdseklIZGhlU0lzQ2lBZ0lDQWljMmgxZENCNWIzVnlJSFJ5WVhBaUxBb2dJQ0FnSW5OcFoyZ2diMllnY21Wc2FXVm1JaXdLSUNBZ0lDSnphV2R1YVdacFkyRnVkQ0J2ZEdobGNpSXNDaUFnSUNBaWMybHNaVzVqWlNCcGN5Qm5iMnhrWlc0aUxBb2dJQ0FnSW5Oc1pYQjBJR3hwYTJVZ1lTQnNiMmNpTEFvZ0lDQWdJbk50WVd4c0lIZHZjbXhrSWl3S0lDQWdJQ0p6Ym1GclpTQnBiaUIwYUdVZ1ozSmhjM01pTEFvZ0lDQWdJbk51YjNjZ2FtOWlJaXdLSUNBZ0lDSnpiblZuSUdGeklHRWdZblZuSWl3S0lDQWdJQ0p6YjIxbElHOW1JRzE1SUdKbGMzUWdabkpwWlc1a2N5SXNDaUFnSUNBaWMyOXRaWFJvYVc1bklIUm9aU0JqWVhRZ1pISmhaMmRsWkNCcGJpSXNDaUFnSUNBaWMzQmhaR1VnWVNCemNHRmtaU0lzQ2lBZ0lDQWljM0JoY21VZ2RHaGxJSEp2WkNJc0NpQWdJQ0FpYzNCcGRIUnBibWNnYVcxaFoyVWlMQW9nSUNBZ0luTndjbWx1WnlCMGJ5QnNhV1psSWl3S0lDQWdJQ0p6Y1hWbFlXdDVJSGRvWldWc0lHZGxkSE1nZEdobElHZHlaV0Z6WlNJc0NpQWdJQ0FpYzNGMVpXRnJlU0IzYUdWbGJDQm5aWFJ6SUhSb1pTQnZhV3dpTEFvZ0lDQWdJbk4wWVhKMElHWnliMjBnYzJOeVlYUmphQ0lzQ2lBZ0lDQWljM1JwWTJzZ2FXNGdkR2hsSUcxMVpDSXNDaUFnSUNBaWMzUnBZMnNnYVc0Z2VXOTFjaUJqY21GM0lpd0tJQ0FnSUNKemRHbHNiQ0IzWVhSbGNuTWdjblZ1SUdSbFpYQWlMQW9nSUNBZ0luTjBiM0FnWVc1a0lITnRaV3hzSUhSb1pTQnliM05sY3lJc0NpQWdJQ0FpYzNSdmNtVWdZbTkxWjJoMElpd0tJQ0FnSUNKemRISmhibWRsY2lCMGFHRnVJR1pwWTNScGIyNGlMQW9nSUNBZ0luTjBjbUYzSUhSb1lYUWdZbkp2YTJVZ2RHaGxJR05oYldWc0ozTWdZbUZqYXlJc0NpQWdJQ0FpYzNSMVltSnZjbTRnWVhNZ1lTQnRkV3hsSWl3S0lDQWdJQ0p6ZEhWbVppQjBhR0YwSUdSeVpXRnRjeUJoY21VZ2JXRmtaU0J2WmlJc0NpQWdJQ0FpYzNSMVptWmxaQ0J6YUdseWRDSXNDaUFnSUNBaWRHRnJaU0J2Ym1VZ1ptOXlJSFJvWlNCMFpXRnRJaXdLSUNBZ0lDSjBZV3RsSUhSb1pTQmlkV3hzSUdKNUlIUm9aU0JvYjNKdWN5SXNDaUFnSUNBaWRHRnJaU0IwYUdVZ2NHeDFibWRsSWl3S0lDQWdJQ0owWVd0bGN5QnZibVVnZEc4Z2EyNXZkeUJ2Ym1VaUxBb2dJQ0FnSW5SaGJHc2dkSFZ5YTJWNUlpd0tJQ0FnSUNKMFpXNGdabTl2ZENCd2IyeGxJaXdLSUNBZ0lDSjBhR1VnWldGeWRHZ2diVzkyWldRaUxBb2dJQ0FnSW5Sb1pTQm1hVzVoYkNCaGJtRnNlWE5wY3lJc0NpQWdJQ0FpZEdobElISmxZV3dnVFdORGIza2lMQW9nSUNBZ0luUm9aU0J6WVcxbElHOXNaQ0J6ZEc5eWVTSXNDaUFnSUNBaWRHaGxjMlVnZEdocGJtZHpJR2hoY0hCbGJpSXNDaUFnSUNBaWRHaHBZMnNnWVhNZ2RHaHBaWFpsY3lJc0NpQWdJQ0FpZEdocGJtc2diM1YwYzJsa1pTQnZaaUIwYUdVZ1ltOTRJaXdLSUNBZ0lDSjBhR2x5WkNCMGFXMWxKM01nZEdobElHTm9ZWEp0SWl3S0lDQWdJQ0owYUdseklHUmhlU0JoYm1RZ1lXZGxJaXdLSUNBZ0lDSjBhR2x6SUhCdmFXNTBJR2x1SUhScGJXVWlMQW9nSUNBZ0luUm9jbVZsSUhOMGNtbHJaWE1nWVc1a0lIbHZkU2R5WlNCdmRYUWlMQW9nSUNBZ0luUm9jbTkxWjJnZ2RHaGxJR2R5WVhCbGRtbHVaU0lzQ2lBZ0lDQWlkR2h5YjNjZ2FXNGdkR2hsSUhSdmQyVnNJaXdLSUNBZ0lDSjBhV2RsY2lCaWVTQjBhR1VnZEdGcGJDSXNDaUFnSUNBaWRHbHNiQ0IwYUdVZ1ptRjBJR3hoWkhrZ2MybHVaM01pTEFvZ0lDQWdJblJwYldVZ1lXNWtJSFJwYldVZ1lXZGhhVzRpTEFvZ0lDQWdJblJwYldVZ2FYTWdiMllnZEdobElHVnpjMlZ1WTJVaUxBb2dJQ0FnSW5ScGNDQnZaaUIwYUdVZ2FXTmxZbVZ5WnlJc0NpQWdJQ0FpZEc4Z1pYSnlJR2x6SUdoMWJXRnVJaXdLSUNBZ0lDSjBieUIwYUdVZ1ltVnpkQ0J2WmlCdGVTQnJibTkzYkdWa1oyVWlMQW9nSUNBZ0luUnZibWQxWlMxcGJpMWphR1ZsYXlJc0NpQWdJQ0FpZEc5dklHaHZkQ0IwYnlCb1lXNWtiR1VpTEFvZ0lDQWdJblJ2ZFdOb0lHOW1JR0pzWVhKdVpYa2lMQW9nSUNBZ0luUnZkV2RvSUdGeklHNWhhV3h6SWl3S0lDQWdJQ0owYjNWbmFDQnNkV05ySWl3S0lDQWdJQ0owYjNWbmFDQnliM2NnZEc4Z2FHOWxJaXdLSUNBZ0lDSjBjbUZrYVhScGIyNWhiQ0JtWVcxcGJIa2dkbUZzZFdWeklpd0tJQ0FnSUNKMGNtbGhiSE1nWVc1a0lIUnlhV0oxYkdGMGFXOXVjeUlzQ2lBZ0lDQWlkSEpwWldRZ1lXNWtJSFJ5ZFdVaUxBb2dJQ0FnSW5SeWFYQWdaRzkzYmlCdFpXMXZjbmtnYkdGdVpTSXNDaUFnSUNBaWRISjFaU0JpYkhWbElpd0tJQ0FnSUNKMGRYSnVJSGx2ZFhJZ2MyMXBiR1VnZFhCemFXUmxMV1J2ZDI0aUxBb2dJQ0FnSW5SMWNtNGdlVzkxY2lCbWNtOTNiaUIxY0hOcFpHVXRaRzkzYmlJc0NpQWdJQ0FpZEhkcGMzUWdiMllnWm1GMFpTSXNDaUFnSUNBaWRIZHBjM1J6SUdGdVpDQjBkWEp1Y3lJc0NpQWdJQ0FpZEhkdklIUnZJSFJoYm1kdklpd0tJQ0FnSUNKMWJtUmxjaUIwYUdVZ1ozVnVJaXdLSUNBZ0lDSjFibVJsY2lCMGFHVWdjMkZ0WlNCeWIyOW1JaXdLSUNBZ0lDSjFibVJsY25OMFlYUmxaQ0JsYkdWbllXNWpaU0lzQ2lBZ0lDQWlkVzVsZUhCbFkzUmxaQ0IwZDJsemRDSXNDaUFnSUNBaWRXNTBhV3dnZEdobElHTnZkM01nWTI5dFpTQm9iMjFsSWl3S0lDQWdJQ0oxY0NCb2FYTWdjMnhsWlhabElpd0tJQ0FnSUNKMWNDQjBhR1VnWTNKbFpXc2lMQW9nSUNBZ0luVndJSFJvWlNCM2NtOXVaeUIwY21WbElpd0tJQ0FnSUNKMlpYSjVJSEpsWVd3Z1kyOXVZMlZ5YmlJc0NpQWdJQ0FpZG1sbGR5QjNhWFJvSUdGc1lYSnRJaXdLSUNBZ0lDSjNZV3RsZFhBZ1kyRnNiQ0lzQ2lBZ0lDQWlkMkZ6SUcxNUlHWmhZMlVnY21Wa0lpd0tJQ0FnSUNKM1lYUmphQ0I1YjNWeUlIUnZibWQxWlNJc0NpQWdJQ0FpZDJWaUlHOW1JR2x1ZEhKcFozVmxJaXdLSUNBZ0lDSjNaV1ZySUc5bUlGTjFibVJoZVhNaUxBb2dJQ0FnSW5kb1lYUWdZU0JpZFcxdFpYSWlMQW9nSUNBZ0luZG9ZWFFnWTI5dFpYTWdZWEp2ZFc1a0xDQm5iMlZ6SUdGeWIzVnVaQ0lzQ2lBZ0lDQWlkMmhoZENCMGFHVWdZMkYwSUdSeVlXZG5aV1FnYVc0aUxBb2dJQ0FnSW5kb1lYUWdkR2hsSUdScFkydGxibk1pTEFvZ0lDQWdJbmRvWVhRZ2RHaGxJR2hsWTJzaUxBb2dJQ0FnSW5kb1lYUWdkR2hsSUdobGJHd2lMQW9nSUNBZ0luZG9ZWFFnZVc5MUlITmxaU0JwY3lCM2FHRjBJSGx2ZFNCblpYUWlMQW9nSUNBZ0luZG9aVzRnY0hWemFDQmpiMjFsY3lCMGJ5QnphRzkyWlNJc0NpQWdJQ0FpZDJobGJpQnlkV0ppWlhJZ2JXVmxkSE1nZEdobElISnZZV1FpTEFvZ0lDQWdJbmRvWlc0Z2RHaGxJR05oZENkeklHRjNZWGtpTEFvZ0lDQWdJbmRvWlc0Z2RHaGxJR2R2YVc1bklHZGxkSE1nZEc5MVoyZ3NJSFJvWlNCMGIzVm5hQ0JuWlhRZ1oyOXBibWNpTEFvZ0lDQWdJbmRvYnlCb1lYTWdaWFpsY25sMGFHbHVaeUlzQ2lBZ0lDQWlkMmh2YkdVZ1ltRnNiQ0J2WmlCM1lYZ2lMQW9nSUNBZ0luZG9iMnhsSUdodlp5SXNDaUFnSUNBaWQyaHZiR1VnYm1sdVpTQjVZWEprY3lJc0NpQWdJQ0FpZDJodmJHVWdiM1JvWlhJZ2MzUnZjbmtpTEFvZ0lDQWdJbmRwYkdRZ1oyOXZjMlVnWTJoaGMyVWlMQW9nSUNBZ0luZHBiR1FnYjJGMGN5SXNDaUFnSUNBaWQybHNiQ0IzYjI1a1pYSnpJRzVsZG1WeUlHTmxZWE5sSWl3S0lDQWdJQ0ozYVc0Z1puSnBaVzVrY3lCaGJtUWdhVzVtYkhWbGJtTmxJSEJsYjNCc1pTSXNDaUFnSUNBaWQybHVJRzl1WlNCbWIzSWdkR2hsSUVkcGNIQmxJaXdLSUNBZ0lDSjNhVzV1YVc1bklHbHpJR1YyWlhKNWRHaHBibWNpTEFvZ0lDQWdJbmRwYzJSdmJTQnZaaUIwYUdVZ1lXZGxjeUlzQ2lBZ0lDQWlkMmwwYUc5MWRDQmlaVzVsWm1sMElHOW1JR05zWlhKbmVTSXNDaUFnSUNBaWQyOXNaaUJoZENCMGFHVWdaRzl2Y2lJc0NpQWdJQ0FpZDI5eVpITWdabUZwYkNJc0NpQWdJQ0FpZDI5eWF5QnNhV3RsSUdFZ1pHOW5JaXdLSUNBZ0lDSjNiM0p6ZENCdWFXZG9kRzFoY21VaUxBb2dJQ0FnSW5keWIyNW5JSE5wWkdVZ2IyWWdkR2hsSUdKbFpDSXNDaUFnSUNBaWVXVmhjbk1nZVc5MWJtY2lMQW9nSUNBZ0lubGxiR3h2ZHlCcWIzVnlibUZzYVhOdElpd0tJQ0FnSUNKNWIzVWdZWEpsSUhkb1lYUWdlVzkxSUdWaGRDSXNDaUFnSUNBaWVXOTFJR05oYmlCeWRXNHNJR0oxZENCNWIzVWdZMkZ1SjNRZ2FHbGtaU0lzQ2lBZ0lDQWllVzkxSUd0dWIzY2dkMmhoZENCMGFHVjVJSE5oZVNJc0NpQWdJQ0FpZVc5MWJtY2dZVzVrSUdadmIyeHBjMmdpTEFvZ0lDQWdJbmx2ZFc1bklHRnVaQ0J5WlhOMGJHVnpjeUlzQ2lBZ0lDQWllWFZ3Y0dsbElpd0tJQ0FnSUNJeU1DOHlNQ0JvYVc1a2MybG5hSFFpTEFvZ0lDQWdJa2hwY3lCbGJHVjJZWFJ2Y2lCa2IyVnpiaWQwSUdkdklIUnZJSFJvWlNCMGIzQWdabXh2YjNJaUxBb2dJQ0FnSWtGc2JDQm1iMkZ0TENCdWJ5QmlaV1VpTEFvZ0lDQWdJa2hwY3lCaWNtVmhaQ0JoYVc0bmRDQmtiMjVsSWl3S0lDQWdJQ0pJYVhNZ2VXVmhjM1FnZDJWdWRDQmlZV1FpTEFvZ0lDQWdJa2hsSUdOdmRXeGtiaWQwSUhCdmRYSWdkMkYwWlhJZ2IzVjBJRzltSUdFZ1ltOXZkQ0IzYVhSb0lHbHVjM1J5ZFdOMGFXOXVjeUJ3Y21sdWRHVmtJRzl1SUhSb1pTQm9aV1ZzSWl3S0lDQWdJQ0pVYUdVZ1kyaGxaWE5sSUhOc2FXUWdiMlptSUdocGN5QmpjbUZqYTJWeUlpd0tJQ0FnSUNKVWFHVWdiR2xuYUhRZ2FYTWdiMjRzSUdKMWRDQnViMkp2WkhrZ2FYTWdhRzl0WlM0aUxBb2dJQ0FnSWxSb1pYSmxKM01nYm05MGFHbHVaeUJwYmlCMGFHVWdZWFIwYVdNZ1luVjBJR052WW5kbFluTXVJaXdLSUNBZ0lDSlVhR1VnZDJobFpXd2dhWE1nZEhWeWJtbHVaeXdnWW5WMElIUm9aU0JvWVcxemRHVnlJR2x6SUdSbFlXUXVJaXdLSUNBZ0lDSkNiMlI1SUdKNUlFWnBjMmhsY2l3Z1luSmhhVzV6SUdKNUlFMWhkSFJsYkM0aUxBb2dJQ0FnSWxSb1pTQm5ZWFJsY3lCaGNtVWdaRzkzYml3Z2RHaGxJR3hwWjJoMGN5QmhjbVVnWm14aGMyaHBibWNzSUdKMWRDQjBhR1Z5WlNCcGN5QnVieUIwY21GcGJpNGlMQW9nSUNBZ0lsTnZiV1YzYUdWeVpTQmhJSFpwYkd4aFoyVWdhWE1nYldsemMybHVaeUJwZEhNZ2FXUnBiM1FpTEFvZ0lDQWdJa2hsSUdSdmJtRjBaV1FnYUdseklHSnlZV2x1SUhSdklITmphV1Z1WTJVdUlGTmphV1Z1WTJVZ2MyVnVkQ0JwZENCaVlXTnJMaUlzQ2lBZ0lDQWlTR1VnWm1Wc2JDQnZkWFFnYjJZZ2RHaGxJRk4wZFhCcFpDQlVjbVZsSUdGdVpDQm9hWFFnWlhabGNua2dZbkpoYm1Ob0lHOXVJR2hwY3lCM1lYa2daRzkzYmk0aUxBb2dJQ0FnSWxSb1pTQnpkR0Z5ZEdsdVp5Qm5ZWFJsSUdseklHOXdaVzRzSUdKMWRDQm9aU2R6SUhOMGFXeHNJR0Z6YTJsdVp5QmthWEpsWTNScGIyNXpMaUlzQ2lBZ0lDQWlRU0JtWlhjZ1kyRnVjeUJ6YUc5eWRDQnZaaUJoSUhOcGVDMXdZV05yTGlJc0NpQWdJQ0FpU0dseklIQnBiRzkwSUd4cFoyaDBJR2x6YmlkMElHeHBkQzRpTEFvZ0lDQWdJa2xtSUdKeVlXbHVjeUIzWlhKbElHUjVibUZ0YVhSbExDQm9aU0JqYjNWc1pHNG5kQ0JpYkc5M0lHaHBjeUJ1YjNObExpSXNDaUFnSUNBaVNYUWdkR0ZyWlhNZ2FHbHRJR0Z1SUdodmRYSWdkRzhnWTI5dmF5Qk5hVzUxZEdVZ1VtbGpaUzRpQ2lBZ0lDQmRLUW9LVWtWRVZVNUVRVTVVSUQwZ2V3b2dJQ0FnSUNBZ0lDZFFUU0JwYmlCMGFHVWdZV1owWlhKdWIyOXVKem9nSjFCTkp5d0tJQ0FnSUNBZ0lDQW5RVTBnYVc0Z2RHaGxJRzF2Y201cGJtY25PaUFuUVUwbkxBb2dJQ0FnSUNBZ0lDZHVaV05sYzNOaGNua2djbVZ4ZFdseVpXMWxiblJ6SnpvZ0ozSmxjWFZwY21WdFpXNTBjeWNzQ2lBZ0lDQWdJQ0FnSjI1bFkyVnpjMkZ5ZVNCeVpYRjFhWEpsYldWdWRDQW5PaUFuY21WeGRXbHlaVzFsYm5RbkxBb2dJQ0FnSUNBZ0lDZHpiV0ZzYkdWeUlHbHVJSE5wZW1Vbk9pQW5jMjFoYkd4bGNpY3NDaUFnSUNBZ0lDQWdKMloxZEhWeVpTQmpZVzVrYVdSaGRHVW5PaUFuWTJGdVpHbGtZWFJsSnl3S0lDQWdJQ0FnSUNBbmJHRnlaMlZ5SUdsdUlITnBlbVVuT2lBbmJHRnlaMlZ5Snl3S0lDQWdJQ0FnSUNBblltbG5aMlZ5SUdsdUlITnBlbVVuT2lBblltbG5aMlZ5Snl3S0lDQWdJQ0FnSUNBbmJXOXpkQ0IxYm1seGRXVW5PaUFuZFc1cGNYVmxKeXdLSUNBZ0lDQWdJQ0FuY21WemRXeDBZVzUwSUdWbVptVmpkQ2M2SUNkeVpYTjFiSFFuTEFvZ0lDQWdJQ0FnSUNkbGJtUWdjbVZ6ZFd4MEp6b2dKM0psYzNWc2RDY3NDaUFnSUNBZ0lDQWdKM0J2YjJ4bFpDQjBiMmRsZEdobGNpYzZJQ2R3YjI5c1pXUW5MQW9nSUNBZ0lDQWdJQ2RoYzNObGJXSnNaU0IwYjJkbGRHaGxjaWM2SUNkaGMzTmxiV0pzWlNjc0NpQWdJQ0FnSUNBZ0oyWmxkMlZ5SUdsdUlHNTFiV0psY2ljNklDZG1aWGRsY2ljc0NpQWdJQ0FnSUNBZ0oyVjRZV04wYkhrZ2RHaGxJSE5oYldVbk9pQW5kR2hsSUhOaGJXVW5MQW9nSUNBZ0lDQWdJQ2R5WlhabGNuUWdZbUZqYXljNklDZHlaWFpsY25RbkxBb2dJQ0FnSUNBZ0lDZHlaWFpsY25SbFpDQmlZV05ySnpvZ0ozSmxkbVZ5ZEdWa0p5d0tJQ0FnSUNBZ0lDQW5jMmh2Y25SbGNpQnBiaUJzWlc1bmRHZ25PaUFuYzJodmNuUmxjaWNzQ2lBZ0lDQWdJQ0FnSjJ4dmJtZGxjaUJwYmlCc1pXNW5kR2duT2lBbmJHOXVaMlZ5Snl3S0lDQWdJQ0FnSUNBbmMzVnRiV0Z5YVhwbElHSnlhV1ZtYkhrbk9pQW5jM1Z0YldGeWFYcGxKeXdLSUNBZ0lDQWdJQ0FuWW5KcFpXWnNlU0J6ZFcxdFlYSnBlbVVuT2lBbmMzVnRiV0Z5YVhwbEp5d0tJQ0FnSUNBZ0lDQW5ZU0IwYjNSaGJDQnZaaWM2SUNkMFpXNGdjMkZ0Y0d4bGN5Y3NDaUFnSUNBZ0lDQWdKMEVnZEc5MFlXd2diMlluT2lBblZHVnVJSE5oYlhCc1pYTW5MQW9nSUNBZ0lDQWdJQ2RqYkc5elpTQndjbTk0YVcxcGRIa25PaUFuY0hKdmVHbHRhWFI1Snl3S0lDQWdJQ0FnSUNBblpXRmphQ0JoYm1RZ1pYWmxjbmtuT2lBblpXRmphQ2NzQ2lBZ0lDQWdJQ0FnSjBWaFkyZ2dZVzVrSUdWMlpYSjVKem9nSjBWaFkyZ25MQW9nSUNBZ0lDQWdJQ2R0WVd0bElHRWdjM1IxWkhrZ2IyWW5PaUFuYzNSMVpIa25MQW9nSUNBZ0lDQWdJQ2R0WVdSbElHRWdjM1IxWkhrZ2IyWW5PaUFuYzNSMVpHbGxaQ2NzQ2lBZ0lDQWdJQ0FnSjJOdmJtUjFZM1FnWVc0Z2FXNTJaWE4wYVdkaGRHbHZiaUJ2WmljNklDZHBiblpsYzNScFoyRjBaU2NzQ2lBZ0lDQWdJQ0FnSjJOdmJtUjFZM1FnYVc1MlpYTjBhV2RoZEdsdmJpQnZaaWM2SUNkcGJuWmxjM1JwWjJGMFpTY3NDaUFnSUNBZ0lDQWdKMk52Ym1SMVkzUWdkR2hsSUdsdWRtVnpkR2xuWVhScGIyNGdiMlluT2lBbmFXNTJaWE4wYVdkaGRHVW5MQW9nSUNBZ0lDQWdJQ2RqYjI1a2RXTjBaV1FnWVc0Z2FXNTJaWE4wYVdkaGRHbHZiaUJ2WmljNklDZHBiblpsYzNScFoyRjBaV1FuTEFvZ0lDQWdJQ0FnSUNkamIyNWtkV04wWldRZ2FXNTJaWE4wYVdkaGRHbHZiaUJ2WmljNklDZHBiblpsYzNScFoyRjBaV1FuTEFvZ0lDQWdJQ0FnSUNkamIyNWtkV04wWldRZ2RHaGxJR2x1ZG1WemRHbG5ZWFJwYjI0Z2IyWW5PaUFuYVc1MlpYTjBhV2RoZEdWa0p5d0tJQ0FnSUNBZ0lDQW5ZV3h5WldGa2VTQmxlR2x6ZENjNklDZGxlR2x6ZENjc0NpQWdJQ0FnSUNBZ0oyRnNkR1Z5Ym1GMGFYWmxJR05vYjJsalpTYzZJQ2RqYUc5cFkyVW5MQW9nSUNBZ0lDQWdJQ2RpWVhOcFl5Qm1kVzVrWVcxbGJuUmhiSE1uT2lBblpuVnVaR0Z0Wlc1MFlXeHpKeXdLSUNBZ0lDQWdJQ0FuWTI5dWRHbHVkV1VnZEc4Z2NtVnRZV2x1SnpvZ0ozSmxiV0ZwYmljc0NpQWdJQ0FnSUNBZ0oyTnZiblJwYm5WbGN5QjBieUJ5WlcxaGFXNG5PaUFuY21WdFlXbHVjeWNzQ2lBZ0lDQWdJQ0FnSjNKbGJXRnBibk1nYzNScGJHd25PaUFuY21WdFlXbHVjeWNzQ2lBZ0lDQWdJQ0FnSjNKbGJXRnBiaUJ6ZEdsc2JDYzZJQ2R5WlcxaGFXNG5MQW9nSUNBZ0lDQWdJQ2R6ZEdsc2JDQnlaVzFoYVc0bk9pQW5jbVZ0WVdsdUp5d0tJQ0FnSUNBZ0lDQW5ZM1Z5Y21WdWRHeDVJR0psYVc1bkp6b2dKMkpsYVc1bkp5d0tJQ0FnSUNBZ0lDQW5ZM1Z5Y21WdWRHeDVJSFZ1WkdWeWQyRjVKem9nSjNWdVpHVnlkMkY1Snl3S0lDQWdJQ0FnSUNBblpXMXdkSGtnYzNCaFkyVW5PaUFuYzNCaFkyVW5MQW9nSUNBZ0lDQWdJQ2RwYm5SeWIyUjFZMlVnWVNCdVpYY25PaUFuYVc1MGNtOWtkV05sSnl3S0lDQWdJQ0FnSUNBbmFXNTBjbTlrZFdObFpDQmhJRzVsZHljNklDZHBiblJ5YjJSMVkyVmtKeXdLSUNBZ0lDQWdJQ0FuYldsNElIUnZaMlYwYUdWeUp6b2dKMjFwZUNJdUp5d0tJQ0FnSUNBZ0lDQW5ibVYyWlhJZ1ltVm1iM0psSnpvZ0oyNWxkbVZ5Snl3S0lDQWdJQ0FnSUNBbmNHVnlhVzlrSUc5bUlIUnBiV1VuT2lBbmNHVnlhVzlrSnl3S0ozTmxjR0Z5WVhSbElHVnVkR2wwYVdWekp6b2dKMlZ1ZEdsMGFXVnpKeXdLSUNBZ0lDZHpkR2xzYkNCd1pYSnphWE4wSnpvZ0ozQmxjbk5wYzNRbkxBb2dJQ0FnSjNKbGRIVnliaUJpWVdOckp6b2dKM0psZEhWeWJpY3NDaUFnSUNBbmNtVjBkWEp1WldRZ1ltRmpheWM2SUNkeVpYUjFjbTVsWkNjc0NpQWdJQ0FuZEhKMVpTQm1ZV04wSnpvZ0oyWmhZM1FuTEFvZ0lDQWdKM0psY0dWaGRHVmtJR0ZuWVdsdUp6b2dKM0psY0dWaGRHVmtKeXdLSUNBZ0lDZHlaWEJsWVhScGJtY2dZV2RoYVc0bk9pQW5jbVZ3WldGMFpXUW5MQW9nSUNBZ0ozSmxjR1ZoZENCaFoyRnBiaWM2SUNkeVpYQmxZWFJsWkNjc0NpQWdJQ0FuWVd4eVpXRmtlU0JvWVhNZ1ltVmxiaWM2SUNkb1lYTWdZbVZsYmljc0NpQWdJQ0FuWVd4eVpXRmtlU0JvWVhabElHSmxaVzRuT2lBbmFHRjJaU0JpWldWdUp5d0tJQ0FnSUNkcWIybHVJSFJ2WjJWMGFHVnlKem9nSjJwdmFXNG5MQW9nSUNBZ0oycHZhVzVsWkNCMGIyZGxkR2hsY2ljNklDZHFiMmx1Snl3S0lDQWdJQ2R0YVdkb2RDQndiM056YVdKc2VTYzZJQ2R0YVdkb2RDY3NDaUFnSUNBbmJXbG5hSFFnY0dWeWFHRndjeWM2SUNkdGFXZG9kQ2NzQ2lBZ0lDQW5iWFZ6ZENCdVpXTmxjM05oY21sc2VTYzZJQ2R0ZFhOMEp5d0tJQ0FnSUNkdGRYTjBJR2x1WlhacGRHRmliSGtuT2lBbmJYVnpkQ2NzQ2lBZ0lDQW5iWFZ6ZENCdVpXTmxjM05oY25rbk9pQW5iWFZ6ZENjc0NpQWdJQ0FuYlhWemRDQmtaV1pwYm1sMFpXeDVKem9nSjIxMWMzUW5MQW9nSUNBZ0ozQnlaWFpwYjNWeklHVjRjR1Z5YVdWdVkyVW5PaUFuWlhod1pYSnBaVzVqWlNjc0NpQWdJQ0FuY0hKcGIzSWdaWGh3WlhKcFpXNWpaU2M2SUNkbGVIQmxjbWxsYm1ObEp5d0tJQ0FnSUNkd1lYTjBJR1Y0Y0dWeWFXVnVZMlVuT2lBblpYaHdaWEpwWlc1alpTY3NDaUFnSUNBblptbHljM1FnWTI5dVkyVnBkbVZrSnpvZ0oyTnZibU5sYVhabFpDY3NDaUFnSUNBbllXTjBkV0ZzSUdaaFkzUW5PaUFuWm1GamRDY3NDaUFnSUNBbllXUjJZVzVqWlNCbWIzSjNZWEprSnpvZ0oyRmtkbUZ1WTJVbkxBb2dJQ0FnSjJGa1pDQmhiaUJoWkdScGRHbHZibUZzSnpvZ0oyRmtaQ2NzQ2lBZ0lDQW5ZV1JrWldRZ1ltOXVkWE1uT2lBblltOXVkWE1uTEFvZ0lDQWdKMkZzYkMxMGFXMWxJSEpsWTI5eVpDYzZJQ2R5WldOdmNtUW5MQW9nSUNBZ0oyRnNkR1Z5Ym1GMGFYWmxJR05vYjJsalpTYzZJQ2RqYUc5cFkyVW5MQW9nSUNBZ0oyRnVaQ0JsZEdNdUp6b2dKMlYwWXk0bkxBb2dJQ0FnSjJGdWIyNTViVzkxY3lCemRISmhibWRsY2ljNklDZHpkSEpoYm1kbGNpY3NDaUFnSUNBbllXNXVkV0ZzSUdGdWJtbDJaWEp6WVhKNUp6b2dKMkZ1Ym1sMlpYSnpZWEo1Snl3S0lDQWdJQ2RoYzJzZ2RHaGxJSEYxWlhOMGFXOXVKem9nSjJGemF5Y3NDaUFnSUNBblFWUk5JRzFoWTJocGJtVW5PaUFuUVZSTkp5d0tJQ0FnSUNkaVlXeGtMV2hsWVdSbFpDYzZJQ2RpWVd4a0p5d0tJQ0FnSUNkaVpYTjBJR1YyWlhJbk9pQW5ZbVZ6ZENjc0NpQWdJQ0FuWW05MWNYVmxkQ0J2WmlCbWJHOTNaWEp6SnpvZ0oySnZkWEYxWlhRbkxBb2dJQ0FnSjJKeWFXVm1JR2x1SUdSMWNtRjBhVzl1SnpvZ0oySnlhV1ZtSnl3S0lDQWdJQ2RqWVdOdmNHaHZibmtnYjJZZ2MyOTFibVFuT2lBblkyRmpiM0JvYjI1NUp5d0tJQ0FnSUNkallYSmxablZzSUhOamNuVjBhVzU1SnpvZ0ozTmpjblYwYVc1NUp5d0tJQ0FnSUNkallYTm9JRzF2Ym1WNUp6b2dKMk5oYzJnbkxBb2dJQ0FnSjJOc1lYTnphV1o1SUdsdWRHOGdaM0p2ZFhCekp6b2dKMk5zWVhOemFXWjVKeXdLSUNBZ0lDZGpiRzl6WlNCd2NtOTRhVzFwZEhrbk9pQW5jSEp2ZUdsdGFYUjVKeXdLSUNBZ0lDZGpiMjF0ZFhSbElHSmhZMnNnWVc1a0lHWnZjblJvSnpvZ0oyTnZiVzExZEdVbkxBb2dJQ0FnSjJOdmJYQmxkR1VnZDJsMGFDQmxZV05vSUc5MGFHVnlKem9nSjJOdmJYQmxkR1VuTEFvZ0lDQWdKMk52YlhCdmJtVnVkQ0J3WVhKMEp6b2dKM0JoY25RbkxBb2dJQ0FnSjJOdmJtWjFjMlZrSUhOMFlYUmxKem9nSjJOdmJtWjFjMlZrSnl3S0lDQWdJQ2RqYjI1emRHRnVkR3g1SUcxaGFXNTBZV2x1WldRbk9pQW5KeXdLSUNBZ0lDZGpjbWx6YVhNZ2MybDBkV0YwYVc5dUp6b2dKMk55YVhOcGN5Y3NDaUFnSUNBblkzVnljbVZ1ZENCMGNtVnVaQ2M2SUNkMGNtVnVaQ2NzQ2lBZ0lDQW5aR1Z3Y21WamFXRjBaU0JwYmlCMllXeDFaU2M2SUNka1pYQnlaV05wWVhSbEp5d0tJQ0FnSUNka1pYQnlaV05wWVhSbGN5QnBiaUIyWVd4MVpTYzZJQ2RrWlhCeVpXTnBZWFJsY3ljc0NpQWdJQ0FuWkdWd2NtVmphV0YwWldRZ2FXNGdkbUZzZFdVbk9pQW5aR1Z3Y21WamFXRjBaV1FuTEFvZ0lDQWdKMlJsYzJseVlXSnNaU0JpWlc1bFptbDBKem9nSjJKbGJtVm1hWFFuTEFvZ0lDQWdKMlJwYzJGd2NHVmhjaUJtY205dElITnBaMmgwSnpvZ0oyUnBjMkZ3Y0dWaGNpY3NDaUFnSUNBblpHbHpZWEJ3WldGeVpXUWdabkp2YlNCemFXZG9kQ2M2SUNka2FYTmhjSEJsWVhKbFpDY3NDaUFnSUNBblpXRnliR2xsY2lCcGJpQjBhVzFsSnpvZ0p5Y3NDaUFnSUNBblpXeHBiV2x1WVhSbElHRnNkRzluWlhSb1pYSW5PaUFuWld4cGJXbHVZWFJsSnl3S0lDQWdJQ2RsYldWeVoyVnVZM2tnYzJsMGRXRjBhVzl1SnpvZ0oyVnRaWEpuWlc1amVTY3NDaUFnSUNBblpXNWpiRzl6WldRZ2FHVnlaV2x1SnpvZ0oyVnVZMnh2YzJWa0p5d0tJQ0FnSUNkbGJtUWdjbVZ6ZFd4MEp6b2dKM0psYzNWc2RDY3NDaUFnSUNBblpXNTBaWElnYVc0Z0p6b2dKMlZ1ZEdWeUp5d0tJQ0FnSUNkbGJuUnBjbVZzZVNCbGJHbHRhVzVoZEdVbk9pQW5aV3hwYldsdVlYUmxKeXdLSUNBZ0lDZGxjWFZoYkNCMGJ5QnZibVVnWVc1dmRHaGxjaWM2SUNkbGNYVmhiQ2NzQ2lBZ0lDQW5aWEYxWVd4eklIUnZJRzl1WlNCaGJtOTBhR1Z5SnpvZ0oyVnhkV0ZzSnl3S0lDQWdJQ2RsY21Ga2FXTmhkR1VnWTI5dGNHeGxkR1ZzZVNjNklDZGxjbUZrYVdOaGRHVW5MQW9nSUNBZ0oyVnpkR2x0WVhSbFpDQmhkQ0JoWW05MWRDYzZJQ2RsYzNScGJXRjBaV1FnWVhRbkxBb2dJQ0FnSjJWMmIyeDJaU0J2ZG1WeUlIUnBiV1VuT2lBblpYWnZiSFpsSnl3S0lDQWdJQ2RsZUdGamRDQnpZVzFsSnpvZ0ozTmhiV1VuTEFvZ0lDQWdKMlpoWTJVZ2JXRnpheWM2SUNkdFlYTnJKeXdLSUNBZ0lDZG1aWGNnYVc0Z2JuVnRZbVZ5SnpvZ0oyWmxkeWNzQ2lBZ0lDQW5abWx5YzNRZ1lXNWtJR1p2Y21WdGIzTjBKem9nSjJacGNuTjBKeXdLSUNBZ0lDZEdhWEp6ZENCaGJtUWdabTl5WlcxdmMzUW5PaUFuUm1seWMzUW5MQW9nSUNBZ0oyWnBjbk4wSUc5bUlHRnNiQ2M2SUNkbWFYSnpkQ2NzQ2lBZ0lDQW5SbWx5YzNRZ2IyWWdZV3hzSnpvZ0owWnBjbk4wSnl3S0lDQWdJQ2RtYkhrZ2RHaHliM1ZuYUNCMGFHVWdZV2x5SnpvZ0oyWnNlU2NzQ2lBZ0lDQW5abTlzYkc5M0lHRm1kR1Z5SnpvZ0oyWnZiR3h2ZHljc0NpQWdJQ0FuWm05eVpXbG5iaUJwYlhCdmNuUnpKem9nSjJsdGNHOXlkSE1uTEFvZ0lDQWdKMlp5WldVZ1oybG1kQ2M2SUNkbmFXWjBKeXdLSUNBZ0lDZG1kV3hzSUhOaGRHbHpabUZqZEdsdmJpYzZJQ2R6WVhScGMyWmhZM1JwYjI0bkxBb2dJQ0FnSjJkbGJtVnlZV3dnY0hWaWJHbGpKem9nSjNCMVlteHBZeWNzQ2lBZ0lDQW5SMUpGSUdWNFlXMG5PaUFuUjFKRkp5d0tJQ0FnSUNkbmNtOTNJR2x1SUhOcGVtVW5PaUFuWjNKdmR5Y3NDaUFnSUNBbmFHRnliV1oxYkNCcGJtcDFjbWxsY3ljNklDZHBibXAxY21sbGN5Y3NDaUFnSUNBbmFHRnliV1oxYkNCcGJtcDFjbmtuT2lBbmFXNXFkWEo1Snl3S0lDQWdJQ2RJU1ZZZ2RtbHlkWE1uT2lBblNFbFdKeXdLSUNBZ0lDZG9iMnhzYjNjZ2RIVmlaU2M2SUNkMGRXSmxKeXdLSUNBZ0lDZHBibU55WldScFlteGxJSFJ2SUdKbGJHbGxkbVVuT2lBbmFXNWpjbVZrYVdKc1pTY3NDaUFnSUNBbmFXNTBaV2R5WVhSbElIZHBkR2dnWldGamFDQnZkR2hsY2ljNklDZHBiblJsWjNKaGRHVW5MQW9nSUNBZ0oybHVkR1ZuY21GMFpXUWdkMmwwYUNCbFlXTm9JRzkwYUdWeUp6b2dKMmx1ZEdWbmNtRjBaV1FuTEFvZ0lDQWdKMmx1ZEdWeVpHVndaVzVrWlc1MElHOXVJR1ZoWTJnZ2IzUm9aWEluT2lBbmFXNTBaWEprWlhCbGJtUmxiblFuTEFvZ0lDQWdKMmx5Y21WbllYSmtiR1Z6Y3ljNklDZHlaV2RoY21Sc1pYTnpKeXdLSUNBZ0lDZHFiMmx1ZENCamIyeHNZV0p2Y21GMGFXOXVKem9nSjJOdmJHeGhZbTl5WVhScGIyNG5MQW9nSUNBZ0oydHViM2RzWldSblpXRmliR1VnWlhod1pYSjBKem9nSjJWNGNHVnlkQ2NzQ2lBZ0lDQW5iR0ZuSUdKbGFHbHVaQ2M2SUNkc1lXY25MQW9nSUNBZ0oweERSQ0JrYVhOd2JHRjVKem9nSjB4RFJDY3NDaUFnSUNBbmJHbDBkR3hsSUdKaFlua25PaUFuWW1GaWVTY3NDaUFnSUNBbmJHOWpZV3dnY21WemFXUmxiblFuT2lBbmNtVnphV1JsYm5RbkxBb2dJQ0FnSjJ4dmIyc2dZbUZqYXlCcGJpQnlaWFJ5YjNOd1pXTjBKem9nSjJ4dmIyc2dZbUZqYXljc0NpQWdJQ0FuYldGdWRXRnNiSGtnWW5rZ2FHRnVaQ2M2SUNkdFlXNTFZV3hzZVNjc0NpQWdJQ0FuYldWbGRDQjNhWFJvSUdWaFkyZ2diM1JvWlhJbk9pQW5iV1ZsZENjc0NpQWdJQ0FuYldWdWRHRnNJSFJsYkdWd1lYUm9lU2M2SUNkMFpXeGxjR0YwYUhrbkxBb2dJQ0FnSjIxMWRIVmhiQ0JqYjI5d1pYSmhkR2x2YmljNklDZGpiMjl3WlhKaGRHbHZiaWNzQ2lBZ0lDQW5iWFYwZFdGc2JIa2dhVzUwWlhKa1pYQmxibVJsYm5Rbk9pQW5hVzUwWlhKa1pYQmxibVJsYm5RbkxBb2dJQ0FnSjIxMWRIVmhiQ0J5WlhOd1pXTjBJR1p2Y2lCbFlXTm9JRzkwYUdWeUp6b2dKMjExZEhWaGJDQnlaWE53WldOMEp5d0tJQ0FnSUNkdVlYUjFjbUZzSUdsdWMzUnBibU4wSnpvZ0oybHVjM1JwYm1OMEp5d0tJQ0FnSUNkdWIyNWxJR0YwSUdGc2JDYzZJQ2R1YjI1bEp5d0tJQ0FnSUNkdWIzTjBZV3huYVdFZ1ptOXlJSFJvWlNCd1lYTjBKem9nSjI1dmMzUmhiR2RwWVNjc0NpQWdJQ0FuYm05M0lIQmxibVJwYm1jbk9pQW5jR1Z1WkdsdVp5Y3NDaUFnSUNBbmIzSmhiQ0JqYjI1MlpYSnpZWFJwYjI0bk9pQW5ZMjl1ZG1WeWMyRjBhVzl1Snl3S0lDQWdJQ2R2ZFhSemFXUmxJR2x1SUhSb1pTQjVZWEprSnpvZ0oybHVJSFJvWlNCNVlYSmtKeXdLSUNBZ0lDZHZkWFJ6YVdSbElHOW1Kem9nSjI5MWRITnBaR1VuTEFvZ0lDQWdKMjkyWlhJZ1pYaGhaMmRsY21GMFpTYzZJQ2RsZUdGbloyVnlZWFJsSnl3S0lDQWdJQ2R3WVdseUlHOW1JSFIzYVc1ekp6b2dKM1IzYVc1ekp5d0tJQ0FnSUNkd1lXeHRJRzltSUhSb1pTQm9ZVzVrSnpvZ0ozQmhiRzBuTEFvZ0lDQWdKM0JsYm1WMGNtRjBaU0JwYm5Sdkp6b2dKM0JsYm1WMGNtRjBaU2NzQ2lBZ0lDQW5jR1Z5YVc5a0lHOW1JSFJwYldVbk9pQW5jR1Z5YVc5a0p5d0tJQ0FnSUNkd2FXTnJJR0Z1WkNCamFHOXZjMlVuT2lBblkyaHZiM05sSnl3S0lDQWdJQ2R3YjJ4aGNpQnZjSEJ2YzJsMFpYTW5PaUFuYjNCd2IzTnBkR1Z6Snl3S0lDQWdJQ2R3YjNOMGNHOXVaU0IxYm5ScGJDQnNZWFJsY2ljNklDZHdiM04wY0c5dVpTY3NDaUFnSUNBbmNISmxkbWx2ZFhOc2VTQnNhWE4wWldRZ1lXSnZkbVVuT2lBbmJHbHpkR1ZrSUdGaWIzWmxKeXdLSUNBZ0lDZHdjbTlqWldWa0lHRm9aV0ZrSnpvZ0ozQnliMk5sWldRbkxBb2dJQ0FnSjNCMWNuTjFaU0JoWm5SbGNpYzZJQ2R3ZFhKemRXVW5MQW9nSUNBZ0oxSkJUU0J0WlcxdmNua25PaUFuVWtGTkp5d0tJQ0FnSUNkeVpXTjFjaUJoWjJGcGJpYzZJQ2R5WldOMWNpY3NDaUFnSUNBbmNtVmpkWEp5WldRZ1lXZGhhVzRuT2lBbmNtVmpkWEp5WldRbkxBb2dJQ0FnSjNKbFozVnNZWElnY205MWRHbHVaU2M2SUNkeWIzVjBhVzVsSnl3S0lDQWdJQ2R5YjNWdVpDQnBiaUJ6YUdGd1pTYzZJQ2R5YjNWdVpDY3NDaUFnSUNBbmMyRnRaU0JsZUdGamRDYzZJQ2R6WVcxbEp5d0tJQ0FnSUNkellXNWtJR1IxYm1Vbk9pQW5aSFZ1WlNjc0NpQWdJQ0FuYzJOeWRYUnBibWw2WlNCcGJpQmtaWFJoYVd3bk9pQW5jMk55ZFhScGJtbDZaU2NzQ2lBZ0lDQW5jMk55ZFhScGJtbDZaV1FnYVc0Z1pHVjBZV2xzSnpvZ0ozTmpjblYwYVc1cGVtVmtKeXdLSUNBZ0lDZHpaWEJoY21GMFpXUWdZWEJoY25RZ1puSnZiU0JsWVdOb0lHOTBhR1Z5SnpvZ0ozTmxjR0Z5WVhSbFpDY3NDaUFnSUNBbmMyVnlhVzkxY3lCa1lXNW5aWEluT2lBblpHRnVaMlZ5Snl3S0lDQWdJQ2R6YUdsdWVTQnBiaUJoY0hCbFlYSmhibU5sSnpvZ0ozTm9hVzU1Snl3S0lDQWdJQ2R6Y0dWc2JDQnZkWFFnYVc0Z1pHVjBZV2xzSnpvZ0ozTndaV3hzSUc5MWRDY3NDaUFnSUNBbmMzUmhjblFnYjJabUp6b2dKM04wWVhKMEp5d0tJQ0FnSUNkemRXUmtaVzRnYVcxd2RXeHpaU2M2SUNkcGJYQjFiSE5sSnl3S0lDQWdJQ2R6ZFcwZ2RHOTBZV3duT2lBbmMzVnRKeXdLSUNBZ0lDZHpkWEp5YjNWdVpHVmtJRzl1SUdGc2JDQnphV1JsY3ljNklDZHpkWEp5YjNWdVpHVmtKeXdLSUNBZ0lDZDBhVzFsSUhCbGNtbHZaQ2M2SUNkd1pYSnBiMlFuTEFvZ0lDQWdKM1JwYm5rZ1ltbDBKem9nSjJKcGRDY3NDaUFnSUNBbmRHOTBZV3dnWkdWemRISjFZM1JwYjI0bk9pQW5aR1Z6ZEhKMVkzUnBiMjRuTEFvZ0lDQWdKM1J5ZFd4NUlITnBibU5sY21Vbk9pQW5jMmx1WTJWeVpTY3NDaUFnSUNBbmRIZHZJR1Z4ZFdGc0lHaGhiSFpsY3ljNklDZG9ZV3gyWlhNbkxBb2dJQ0FnSjNWc2RHbHRZWFJsSUdkdllXd25PaUFuWjI5aGJDY3NDaUFnSUNBbmRXNWtaWEpuY21Ga2RXRjBaU0J6ZEhWa1pXNTBKem9nSjNWdVpHVnlaM0poWkhWaGRHVW5MQW9nSUNBZ0ozVnVaR1Z5WjNKdmRXNWtJSE4xWW5kaGVTYzZJQ2R6ZFdKM1lYa25MQW9nSUNBZ0ozVnVhWFpsY25OaGJDQndZVzVoWTJWaEp6b2dKM0JoYm1GalpXRW5MQW9nSUNBZ0ozVnVibUZ0WldRZ1lXNXZibmx0YjNWekp6b2dKMkZ1YjI1NWJXOTFjeWNzQ2lBZ0lDQW5kWE4xWVd3Z1kzVnpkRzl0SnpvZ0oyTjFjM1J2YlNjc0NpQWdJQ0FuZG1WeWVTQjFibWx4ZFdVbk9pQW5kVzVwY1hWbEp5d0tJQ0FnSUNkMmFYTnBZbXhsSUhSdklIUm9aU0JsZVdVbk9pQW5kbWx6YVdKc1pTY3NDaUFnSUNBbmQyRnliaUJwYmlCaFpIWmhibU5sSnpvZ0ozZGhjbTRuTEFvZ0lDQWdKM2RvWlhSb1pYSWdiM0lnYm05MEp6b2dKM2RvWlhSb1pYSW5MQW9nSUNBZ0oyTnZiWEJzWlhSbGJIa2daV3hwYldsdVlYUmxKem9nSjJWc2FXMXBibUYwWlNjc0NpQWdJQ0FuWTI5dGNHeGxkR1ZzZVNCbWFXeHNKem9nSjJacGJHd25MQW9nSUNBZ0oyRmtkbUZ1WTJVZ2NHeGhibTVwYm1jbk9pQW5jR3hoYm01cGJtY25MQW9nSUNBZ0oyRmljMjlzZFhSbGJIa2daWE56Wlc1MGFXRnNKem9nSjJWemMyVnVkR2xoYkNjc0NpQWdJQ0FuWVdKemIyeDFkR1ZzZVNCdVpXTmxjM05oY25rbk9pQW5ibVZqWlhOellYSjVKeXdLSUNBZ0lDZDFibVY0Y0dWamRHVmtJSE4xY25CeWFYTmxKem9nSjNOMWNuQnlhWE5sSnl3S0lDQWdJQ2R6ZEdsc2JDQndaWEp6YVhOMEp6b2dKM0JsY25OcGMzUW5MQW9nSUNBZ0oySmhjMmxqSUdaMWJtUmhiV1Z1ZEdGc2N5YzZJQ2RtZFc1a1lXMWxiblJoYkhNbkxBb2dJQ0FnSjJaaGJHd2daRzkzYmljNklDZG1ZV3hzSnl3S0lDQWdJQ2RoWkdRZ2RYQW5PaUFuWVdSa0p5d0tJQ0FnSUNkb1pXRjBJSFZ3SnpvZ0oyaGxZWFFuTEFvZ0lDQWdKM0pwYzJVZ2RYQW5PaUFuY21selpTY3NDaUFnSUNBbmIzQmxiaUIxY0NjNklDZHZjR1Z1Snl3S0lDQWdJQ2RqYVhKamJHVWdZWEp2ZFc1a0p6b2dKMk5wY21Oc1pTY3NDaUFnSUNBblptbHVZV3dnWTI5dVkyeDFjMmx2YmljNklDZGpiMjVqYkhWemFXOXVKeXdLSUNBZ0lDZG1hVzVoYkNCdmRYUmpiMjFsSnpvZ0oyOTFkR052YldVbkxBb2dJQ0FnSjJOaGJtTmxiQ0J2ZFhRbk9pQW5ZMkZ1WTJWc0p5d0tJQ0FnSUNkallXNWpaV3hsWkNCdmRYUW5PaUFuWTJGdVkyVnNaV1FuTEFvZ0lDQWdKMk5oYm1ObGJITWdiM1YwSnpvZ0oyTmhibU5sYkhNbkxBb2dJQ0FnSjJaMWRIVnlaU0J3YkdGdUp6b2dKM0JzWVc0bkxBb2dJQ0FnSjJaeWIzcGxiaUJwWTJVbk9pQW5hV05sSnl3S0lDQWdJQ2RsYlhCMGVTQnpjR0ZqWlNjNklDZHpjR0ZqWlNjc0NpQWdJQ0FuWlcxd2RIa2dhRzlzWlNjNklDZG9iMnhsSnl3S0lDQWdJQ2R0WVdwdmNpQmljbVZoYTNSb2NtOTFaMmduT2lBblluSmxZV3QwYUhKdmRXZG9KeXdLSUNBZ0lDZHlaWFpsY25RZ1ltRmpheWM2SUNkeVpYWmxjblFuTEFvZ0lDQWdKM0psWm14bFkzUWdZbUZqYXljNklDZHlaV1pzWldOMEp5d0tJQ0FnSUNkeVpXWnNaV04wY3lCaVlXTnJKem9nSjNKbFpteGxZM1J6Snl3S0lDQWdJQ2R5Wldac1pXTjBaV1FnWW1GamF5YzZJQ2R5Wldac1pXTjBaV1FuTEFvZ0lDQWdKM0JsY25OdmJtRnNJR1p5YVdWdVpDYzZJQ2RtY21sbGJtUW5MQW9nSUNBZ0ozQmxjbk52Ym1Gc0lHOXdhVzVwYjI0bk9pQW5iM0JwYm1sdmJpY3NDaUFnSUNBbmMyOW1kQ0JwYmlCMFpYaDBkWEpsSnpvZ0ozTnZablFuTEFvZ0lDQWdKM052Wm5RZ2RHOGdkR2hsSUhSdmRXTm9Kem9nSjNOdlpuUW5MQW9nSUNBZ0ozZGxZWFJvWlhJZ1kyOXVaR2wwYVc5dWN5YzZJQ2QzWldGMGFHVnlKeXdLSUNBZ0lDZDNaV0YwYUdWeUlITnBkSFZoZEdsdmJpYzZJQ2QzWldGMGFHVnlKeXdLSUNBZ0lDZHBiblJ5YjJSMVkyVmtJR0VnYm1WM0p6b2dKMmx1ZEhKdlpIVmpaV1FuTEFvZ0lDQWdKMmx1ZEhKdlpIVmpaV1FnWm05eUlIUm9aU0JtYVhKemRDQjBhVzFsSnpvZ0oybHVkSEp2WkhWalpXUW5MQW9nSUNBZ0oybHVkSEp2WkhWalpTQmhJRzVsZHljNklDZHBiblJ5YjJSMVkyVW5MQW9nSUNBZ0oybHVkSEp2WkhWalpTQm1iM0lnZEdobElHWnBjbk4wSUhScGJXVW5PaUFuYVc1MGNtOWtkV05sSnl3S0lDQWdJQ2R3YkdGdUlHRm9aV0ZrSnpvZ0ozQnNZVzRuTEFvZ0lDQWdKM0JzWVc0Z2FXNGdZV1IyWVc1alpTYzZJQ2R3YkdGdUp5d0tJQ0FnSUgwS0NrNUZSMEZVU1ZaRlV5QTlJSHNLSUNBZ0lDQWdJQ0FuYm05MElHRmliR1VuT2lBbmRXNWhZbXhsSnl3S0lDQWdJQ0FnSUNBbmJtOTBJR1JwWm1abGNtVnVkQ2M2SUNkaGJHbHJaU2NzQ2lBZ0lDQWdJQ0FnSjJScFpDQnViM1FnWVdOalpYQjBKem9nSjNKbGFtVmpkR1ZrSnl3S0lDQWdJQ0FnSUNBblpHOWxjeUJ1YjNRZ1lXTmpaWEIwSnpvZ0ozSmxhbVZqZEhNbkxBb2dJQ0FnSUNBZ0lDZGtieUJ1YjNRZ1lXTmpaWEIwSnpvZ0ozSmxhbVZqZENjc0NpQWdJQ0FnSUNBZ0oyUnBaQ0J1YjNRZ1kyOXVjMmxrWlhJbk9pQW5hV2R1YjNKbFpDY3NDaUFnSUNBZ0lDQWdKMmhoZG1VZ2JtOTBJR052Ym5OcFpHVnlaV1FuT2lBbmFXZHViM0psWkNjc0NpQWdJQ0FnSUNBZ0oyaGhjeUJ1YjNRZ1kyOXVjMmxrWlhKbFpDYzZJQ2RwWjI1dmNtVmtKeXdLSUNBZ0lDQWdJQ0FuWkc4Z2JtOTBJR052Ym5OcFpHVnlaV1FuT2lBbmFXZHViM0psSnl3S0lDQWdJQ0FnSUNBblpHOGdibTkwSUdGc2JHOTNKem9nSjNCeVpYWmxiblFuTEFvZ0lDQWdJQ0FnSUNka2FXUWdibTkwSUdGc2JHOTNKem9nSjNCeVpYWmxiblJsWkNjc0NpQWdJQ0FnSUNBZ0oyUnZaWE1nYm05MElHRnNiRzkzSnpvZ0ozQnlaWFpsYm5Sekp5d0tJQ0FnSUNBZ0lDQW5aRzlsY3lCdWIzUWdhR0YyWlNjNklDZHNZV05yY3ljc0NpQWdJQ0FnSUNBZ0oyUnZJRzV2ZENCb1lYWmxKem9nSjJ4aFkyc25MQW9nSUNBZ0lDQWdJQ2RrYVdRZ2JtOTBJR2hoZG1Vbk9pQW5iR0ZqYTJWa0p5d0tJQ0FnSUNBZ0lDQW5ibTl1SUhONWJXMWxkSEpwWXljNklDZGhjM2x0YldWMGNtbGpKeXdLSUNBZ0lDQWdJQ0FuYm05dUxYTjViVzFsZEhKcFl5YzZJQ2RoYzNsdGJXVjBjbWxqSnl3S0lDQWdJQ0FnSUNBbmJtOTBJSE41YlcxbGRISnBZeWM2SUNkaGMzbHRiV1YwY21sakp5d0tJQ0FnSUNBZ0lDQW5ibTl1SUhCdmJHRnlhWHBsWkNjNklDZDFibkJ2YkdGeWFYcGxaQ2NzQ2lBZ0lDQWdJQ0FnSjI1dmRDQnBiWEJ2Y25SaGJuUW5PaUFuZFc1cGJYQnZjblJoYm5RbkxBb2dJQ0FnSUNBZ0lDZHViM1FnYTI1dmQyNG5PaUFuZFc1cmJtOTNiaWNzQ2lBZ0lDQWdJQ0FnSjI1dmRDQnphV2R1YVdacFkyRnVkQ2M2SUNkdVpXZHNhV2RwWW14bEp5d0tJQ0FnSUNBZ0lDQjlDZ3BCUWxOUFRGVlVSVk1nUFNCN0NpQWdJQ0FnSUNBZ0p5QnVaWFpsY2lBbk9pQW5RV05qYjNKa2FXNW5JSFJ2SUVOeVlXWjBJRzltSUZOamFXVnVkR2xtYVdNZ1YzSnBkR2x1WnpvZ0lrNWxkbVZ5SUdseklHRWdabkpwWjJoMFpXNXBibWNnZDI5eVpDQmlaV05oZFhObElHbDBJR2x1ZG1sMFpYTWdkR2hsSUhKbFlXUmxjbk1nZEc4Z2RHaHBibXNnYjJZZ1pYaGpaWEIwYVc5dWN5SXVJRU52Ym5OcFpHVnlJR0ZzZEdWeWJtRjBhWFpsY3pvZ0luSmhjbVZzZVNJc0lDSnpaV3hrYjIwaUxDQWljbVZ0WVdsdWN5QjFibU5zWldGeUlpd2dJbkpsYldGcGJuTWdZMmhoYkd4bGJtZHBibWNpTGljc0NpQWdJQ0FnSUNBZ0oyRnNkMkY1Y3ljNklDZEJZMk52Y21ScGJtY2dkRzhnUTNKaFpuUWdiMllnVTJOcFpXNTBhV1pwWXlCWGNtbDBhVzVuT2lBaVFXeDNZWGx6SUdseklHRWdabkpwWjJoMFpXNXBibWNnZDI5eVpDQmlaV05oZFhObElHbDBJR2x1ZG1sMFpYTWdkR2hsSUhKbFlXUmxjbk1nZEc4Z2RHaHBibXNnYjJZZ1pYaGpaWEIwYVc5dWN5NGdXVzkxSUhOb2IzVnNaQ0JuYnlCcGJpQm1aV0Z5SUc5bUlHRmljMjlzZFhSbGN5SXVKeXdLSUNBZ0lDQWdJQ0I5Q2dwQlFsTlBURlZVUlZOZlJWaERSVkJVU1U5T1V5QTlJRnNLSUNBZ0lDQWdJQ0JiSjJGc2JXOXpkQ0J1WlhabGNpZGRMQW9nSUNBZ0lDQWdJRnNuYm05MElHRnNkMkY1Y3ljc0lDZGhiRzF2YzNRZ1lXeDNZWGx6SjEwc0NpQWdJQ0FnSUNBZ1hRb0tRMDlOVUV4RldGOVhUMUpFVXlBOUlIc0tJQ0FnSUNBZ0lDQW5aV3gxWTJsa1lYUmxKem9uWlhod2JHRnBiaWNzQ2lBZ0lDQWdJQ0FnSjJScGJXbHVhWE5vSnpvZ0oyUmxZM0psWVhObEp5d0tJQ0FnSUNBZ0lDQW5aWE4wWVdKc2FYTm9Kem9nSjNObGRDY3NDaUFnSUNBZ0lDQWdKMlJsY0dsamRDYzZJQ2R6YUc5M0p5d0tJQ0FnSUNBZ0lDQW5ZMjl0Y0hKbGFHVnVjMmwyWlNjNklDZGtaWFJoYVd4bFpDY3NDaUFnSUNBZ0lDQWdKMlZzYVcxcGJtRjBaU2M2SUNkeVpXMXZkbVVuTEFvZ0lDQWdJQ0FnSUNkMFpYSnRhVzVoZEdVbk9pQW5abWx1YVhOb0p5d0tJQ0FnSUNBZ0lDQW5aR2x6WTI5dWRHbHVkV1VuT2lBbmMzUnZjQ2NzQ2lBZ0lDQWdJQ0FnSjJsdGJXVnVjMlVuT2lBblozSmxZWFFuTEFvZ0lDQWdJQ0FnSUNkd2NtOW1iM1Z1WkNjNklDZGtaV1Z3Snl3S0lDQWdJQ0FnSUNBblpYaDBaVzV6YVhabEp6b2dKM2RwWkdVbkxBb2dJQ0FnSUNBZ0lDZHpkV0p6ZEdGdWRHbGhiQ2M2SUNkc1lYSm5aU2NzQ2lBZ0lDQWdJQ0FnSjJWemMyVnVkR2xoYkNjNklDZHBiWEJ2Y25SaGJuUW5MQW9nSUNBZ0lDQWdJQ2RtYjNKbGJXOXpkQ2M2SUNkaFltOTJaU0JoYkd3bkxBb2dJQ0FnSUNBZ0lDZHdjbTl0YVc1bGJuUW5PaUFuZDJWc2JDQnJibTkzYmljc0NpQWdJQ0FnSUNBZ0oyUnBjM1JwYm1kMWFYTm9aV1FuT2lBbmQyVnNiQ0JyYm05M2JpY3NDaUFnSUNBZ0lDQWdKMjkyWlhKeWFXUmxKem9nSjJOaGJtTmxiQ2NzQ2lBZ0lDQWdJQ0FnSjJGemMyVnpjeWM2SUNkbGRtRnNkV0YwWlNjc0NpQWdJQ0FnSUNBZ0oybHVaR2x6ZEdsdVozVnBjMmhoWW14bEp6b2dKMmxrWlc1MGFXTmhiQ2NzQ2lBZ0lDQWdJQ0FnSjJ4aFltOXlhVzkxY3ljNklDZGthV1ptYVdOMWJIUW5MQW9nSUNBZ0lDQWdJQ2RwYm5SeWFXTmhkR1VuT2lBblkyOXRjR3hsZUNjc0NpQWdJQ0FnSUNBZ0oyVnNZV0p2Y21GMFpTYzZJQ2RrWlhOcFoyNG5MQW9nSUNBZ0lDQWdJQ2RqYjI1MmIyeDFkR1ZrSnpvZ0oyTnZiWEJzWlhnbkxBb2dJQ0FnSUNBZ0lDZHpiM0JvYVhOMGFXTmhkR1ZrSnpvZ0oyTnZiWEJzWlhnbkxBb2dJQ0FnSUNBZ0lDZGhaR3BoWTJWdWRDYzZJQ2R1WldGeUp5d0tJQ0FnSUNBZ0lDQW5ZMjl1WTJWaGJDYzZJQ2RvYVdSbEp5d0tJQ0FnSUNBZ0lDQW5ZV054ZFdseVpTYzZJQ2RuWlhRbkxBb2dJQ0FnSUNBZ0lDZGxlR1ZqZFhSbEp6b2dKMlJ2Snl3S0lDQWdJQ0FnSUNBbmIzVjBjM1JoYm1ScGJtY25PaUFuWjNKbFlYUW5MQW9nSUNBZ0lDQWdJQ2RoWTJocFpYWmxiV1Z1ZENjNklDZHlaWE4xYkhRbkxBb2dJQ0FnSUNBZ0lDZHdjbVYyWVd4bGJuUW5PaUFuWkc5dGFXNWhiblFuTEFvZ0lDQWdJQ0FnSUNkMGNtVnRaVzVrYjNWekp6b2dKMmgxWjJVbkxBb2dJQ0FnSUNBZ0lDZHBibVpwYm1sMFpYTnBiV0ZzSnpvZ0ozUnBibmtuTEFvZ0lDQWdJQ0FnSUNkemRXSnpkR0Z1ZEdsaGRHVW5PaUFuZG1WeWFXWjVKeXdLSUNBZ0lDQWdJQ0I5Q2dwa1pXWWdZbUZrWDNCaGRIUmxjbTV6S0d4cGJtVXNJR2x1WkdWNEtUb0tJQ0FnSUNjbkowTnliM056TFdOb1pXTnJJSGRwZEdnZ2RHaGxJR1JwWTNScGIyNWhjbmtnYjJZZ2EyNXZkMjRnWlhKeWIzSnpJR0Z1WkNCemRXZG5aWE4wSUdacGVHVnpKeWNuQ2lBZ0lDQnRhWE4wWVd0bGN5QTlJRnRkQ2lBZ0lDQm1iM0lnZDI5eVpDQnBiaUJDUVVSZlVFRlVWRVZTVGxNNkNpQWdJQ0FnSUNBZ2FXWWdkMjl5WkNCcGJpQnNhVzVsT2dvZ0lDQWdJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb1ppZE1hVzVsSUh0cGJtUmxlQ0FySURGOUxpQjdRa0ZFWDFCQlZGUkZVazVUVzNkdmNtUmRmU2NwQ2lBZ0lDQnlaWFIxY200Z2JXbHpkR0ZyWlhNS0NncGtaV1lnWTI5dGJXRmZZV1owWlhJb2JHbHVaU3dnYVc1a1pYZ3BPZ29nSUNBZ0p5Y25RMmhsWTJzZ1ptOXlJSGR2Y21SeklIUm9ZWFFnZFhOMVlXeHNlU0JvWVhabElHTnZiVzFoSUdGbWRHVnlJSFJvWlcwbkp5Y0tJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtJQ0FnSUdadmNpQjNiM0prSUdsdUlFTlBUVTFCWDBGR1ZFVlNPZ29nSUNBZ0lDQWdJR2xtSUhkdmNtUWdhVzRnYkdsdVpUb0tJQ0FnSUNBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1RXbG5hSFFnYm1WbFpDQmhJR052YlcxaElHRm1kR1Z5SUNKN2QyOXlaRnM2TFRGZGZTSXVKeWtLSUNBZ0lISmxkSFZ5YmlCdGFYTjBZV3RsY3dvS0NtUmxaaUJ3YUhKaGMyVnpYM2RwZEdoZmRtVnllU2hzYVc1bExDQnBibVJsZUNrNkNpQWdJQ0FuSnlkRGFHVmpheUJtYjNJZ2NHRjBkR1Z5Ym5NZ2JHbHJaU0FpZG1WeWVTQXVMaTRpSUdsdUlIUm9aU0JrYVdOMGFXOXVZWEo1SnljbkNpQWdJQ0J0YVhOMFlXdGxjeUE5SUZ0ZENpQWdJQ0JtYjNJZ2QyOXlaQ0JwYmlCV1JWSlpPZ29nSUNBZ0lDQWdJR2xtSUhkdmNtUWdhVzRnYkdsdVpUb0tJQ0FnSUNBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSjdkMjl5WkgwaUlIZHBkR2dnZDI5eVpITWdiR2xyWlNBaWUxWkZVbGxiZDI5eVpGMTlJaUJsZEdNbkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ2NtVjBkWEp1SUcxcGMzUmhhMlZ6Q2dvS1pHVm1JSE4wWVhKMFgzZHBkR2hmYm5WdFltVnljeWhzYVc1bExDQnBibVJsZUNrNkNpQWdJQ0FuSnlkRGFHVmpheUJwWmlCaElHNXZiaTFsYlhCMGVTQnNhVzVsSUhOMFlYSjBjeUIzYVhSb0lHRWdiblZ0WW1WeUp5Y25DaUFnSUNBaklFNWxaV1FnZEc4Z1ptbDRJSFJvYVhNZ1puVnVZM1JwYjI0dUlFbDBJRzFoYTJVZ2JXRnVlU0JtWVd4elpTQndiM05wZEdsMlpYTWdhV1lnZEdobGNtVWdhWE1nWVNCeVpXWmxjbVZ1WTJVZ2JHbHpkQW9nSUNBZ2JXbHpkR0ZyWlhNZ1BTQmJYUW9nSUNBZ2FXWWdiR2x1WlZzd1hTNXBjMlJwWjJsMEtDazZDaUFnSUNBZ0lDQWdiV2x6ZEdGclpYTXVZWEJ3Wlc1a0tBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppZE1hVzVsSUh0cGJtUmxlQ0FySURGOUxpQkJkbTlwWkNCemRHRnlkR2x1WnlCelpXNTBaVzVqWlhNZ2QybDBhQ0J1ZFcxaVpYSnpMaUJTWlhkeWFYUmxJSE53Wld4c2FXNW5JRzkxZENCMGFHVWdiblZ0WW1WeUxDQmxMbWN1SUNKR2FYWmxJSE5oYlhCc1pYTXVMaTRpSndvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1FvZ0lDQWdjbVYwZFhKdUlHMXBjM1JoYTJWekNnb0taR1ZtSUdacFozVnlaVjl5WldabGNtVnVZMlZ6S0d4cGJtVXNJR2x1WkdWNEtUb0tJQ0FnSUNjbkowTm9aV05ySUdadmNpQW5SbWxuTGljZ2FXNGdkR2hsSUdKbFoybHVibWx1WnlCdlppQjBhR1VnYkdsdVpTQnZjaUFuUm1sbmRYSmxKeUJwYmlCMGFHVWdiV2xrWkd4bEp5Y25DaUFnSUNCdGFYTjBZV3RsY3lBOUlGdGRDaUFnSUNCcFppQnNaVzRvYkdsdVpTa2dQaUExT2dvZ0lDQWdJQ0FnSUdsbUlDZEdhV2N1SnlCcGJpQnNhVzVsV3pBNk5GMGdiM0lnSjBacFozTXVKeUJwYmlCc2FXNWxXekE2TkYwNkNpQWdJQ0FnSUNBZ0lDQWdJRzFwYzNSaGEyVnpMbUZ3Y0dWdVpDZ0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtSjB4cGJtVWdlMmx1WkdWNElDc2dNWDB1SUZSb1pTQjNiM0prSUNKR2FXY3VJaUJwYmlCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUdFZ2MyVnVkR1Z1WTJVZ1kyRnVJSFZ6ZFdGc2JIa2dZbVVnYzNCbGJHeGxaQ0J2ZFhRc0lHVXVaeTRnSWtacFozVnlaU0F4SUhOb2IzZHpJaWNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcENpQWdJQ0FnSUNBZ2FXWWdKMFpwWjNWeVpTQW5JR2x1SUd4cGJtVmJOenBkT2dvZ0lDQWdJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaWRNYVc1bElIdHBibVJsZUNBcklERjlMaUJOYjNOMElHcHZkWEp1WVd4eklIQnlaV1psY2lCemFHOXlkR1Z1YVc1bklIUm9aU0IzYjNKa0lDSkdhV2QxY21VaUlHRnpJQ0pHYVdjdUlpQnBaaUJwZENCcGN5QnViM1FnYjNCbGJtbHVaeUIwYUdVZ2MyVnVkR1Z1WTJVdUp3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tLSUNBZ0lISmxkSFZ5YmlCdGFYTjBZV3RsY3dvS0NtUmxaaUJ1ZFcxaVpYSnpYMjVsZUhSZmRHOWZkVzVwZEhNb2JHbHVaU3dnYVc1a1pYZ3BPZ29nSUNBZ0p5Y25RMmhsWTJzZ2FXWWdkVzVwZEhNZ2MyVndZWEpoZEdWa0lHOXlJRzV2ZENCelpYQmhjbUYwWldRZ1puSnZiU0J1ZFcxaVpYSnpJSGRwZEdnZ1lTQnpjR0ZqWlNjbkp3b2dJQ0FnYldsemRHRnJaWE1nUFNCYlhRb2dJQ0FnWm05eUlHNTFiV0psY2lCcGJpQnlZVzVuWlNnNUtUb0tJQ0FnSUNBZ0lDQm1iM0lnZFc1cGRDQnBiaUJWVGtsVVV6b0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWW5lMjUxYldKbGNuMTdkVzVwZEgwZ0p5QnBiaUJzYVc1bEtTQnZjaUFvWmlkN2JuVnRZbVZ5Zlh0MWJtbDBmUzRuSUdsdUlHeHBibVVwSUc5eUlDaG1KM3R1ZFcxaVpYSjllM1Z1YVhSOUxDY2dhVzRnYkdsdVpTazZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1VIVjBJR0VnYzNCaFkyVWdZbVYwZDJWbGJpQjBhR1VnWkdsbmFYUWdlMjUxYldKbGNuMGdZVzVrSUhSb1pTQjFibWwwSUh0MWJtbDBmU2NLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ0lDQWdJR2xtSUNoemRISW9iblZ0WW1WeUtTQXJJQ2NnSlNjZ2FXNGdiR2x1WlNrZ2IzSWdLSE4wY2lodWRXMWlaWElwSUNzZ0p5QmNKU2NnYVc0Z2JHbHVaU2s2Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXBjM1JoYTJWekxtRndjR1Z1WkNnS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1KMHhwYm1VZ2UybHVaR1Y0SUNzZ01YMHVJRkJsY21ObGJuUWdjMmxuYmlBaUpTSWdjMmh2ZFd4a0lHWnZiR3h2ZHlCdWRXMWlaWEpoYkhNZ2QybDBhRzkxZENCaElITndZV05sTENCcExtVXVJSHR1ZFcxaVpYSjlKU2NLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcENpQWdJQ0J5WlhSMWNtNGdiV2x6ZEdGclpYTUtDZ3BrWldZZ1pXeGxiV1Z1ZEhNb2RHVjRkQ2s2Q2lBZ0lDQW5KeWREYUdWamF5Qm9iM2NnYldGdWVTQjBhVzFsY3lCamFHVnRhV05oYkNCbGJHVnRaVzUwY3lCdlkyTjFjaUJwYmlCMGFHVWdkR1Y0ZENjbkp3b2dJQ0FnYldsemRHRnJaWE1nUFNCYlhRb2dJQ0FnWlc1MGFYSmxYM1JsZUhRZ1BTQjFibWwwWlY5MllXeHBaRjlzYVc1bGN5aDBaWGgwS1FvZ0lDQWdabTkxYm1SZlpXeGxiV1Z1ZEhNZ1BTQmJYUW9nSUNBZ1ptOXlJR1ZzWlcxbGJuUWdhVzRnUlV4RlRVVk9WRk02Q2lBZ0lDQWdJQ0FnYjJOamRYSmhibU5sSUQwZ1pXNTBhWEpsWDNSbGVIUXVZMjkxYm5Rb0lpQWlJQ3NnWld4bGJXVnVkQ0FySUNJZ0lpa0tJQ0FnSUNBZ0lDQnBaaUF3SUR3Z2IyTmpkWEpoYm1ObElEd2dOVG9LSUNBZ0lDQWdJQ0FnSUNBZ1ptOTFibVJmWld4bGJXVnVkSE11WVhCd1pXNWtLR1ZzWlcxbGJuUXBDZ29nSUNBZ0l5QkJaSFpwYzJVZ2FYTWdZMjl1YzNSeWRXTjBaV1FnWkdWd1pXNWthVzVuSUc5dUlHaHZkeUJ0WVc1NUlHVnNaVzFsYm5SeklIZGxjbVVnWm05MWJtUUtJQ0FnSUdsbUlHeGxiaWhtYjNWdVpGOWxiR1Z0Wlc1MGN5a2dQVDBnTVRvS0lDQWdJQ0FnSUNCdGFYTjBZV3RsY3k1aGNIQmxibVFvQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtSjFSb1pTQnplVzFpYjJ3Z2UyWnZkVzVrWDJWc1pXMWxiblJ6V3pCZGZTQnZZMk4xY25NZ2IyNXNlU0JoSUdabGR5QjBhVzFsY3k0Z1UybHVZMlVnYlc5emRDQnlaV0ZrWlhKeklHUnZJRzV2ZENCcmJtOTNJR2h2ZHlCMGJ5QnlaV0ZrSUdGc2JDQmphR1Z0YVdOaGJDQnplVzFpYjJ4ekxDQnFkWE4wSUhkeWFYUmxJR0ZqZEhWaGJDQnVZVzFsSUc5bUlIUm9aU0JsYkdWdFpXNTBJR1ZoWTJnZ2RHbHRaUzRnUm05eUlHVjRZVzF3YkdVZ0luTnBiR2xqYjI0Z2QyRm1aWElpTGljS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrS0lDQWdJR2xtSUd4bGJpaG1iM1Z1WkY5bGJHVnRaVzUwY3lrZ1BpQXhPZ29nSUNBZ0lDQWdJRzkxZEhCMWRGOXpkSEpwYm1jZ1BTQm1iM1Z1WkY5bGJHVnRaVzUwYzFzd1hRb2dJQ0FnSUNBZ0lHWnZkVzVrWDJWc1pXMWxiblJ6V3kweFhTQTlJQ2NnWVc1a0lDY2dLeUJtYjNWdVpGOWxiR1Z0Wlc1MGMxc3RNVjBLSUNBZ0lDQWdJQ0JtYjNJZ2JtRnRaU0JwYmlCbWIzVnVaRjlsYkdWdFpXNTBjMXN4T2wwNkNpQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRGOXpkSEpwYm1jZ0t6MGdaaWNzSUh0dVlXMWxmU2NLSUNBZ0lDQWdJQ0J0YVhOMFlXdGxjeTVoY0hCbGJtUW9DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1KMVJvWlNCemVXMWliMnh6SUh0dmRYUndkWFJmYzNSeWFXNW5mU0J2WTJOMWNpQnZibXg1SUdFZ1ptVjNJSFJwYldWeklHVmhZMmd1SUZOcGJtTmxJRzF2YzNRZ2NtVmhaR1Z5Y3lCa2J5QnViM1FnYTI1dmR5Qm9iM2NnZEc4Z2NtVmhaQ0JoYkd3Z1kyaGxiV2xqWVd3Z2MzbHRZbTlzY3l3Z2FuVnpkQ0IzY21sMFpTQmhZM1IxWVd3Z2JtRnRaWE1nYjJZZ2RHaGxJR1ZzWlcxbGJuUnpJR1ZoWTJnZ2RHbHRaUzRnUm05eUlHVjRZVzF3YkdVZ0luTnBiR2xqYjI0Z2QyRm1aWElpTGljS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrS0lDQWdJSEpsZEhWeWJpQnRhWE4wWVd0bGN3b0tDbVJsWmlCaFltSnlaWFpwWVhScGIyNXpLSFJsZUhRcE9nb2dJQ0FnSnljblEyaGxZMnNnYUc5M0lHMWhibmtnZEdsdFpYTWdZV0ppY21WMmFXRjBhVzl1Y3lCdlkyTjFjaUJwYmlCMGFHVWdkR1Y0ZENjbkp3b2dJQ0FnSXlCR2FXNWtJR0ZpWW5KbGRtbGhkR2x2Ym5NZ1lYTWdRVXhNUTBGUVV5QnZjaUJCVEV4RFlWQnpJSE4wY21sdVozTWdZVzVrSUdOMWRDQWljeUlnWVhRZ2RHaGxJR1Z1WkhNS0lDQWdJR1Z1ZEdseVpWOTBaWGgwSUQwZ2RXNXBkR1ZmZG1Gc2FXUmZiR2x1WlhNb2RHVjRkQ2tLSUNBZ0lHRnNiRjloWW1KeVpYWnBZWFJwYjI1eklEMGdjbVV1Wm1sdVpHRnNiQ2h5SWx4aUtEODZXMEV0V2wxYllTMTZYVDhwZXpJc2ZTSXNJR1Z1ZEdseVpWOTBaWGgwS1FvZ0lDQWdabWxzZEdWeVpXUmZZV0ppY21WMmFXRjBhVzl1Y3lBOUlGdGRDaUFnSUNCbWIzSWdZV0ppY21WMmFXRjBhVzl1SUdsdUlHRnNiRjloWW1KeVpYWnBZWFJwYjI1ek9nb2dJQ0FnSUNBZ0lIUnlhVzF0WldSZllXSmljbVYyYVdGMGFXOXVJRDBnWVdKaWNtVjJhV0YwYVc5dVd6b3RNVjBnYVdZZ1lXSmljbVYyYVdGMGFXOXVXeTB4WFNBOVBTQW5jeWNnWld4elpTQmhZbUp5WlhacFlYUnBiMjRLSUNBZ0lDQWdJQ0JtYVd4MFpYSmxaRjloWW1KeVpYWnBZWFJwYjI1ekxtRndjR1Z1WkNoMGNtbHRiV1ZrWDJGaVluSmxkbWxoZEdsdmJpa0tJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtDaUFnSUNBaklFTm9aV05ySUdodmR5QnZablJsYmlCbFlXTm9JR0ZpWW5KbGRtbGhkR2x2YmlCdlkyTjFjbk1nWVc1a0lHTnZiVzFsYm5RZ2FXWWdiR1Z6Y3lCMGFHRnVJR1pwZG1VS0lDQWdJR1p2ZFc1a1gyRmlZbkpsZG1saGRHbHZibk1nUFNCYlhRb2dJQ0FnWm05eUlIVnVhWEYxWlY5aFltSnlaWFpwWVhScGIyNGdhVzRnYzJWMEtHWnBiSFJsY21Wa1gyRmlZbkpsZG1saGRHbHZibk1wT2dvZ0lDQWdJQ0FnSUdsbUlDaDFibWx4ZFdWZllXSmljbVYyYVdGMGFXOXVJRzV2ZENCcGJpQkZURVZOUlU1VVV5a2dZVzVrSUNoMWJtbHhkV1ZmWVdKaWNtVjJhV0YwYVc5dUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzUWdhVzRnUlZoRFJWQlVTVTlPVXlrZ1lXNWtJQ2gxYm1seGRXVmZZV0ppY21WMmFXRjBhVzl1SUc1dmRDQnBiaUJWVGtsVVV5azZDaUFnSUNBZ0lDQWdJQ0FnSUc5alkzVnlZVzVqWlNBOUlHWnBiSFJsY21Wa1gyRmlZbkpsZG1saGRHbHZibk11WTI5MWJuUW9kVzVwY1hWbFgyRmlZbkpsZG1saGRHbHZiaWtLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdNQ0E4SUc5alkzVnlZVzVqWlNBOElEVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM1Z1WkY5aFltSnlaWFpwWVhScGIyNXpMbUZ3Y0dWdVpDaDFibWx4ZFdWZllXSmljbVYyYVdGMGFXOXVLUW9LSUNBZ0lDTWdRV1IyYVhObElHbHpJR052Ym5OMGNuVmpkR1ZrSUdSbGNHVnVaR2x1WnlCdmJpQm9iM2NnYldGdWVTQmhZbUp5WlhacFlYUnBiMjV6SUhkbGNtVWdabTkxYm1RS0lDQWdJR2xtSUd4bGJpaG1iM1Z1WkY5aFltSnlaWFpwWVhScGIyNXpLU0E5UFNBeE9nb2dJQ0FnSUNBZ0lHMXBjM1JoYTJWekxtRndjR1Z1WkNnS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblZHaGxJR0ZpWW5KbGRtbGhkR2x2YmlCN1ptOTFibVJmWVdKaWNtVjJhV0YwYVc5dWMxc3dYWDBnYjJOamRYSnpJRzl1YkhrZ1lTQm1aWGNnZEdsdFpYTXVJRk5wYm1ObElHRmlZbkpsZG1saGRHbHZibk1nWVhKbElHaGhjbVFnZEc4Z1pHVmpjbmx3ZEN3Z2FuVnpkQ0J6Y0dWc2JDQnBkQ0J2ZFhRZ1pXRmphQ0IwYVcxbExpQkpkQ0JwY3lCbFlYTnBaWElnZEc4Z2NtVmhaQ0JoSUdabGR5QjNiM0prY3lCMGFHRnVJSFJ2SUhObFlYSmphQ0JtYjNJZ2JXVmhibWx1WjNNZ2IyWWdZV0ppY21WMmFXRjBhVzl1Y3k0bkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcENpQWdJQ0JwWmlCc1pXNG9abTkxYm1SZllXSmljbVYyYVdGMGFXOXVjeWtnUGlBeE9nb2dJQ0FnSUNBZ0lHOTFkSEIxZEY5emRISnBibWNnUFNCbWIzVnVaRjloWW1KeVpYWnBZWFJwYjI1eld6QmRDaUFnSUNBZ0lDQWdabTkxYm1SZllXSmljbVYyYVdGMGFXOXVjMXN0TVYwZ1BTQW5JR0Z1WkNBbklDc2dabTkxYm1SZllXSmljbVYyYVdGMGFXOXVjMXN0TVYwS0lDQWdJQ0FnSUNCbWIzSWdibUZ0WlNCcGJpQm1iM1Z1WkY5aFltSnlaWFpwWVhScGIyNXpXekU2WFRvS0lDQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMFgzTjBjbWx1WnlBclBTQm1KeXdnZTI1aGJXVjlKd29nSUNBZ0lDQWdJRzFwYzNSaGEyVnpMbUZ3Y0dWdVpDZ0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWW5WR2hsSUdGaVluSmxkbWxoZEdsdmJuTWdlMjkxZEhCMWRGOXpkSEpwYm1kOUlHOWpZM1Z5SUc5dWJIa2dZU0JtWlhjZ2RHbHRaWE1nWldGamFDNGdVMmx1WTJVZ1lXSmljbVYyYVdGMGFXOXVjeUJoY21VZ2FHRnlaQ0IwYnlCa1pXTnllWEIwTENCcWRYTjBJSE53Wld4c0lIUm9aVzBnYjNWMElHVmhZMmdnZEdsdFpTNGdTWFFnYVhNZ1pXRnphV1Z5SUhSdklISmxZV1FnWVNCbVpYY2dkMjl5WkhNZ2RHaGhiaUIwYnlCelpXRnlZMmdnWm05eUlHMWxZVzVwYm1keklHOW1JR0ZpWW5KbGRtbGhkR2x2Ym5NdUp3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tRb2dJQ0FnY21WMGRYSnVJRzFwYzNSaGEyVnpDZ29LWkdWbUlHbHVYMk52Ym1Oc2RYTnBiMjV6S0d4cGJtVXNJR2x1WkdWNExDQjBaWGgwS1RvS0lDQWdJQ2NuSjBOb1pXTnJJR2xtSUhkbElHTmhiaUJ6YTJsd0lFbHVJR052Ym1Oc2RYTnBiMjV6SUdKbFkyRjFjMlVnZEdobGNtVWdhWE1nWVd4eVpXRmtlU0JoSUhScGRHeGxJRU52Ym1Oc2RYTnBiMjV6SnljbkNpQWdJQ0J0YVhOMFlXdGxjeUE5SUZ0ZENpQWdJQ0JwWmlBb0owbHVJR052Ym1Oc2RYTnBiMjRuS1NCcGJpQnNhVzVsT2dvZ0lDQWdJQ0FnSUdsbUlDZ29KME52Ym1Oc2RYTnBiMjRuSUc5eUlDZERUMDVEVEZWVFNVOU9KeWtnYVc0Z2RHVjRkRnRwYm1SbGVDQXRJREZkS1NCdmNpQW9DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9KME52Ym1Oc2RYTnBiMjRuSUc5eUlDZERUMDVEVEZWVFNVOU9KeWtnYVc0Z2RHVjRkRnRwYm1SbGVDQXRJREpkS1RvS0lDQWdJQ0FnSUNBZ0lDQWdiV2x6ZEdGclpYTXVZWEJ3Wlc1a0tBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1luVEdsdVpTQjdhVzVrWlhnZ0t5QXhmUzRnVkdocGN5QnpaV04wYVc5dUlITmxaVzF6SUhSdklHSmxJR0ZzY21WaFpIa2dkR2wwYkdWa0lDSkRiMjVqYkhWemFXOXVjeUlzSUhSb2RYTWdlVzkxSUcxaGVTQnZiV2wwSUNKSmJpQmpiMjVqYkhWemFXOXVJaUJoZENCMGFHVWdZbVZuYVc1dWFXNW5MaWNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcENpQWdJQ0J5WlhSMWNtNGdiV2x6ZEdGclpYTUtDZ3BrWldZZ1luSnBkR2x6YUY5emNHVnNiR2x1Wnloc2FXNWxMQ0JwYm1SbGVDd2daVzVuYkdsemFDazZDaUFnSUNBbkp5ZERhR1ZqYXlCcFppQnpjR1ZzYkdsdVp5QnZaaUJ6YjIxbElIZHZjbVJ6SUdseklHRnRaWEpwWTJGdUwySnlhWFJwYzJnbkp5Y0tJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtJQ0FnSUdsbUlHVnVaMnhwYzJnZ1BUMGdKMkZ0WlhKcFkyRnVKem9LSUNBZ0lDQWdJQ0JtYjNJZ2QyOXlaQ0JwYmlCQ1VrbFVTVk5JT2dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUIzYjNKa0lHbHVJR3hwYm1VNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGFYTjBZV3RsY3k1aGNIQmxibVFvQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1luVEdsdVpTQjdhVzVrWlhnZ0t5QXhmUzRnU1c0Z1FXMWxjbWxqWVc0Z1JXNW5iR2x6YUN3Z2QyOXlaQ0FpZTNkdmNtUjlJaUJwY3lCemNHVnNiR1ZrSUdGeklDSjdRbEpKVkVsVFNGdDNiM0prWFgwaUxpY0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tRb2dJQ0FnYVdZZ1pXNW5iR2x6YUNBOVBTQW5ZbkpwZEdsemFDYzZDaUFnSUNBZ0lDQWdabTl5SUhkdmNtUWdhVzRnUWxKSlZFbFRTRG9LSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdRbEpKVkVsVFNGdDNiM0prWFNCcGJpQnNhVzVsT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1KMHhwYm1VZ2UybHVaR1Y0SUNzZ01YMHVJRWx1SUVKeWFYUnBjMmdnUlc1bmJHbHphQ3dnZDI5eVpDQWllMEpTU1ZSSlUwaGJkMjl5WkYxOUlpQnBjeUJ6Y0dWc2JHVmtJR0Z6SUNKN2QyOXlaSDBpTGljS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1FvZ0lDQWdjbVYwZFhKdUlHMXBjM1JoYTJWekNnb0taR1ZtSUdGaWMzUnlZV04wWDJ4bGJtZG9kQ2gwWlhoMEtUb0tJQ0FnSUNjbkowWnBibVFnZEdobElHRmljM1J5WVdOMExDQmphR1ZqYXlCcGRITWdiR1Z1WjNSb0lHRnVaQ0JoWkhacGMyVWdhV1lnYVhRbmN5QjBiMjhnYkc5dVp5Y25Kd29nSUNBZ0l5QkdhWEp6ZENCelpXRnlZMmdnWm05eUlHSmxaMmx1ZTJGaWMzUnlZV04wZlM0Z1NXWWdibTkwYUdsdVp5d2djMlZoY21Ob0lHWnZjaUJoWW5OMGNtRmpkSHNLSUNBZ0lIUnllVG9LSUNBZ0lDQWdJQ0JsYm5ScGNtVmZkR1Y0ZENBOUlIVnVhWFJsWDNaaGJHbGtYMnhwYm1WektIUmxlSFFwQ2lBZ0lDQWdJQ0FnY0dGMGRHVnliaUE5SUNjckt5c25DaUFnSUNBZ0lDQWdZV0p6ZEhKaFkzUWdQU0JsYm5ScGNtVmZkR1Y0ZEM1eVpYQnNZV05sS0NKaVpXZHBibnRoWW5OMGNtRmpkQ0lzSUhCaGRIUmxjbTRwTG5Od2JHbDBLSEJoZEhSbGNtNHBDaUFnSUNBZ0lDQWdZV0p6ZEhKaFkzUWdQU0JoWW5OMGNtRmpkRnN4WFM1eVpYQnNZV05sS0NKbGJtUjdZV0p6ZEhKaFkzUWlMQ0J3WVhSMFpYSnVLUzV6Y0d4cGRDaHdZWFIwWlhKdUtRb2dJQ0FnSUNBZ0lHRmljM1J5WVdOMElEMGdZV0p6ZEhKaFkzUmJNRjFiTVRvdE1WMEtJQ0FnSUdWNFkyVndkRG9LSUNBZ0lDQWdJQ0JoWW5OMGNtRmpkQ0E5SUNJaUNpQWdJQ0FnSUNBZ2NHRnpjd29nSUNBZ2FXWWdZV0p6ZEhKaFkzUWdQVDBnSWlJNkNpQWdJQ0FnSUNBZ1ptOXlJR3hwYm1VZ2FXNGdkR1Y0ZERvS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnSW1GaWMzUnlZV04wZXlJZ2FXNGdiR2x1WlRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGaWMzUnlZV04wSUQwZ2JHbHVaVnM1T2kweFhRb0tJQ0FnSUNNZ1EyaGxZMnNnZEdobElHRmljM1J5WVdOMElHeGxibWQwYUNCaGJtUWdZMjl0YldWdWRDQmhZMk52Y21ScGJtZHNlUW9nSUNBZ2QyOXlaSE1nUFNCc1pXNG9ZV0p6ZEhKaFkzUXVjM0JzYVhRb0tTa0tJQ0FnSUhONWJXSnZiSE1nUFNCc1pXNG9ZV0p6ZEhKaFkzUXBDaUFnSUNCdGFYTjBZV3RsY3lBOUlGdGRDaUFnSUNCcFppQnNaVzRvWVdKemRISmhZM1FwSUQ0Z01Ub0tJQ0FnSUNBZ0lDQnBaaUIzYjNKa2N5QStJREUxTURvS0lDQWdJQ0FnSUNBZ0lDQWdiV2x6ZEdGclpYTXVZWEJ3Wlc1a0tBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lpV1c5MWNpQmhZbk4wY21GamRDQm9ZWE1nZTNkdmNtUnpmU0IzYjNKa2N5QnZjaUI3YzNsdFltOXNjMzBnWTJoaGNtRmpkR1Z5Y3k0Z1RXRnVlU0JxYjNWeWJtRnNjeUJzYVcxcGRDQmhZbk4wY21GamRITWdZbmtnTVRVd0lIZHZjbVJ6SUc5dWJIa3VJRU5vWldOcklHbG1JSFJvYVhNZ2FYTWdkMmwwYUdsdUlHeHBiV2wwWVhScGIyNXpJRzltSUhsdmRYSWdhbTkxY201aGJDNGlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1FvZ0lDQWdJQ0FnSUdWc2FXWWdkMjl5WkhNZ1BDQTFNRG9LSUNBZ0lDQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWWlXVzkxY2lCaFluTjBjbUZqZENCb1lYTWdiMjVzZVNCN2QyOXlaSE45SUhkdmNtUnpJRzl5SUh0emVXMWliMnh6ZlNCamFHRnlZV04wWlhKekxpQlRaV1Z0Y3lCaElHSnBkQ0J6YUc5eWRDNGlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1FvZ0lDQWdJQ0FnSUdWc2MyVTZDaUFnSUNBZ0lDQWdJQ0FnSUcxcGMzUmhhMlZ6TG1Gd2NHVnVaQ2dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUlsbHZkWElnWVdKemRISmhZM1FnYUdGeklIdDNiM0prYzMwZ2QyOXlaSE1nYjNJZ2UzTjViV0p2YkhOOUlHTm9ZWEpoWTNSbGNuTXVJRWwwSUhObFpXMXpJR1pwYm1Vc0lHSjFkQ0JrYjNWaWJHVXRZMmhsWTJzZ2FXWWdkR2hwY3lCcGN5QjNhWFJvYVc0Z2JHbHRhWFJoZEdsdmJuTWdiMllnZVc5MWNpQnFiM1Z5Ym1Gc0xpSUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwQ2lBZ0lDQnlaWFIxY200Z2JXbHpkR0ZyWlhNS0NncGtaV1lnZEdsMGJHVmZiR1Z1WjJoMEtIUmxlSFFwT2dvZ0lDQWdKeWNuUm1sdVpDQjBhR1VnZEdsMGJHVXNJR05vWldOcklHbDBjeUJzWlc1bmRHZ2dZVzVrSUdGa2RtbHpaU0JwWmlCcGRDZHpJSFJ2YnlCc2IyNW5KeWNuQ2lBZ0lDQjBhWFJzWlNBOUlDSWlDaUFnSUNCbWIzSWdiR2x1WlNCcGJpQjBaWGgwT2dvZ0lDQWdJQ0FnSUdsbUlDSjBhWFJzWlhzaUlHbHVJR3hwYm1VNkNpQWdJQ0FnSUNBZ0lDQWdJSFJwZEd4bElEMGdiR2x1WlZzMk9pMHhYUW9nSUNBZ2QyOXlaSE1nUFNCc1pXNG9kR2wwYkdVdWMzQnNhWFFvS1NrS0lDQWdJSE41YldKdmJITWdQU0JzWlc0b2RHbDBiR1VwQ2lBZ0lDQnRhWE4wWVd0bGN5QTlJRnRkQ2lBZ0lDQnBaaUF4SUR3Z2QyOXlaSE1nUGlBeE5Ub0tJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUoxbHZkWElnZEdsMGJHVWdhR0Z6SUh0M2IzSmtjMzBnZDI5eVpITWdiM0lnZTNONWJXSnZiSE45SUdOb1lYSmhZM1JsY25NdUlFTnZibk5wWkdWeUlHMWhhMmx1WnlCcGRDQnphRzl5ZEdWeUxpQlRiMjFsSUdwdmRYSnVZV3h6SUd4cGJXbDBJSFJvWlNCMGFYUnNaU0JpZVNBeE5TQjNiM0prY3lCdmJteDVMaWNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tLSUNBZ0lISmxkSFZ5YmlCdGFYTjBZV3RsY3dvS0NtUmxaaUJ5WldabGNtVnVZMlZ6S0hSbGVIUXBPZ29nSUNBZ0p5Y25SbWx1WkNCeVpXWmxjbVZ1WTJWeklHRnVaQ0JqYUdWamF5QjBhR1ZwY2lCdWRXMWlaWElnWVc1a0lHRm5aUzRnUTI5dGJXVnVkQ0JwWmlCMGFHVjVJR0Z5WlNCMGIyOGdiMnhrSUc5eUlIUnZieUJ0WVc1NUp5Y25DaUFnSUNBaklFWnBibVFnWVd4c0lIVnVhWEYxWlNCeVpXWmxjbVZ1WTJWeklHbHVJSFJvWlNCMFpYaDBJR0Z6SUdOcGRHVjdMaTR1ZlFvZ0lDQWdaVzUwYVhKbFgzUmxlSFFnUFNCMWJtbDBaVjkyWVd4cFpGOXNhVzVsY3loMFpYaDBLUW9nSUNBZ1lXeHNYMk5wZEdGMGFXOXVjeUE5SUhKbExtWnBibVJoYkd3b2NpZGphWFJsWEh0YlhseDlYU3Q5Snl3Z1pXNTBhWEpsWDNSbGVIUXBDaUFnSUNCeVpXWmxjbVZ1WTJWeklEMGdXMTBLSUNBZ0lHWnZjaUJqYVhSaGRHbHZiaUJwYmlCaGJHeGZZMmwwWVhScGIyNXpPZ29nSUNBZ0lDQWdJR05wZEdGMGFXOXVYM053YkdsMGRHVmtJRDBnWTJsMFlYUnBiMjR1YzNCc2FYUW9KeXduS1FvZ0lDQWdJQ0FnSUdadmNpQnlaV1psY21WdVkyVWdhVzRnWTJsMFlYUnBiMjVmYzNCc2FYUjBaV1E2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxabVZ5Wlc1alpTQTlJSEpsTG5OMVlpaHlKMk5wZEdWY2V5Y3NJQ2NuTENCeVpXWmxjbVZ1WTJVcENpQWdJQ0FnSUNBZ0lDQWdJSEpsWm1WeVpXNWpaU0E5SUhKbExuTjFZaWh5SjF4OUp5d2dKeWNzSUhKbFptVnlaVzVqWlNrS0lDQWdJQ0FnSUNBZ0lDQWdjbVZtWlhKbGJtTmxJRDBnY21VdWMzVmlLSEluSUNjc0lDY25MQ0J5WldabGNtVnVZMlVwQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxabVZ5Wlc1alpYTXVZWEJ3Wlc1a0tISmxabVZ5Wlc1alpTa0tJQ0FnSUhKbFptVnlaVzVqWlhNZ1BTQnNhWE4wS0hObGRDaHlaV1psY21WdVkyVnpLU2tLQ2lBZ0lDQWpJRUZ1WVd4NWMyVWdkR2hsSUdGblpTQnZaaUIwYUdVZ2NtVm1aWEpsYm1ObGN5QmhibVFnWTI5dGJXVnVkQ0JwWmlCdGIzSmxJSFJvWVc0Z05EQWxJR0Z5WlNCdmJHUUtJQ0FnSUhsbFlYSnpJRDBnVzEwS0lDQWdJSFJ5ZVRvS0lDQWdJQ0FnSUNCNVpXRnljeUE5SUZ0cGJuUW9jbVV1Wm1sdVpHRnNiQ2h5SjF4a1hHUmNaRnhrSnl3Z2NtVm1LVnN3WFNrZ1ptOXlJSEpsWmlCcGJpQnlaV1psY21WdVkyVnpYUW9nSUNBZ1pYaGpaWEIwT2dvZ0lDQWdJQ0FnSUhCaGMzTUtJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtJQ0FnSUdsbUlHeGxiaWg1WldGeWN5a2dQaUF3T2dvZ0lDQWdJQ0FnSUhSb2FYTmZlV1ZoY2lBOUlHbHVkQ2hrWVhSbExuUnZaR0Y1S0NrdWVXVmhjaWtLSUNBZ0lDQWdJQ0J5WldabGNtVnVZMlZmWVdkbGN5QTlJRnQwYUdselgzbGxZWElnTFNCNVpXRnlJR1p2Y2lCNVpXRnlJR2x1SUhsbFlYSnpYUW9nSUNBZ0lDQWdJRzlzWkdWeVgzUm9ZVzVmZEdWdUlEMGdNVEF3SUNvZ2JHVnVLRnRoWjJVZ1ptOXlJR0ZuWlNCcGJpQnlaV1psY21WdVkyVmZZV2RsY3lCcFppQmhaMlVnUGlBeE1GMHBJQzh2SUd4bGJpaDVaV0Z5Y3lrS0lDQWdJQ0FnSUNCdmJHUmxjbDkwYUdGdVgyWnBkbVVnUFNBeE1EQWdLaUJzWlc0b1cyRm5aU0JtYjNJZ1lXZGxJR2x1SUhKbFptVnlaVzVqWlY5aFoyVnpJR2xtSUdGblpTQStJRFZkS1NBdkx5QnNaVzRvZVdWaGNuTXBDaUFnSUNBZ0lDQWdhV1lnYjJ4a1pYSmZkR2hoYmw5bWFYWmxJRDRnTlRBZ2IzSWdiMnhrWlhKZmRHaGhibDkwWlc0Z1BpQXlNRG9LSUNBZ0lDQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWWlURzl2YTNNZ2JHbHJaU0I3YjJ4a1pYSmZkR2hoYmw5bWFYWmxmU1VnYjJZZ2VXOTFjaUJ5WldabGNtVnVZMlZ6SUdGeVpTQnZiR1JsY2lCMGFHRnVJR1pwZG1VZ2VXVmhjbk1nWVc1a0lIdHZiR1JsY2w5MGFHRnVYM1JsYm4wbElHRnlaU0JsZG1WdUlHOXNaR1Z5SUhSb1lXNGdkR1Z1SUhsbFlYSnpMaUJOYjNOMGJIa2diMnhrSUhKbFptVnlaVzVqWlhNZ2JXbG5hSFFnYzJsbmJtRnNJSEJ2YjNJZ1lXTjBkV0ZzYVhSNUlHOW1JSGx2ZFhJZ2QyOXlheUIwYnlCcWIzVnlibUZzSUdWa2FYUnZjbk11SUZSeWVTQjBieUIxYzJVZ2JtVjNaWElnY21WbVpYSmxibU5sY3k0aUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ0lDQWdJR2xtSUd4bGJpaHlaV1psY21WdVkyVnpLU0ErSURVd09nb2dJQ0FnSUNBZ0lDQWdJQ0J0YVhOMFlXdGxjeTVoY0hCbGJtUW9DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlKWmIzVWdhR0YyWlNCN2JHVnVLSEpsWm1WeVpXNWpaWE1wZlNCeVpXWmxjbVZ1WTJWekxDQjNhR2xzWlNCdGIzTjBJR3B2ZFhKdVlXeHpJR0ZzYkc5M0lHMWhlR2x0ZFcwZ2IyWWdOVEF1SUVOb1pXTnJJSFJvWlNCbmRXbGtaV3hwYm1WeklIUnZJSE5sWlNCb2IzY2diV0Z1ZVNCNWIzVnlJR3B2ZFhKdVlXd2dZV3hzYjNkekxpSUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwQ2dvZ0lDQWdJQ0FnSUNNZ1FXNWhiSGx6WlNCelpXeG1MV05wZEdGMGFXOXVMaUJHYVc1a0lHRjFkR2h2Y25NZ1lXNWtJR055YjNOekxXTm9aV05ySUhkcGRHZ2djbVZtWlhKbGJtTmxjeTRLSUNBZ0lDQWdJQ0JoYkd4ZllYVjBhRzl5YzE5c2FXNWxjeUE5SUhKbExtWnBibVJoYkd3b2NpZGNYR0YxZEdodmNsdGNXMXhkWVdKalpHVm1aMXdxSUN4Y1pGMHFlMXRlZlYwcmZTY3NJR1Z1ZEdseVpWOTBaWGgwS1FvZ0lDQWdJQ0FnSUc1aGJXVnpJRDBnVzEwS0lDQWdJQ0FnSUNCbWIzSWdZWFYwYUc5eVgyeHBibVVnYVc0Z1lXeHNYMkYxZEdodmNuTmZiR2x1WlhNNkNpQWdJQ0FnSUNBZ0lDQWdJR0YxZEdodmNsOXNhVzVsSUQwZ2NtVXVjM1ZpS0hJblhGeGhkWFJvYjNKYlhGdGNYV0ZpWTJSbFptY3NYR1JkS25zbkxDQW5KeXdnWVhWMGFHOXlYMnhwYm1VcENpQWdJQ0FnSUNBZ0lDQWdJR0YxZEdodmNsOXNhVzVsWDNOd2JHbDBkR1ZrSUQwZ1lYVjBhRzl5WDJ4cGJtVXVjM0JzYVhRb0p5d25LUW9nSUNBZ0lDQWdJQ0FnSUNCbWIzSWdaV0ZqYUY5aGRYUm9iM0lnYVc0Z1lYVjBhRzl5WDJ4cGJtVmZjM0JzYVhSMFpXUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxZV05vWDJGMWRHaHZjbDl6Y0d4cGRIUmxjaUE5SUdWaFkyaGZZWFYwYUc5eUxuTndiR2wwS0NjZ0p5a0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUJ1WVcxbElHbHVJR1ZoWTJoZllYVjBhRzl5WDNOd2JHbDBkR1Z5T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1VnUFNCeVpTNXpkV0lvY2lkY2ZTY3NJQ2NuTENCdVlXMWxLUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVWdQU0J5WlM1emRXSW9jaWNnSnl3Z0p5Y3NJRzVoYldVcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnYm1GdFpTQWhQU0FuSnpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpYTXVZWEJ3Wlc1a0tHNWhiV1VwQ2lBZ0lDQWdJQ0FnYzJWc1ptTnBkR0YwYVc5dWN5QTlJREFLSUNBZ0lDQWdJQ0JtYjNJZ2JtRnRaU0JwYmlCdVlXMWxjem9LSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJSEpsWm1WeVpXNWpaU0JwYmlCeVpXWmxjbVZ1WTJWek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdibUZ0WlM1MWNIQmxjaWdwSUdsdUlISmxabVZ5Wlc1alpTNTFjSEJsY2lncE9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdaamFYUmhkR2x2Ym5NZ0t6MGdNUW9nSUNBZ0lDQWdJSE5sYkdaamFYUmhkR2x2Ymw5d1pYSmpaVzUwWVdkbElEMGdNVEF3SUNvZ2MyVnNabU5wZEdGMGFXOXVjeUF2THlCc1pXNG9jbVZtWlhKbGJtTmxjeWtLSUNBZ0lDQWdJQ0JwWmlBd0lEd2djMlZzWm1OcGRHRjBhVzl1WDNCbGNtTmxiblJoWjJVZ1BDQXlNRG9LSUNBZ0lDQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWWlRWFFnYkdWaGMzUWdlM05sYkdaamFYUmhkR2x2Ym5OOUlHOTFkQ0J2WmlCN2JHVnVLSEpsWm1WeVpXNWpaWE1wZlNCeVpXWmxjbVZ1WTJWeklITmxaVzF6SUhSdklHSmxJSE5sYkdZdFkybDBZWFJwYjI1ekxpQlVhR2x6SUdseklHRmpZMlZ3ZEdGaWJHVXNJR0oxZENCclpXVndJR2wwSUdsdUlHTm9aV05yTGlJS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBDaUFnSUNBZ0lDQWdhV1lnYzJWc1ptTnBkR0YwYVc5dVgzQmxjbU5sYm5SaFoyVWdQajBnTWpBNkNpQWdJQ0FnSUNBZ0lDQWdJRzFwYzNSaGEyVnpMbUZ3Y0dWdVpDZ0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtSWtGMElHeGxZWE4wSUh0elpXeG1ZMmwwWVhScGIyNXpmU0J2ZFhRZ2IyWWdlMnhsYmloeVpXWmxjbVZ1WTJWektYMGdjbVZtWlhKbGJtTmxjeUJ6WldWdGN5QjBieUJpWlNCelpXeG1MV05wZEdGMGFXOXVjeTRnUTI5dWMybGtaWElnYVdZZ2VXOTFJRzVsWldRZ2MyOGdiV0Z1ZVNCelpXeG1MWEpsWm1WeVpXNWpaWE1zSUdsMElHMXBaMmgwSUc1dmRDQnNiMjlySUdkdmIyUXVJZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrS0lDQWdJSEpsZEhWeWJpQnRhWE4wWVd0bGN3b0tDbVJsWmlCdmRtVnlZMmwwWVhScGIyNG9iR2x1WlN3Z2FXNWtaWGdwT2dvZ0lDQWdKeWNuUTJobFkyc2dhV1lnZEdobGNtVWdZWEpsSUhSdmJ5QnRZVzU1SUdOcGRHRjBhVzl1Y3lCcGJpQnZibVVnY0d4aFkyVW5KeWNLSUNBZ0lHRnNiRjlqYVhSaGRHbHZibk1nUFNCeVpTNW1hVzVrWVd4c0tISW5YRnhqYVhSbGUxdGVmVjByZlNjc0lHeHBibVVwQ2lBZ0lDQnRhWE4wWVd0bGN5QTlJRnRkQ2lBZ0lDQm1iM0lnWTJsMFlYUnBiMjRnYVc0Z1lXeHNYMk5wZEdGMGFXOXVjem9LSUNBZ0lDQWdJQ0J1ZFcxaVpYSmZiMlpmY21WbVpYSmxibU5sY3lBOUlHeGxiaWhqYVhSaGRHbHZiaTV6Y0d4cGRDZ25MQ2NwS1FvZ0lDQWdJQ0FnSUdsbUlHNTFiV0psY2w5dlpsOXlaV1psY21WdVkyVnpJRDRnTkRvS0lDQWdJQ0FnSUNBZ0lDQWdiV2x6ZEdGclpYTXVZWEJ3Wlc1a0tBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lpVEdsdVpTQjdhVzVrWlhoOUxpQlVhR1Z5WlNCaGNtVWdlMjUxYldKbGNsOXZabDl5WldabGNtVnVZMlZ6ZlNCeVpXWmxjbVZ1WTJWeklHbHVJRzl1WlNCd2JHRmpaUzRnUW14dllYUmxaQ0J5WldabGNtVnVZMlZ6SUc1bGFYUm9aWElnYldGclpTQjBhR1VnYzNSaGRHVnRaVzUwSUhOMGNtOXVaMlZ5SUc1dmNpQm9aV3h3SUhSb1pTQnlaV0ZrWlhJdUlFTnZibk5wWkdWeUlISmxaSFZqYVc1bklHTnBkR0YwYVc5dWN5QnZjaUJxZFhOMElHTnBkR2x1WnlCdmJtVWdjbVYyYVdWM0lHbHVjM1JsWVdRdUlnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tLSUNBZ0lISmxkSFZ5YmlCdGFYTjBZV3RsY3dvS0NtUmxaaUJwYm5SeWIxOXdZWFIwWlhKdWN5aDBaWGgwS1RvS0lDQWdJQ2NuSjBOb1pXTnJJR2xtSUhOdmJXVWdhVzUwY205a2RXTjBhVzl1SUhkdmNtUnpJRzlqWTNWeUlIUnZieUJ2Wm5SbGJpQjBhVzFsY3ljbkp3b2dJQ0FnYldsemRHRnJaWE1nUFNCYlhRb2dJQ0FnWlc1MGFYSmxYM1JsZUhRZ1BTQjFibWwwWlY5MllXeHBaRjlzYVc1bGN5aDBaWGgwS1FvZ0lDQWdabTl5SUhkdmNtUWdhVzRnVDFaRlVsVlRSVVJmU1U1VVVrODZDaUFnSUNBZ0lDQWdiMk5qZFhKaGJtTmxJRDBnWlc1MGFYSmxYM1JsZUhRdVkyOTFiblFvZDI5eVpDa0tJQ0FnSUNBZ0lDQnZZMk4xY21GdVkyVmZjR1Z5WTJWdWRHRm5aU0E5SUc5alkzVnlZVzVqWlNBdklHeGxiaWhsYm5ScGNtVmZkR1Y0ZEM1emNHeHBkQ2dpSUNJcEtRb2dJQ0FnSUNBZ0lHbG1JQ2d3TGpBd01USWdQQ0J2WTJOMWNtRnVZMlZmY0dWeVkyVnVkR0ZuWlNBOElEQXVNREF5S1NCaGJtUWdLRzlqWTNWeVlXNWpaU0ErSURFcE9nb2dJQ0FnSUNBZ0lDQWdJQ0J0YVhOMFlXdGxjeTVoY0hCbGJtUW9DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlkVFpXNTBaVzVqWlhNZ2IyWjBaVzRnYzNSaGNuUWdkMmwwYUNBaWUzZHZjbVI5SWk0Z1ZISjVJR0ZzZEdWeWJtRjBhWFpsY3lCc2FXdGxJQ0o3VDFaRlVsVlRSVVJmU1U1VVVrOWJkMjl5WkYxOUlpNG5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1FvZ0lDQWdJQ0FnSUdsbUlHOWpZM1Z5WVc1alpWOXdaWEpqWlc1MFlXZGxJRDRnTUM0d01ESWdZVzVrSUc5alkzVnlZVzVqWlNBK0lERTZDaUFnSUNBZ0lDQWdJQ0FnSUcxcGMzUmhhMlZ6TG1Gd2NHVnVaQ2dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUoxTmxiblJsYm1ObGN5QnpkR0Z5ZENCM2FYUm9JQ0o3ZDI5eVpIMGlJSFJ2YnlCdlpuUmxiaTRnVkhKNUlHRnNkR1Z5Ym1GMGFYWmxjeUJzYVd0bElDSjdUMVpGVWxWVFJVUmZTVTVVVWs5YmQyOXlaRjE5SWk0bkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ2NtVjBkWEp1SUcxcGMzUmhhMlZ6Q2dvS1pHVm1JR3hwYm1WZmFYTmZkbUZzYVdRb2JHbHVaU2s2Q2lBZ0lDQW5KeWREYUdWamF5QnBaaUIwYUdVZ2JHbHVaU0JwY3lCdWIzUWdaVzF3ZEhrZ1lXNWtJRzV2ZENCaElFeGhkR1Y0SUdOdmJXMWxiblFuSnljS0lDQWdJSFpoYkdsa1lYUnBiMjRnUFNCR1lXeHpaUW9nSUNBZ2FXWWdiR1Z1S0d4cGJtVXBJRDRnTVRvS0lDQWdJQ0FnSUNCcFppQnNhVzVsV3pCZElDRTlJQ2NsSnpvS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzYVdSaGRHbHZiaUE5SUZSeWRXVUtJQ0FnSUhKbGRIVnliaUIyWVd4cFpHRjBhVzl1Q2dvS1pHVm1JSFZ1YVhSbFgzWmhiR2xrWDJ4cGJtVnpLSFJsZUhRcE9nb2dJQ0FnSnljblVtVnRiM1psSUd4cGJtVnpJSFJvWVhRZ1lYSmxJR1Z0Y0hSNUlHOXlJR0VnVEdGMFpYZ2dZMjl0YldWdWRDQmhibVFnZFc1cGRHVWdkR2hsSUhKbGMzUW5KeWNLSUNBZ0lHVnVkR2x5WlY5MFpYaDBJRDBnSnljS0lDQWdJR1p2Y2lCc2FXNWxJR2x1SUhSbGVIUTZDaUFnSUNBZ0lDQWdhV1lnYkdWdUtHeHBibVVwSUQ0Z01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ2JHbHVaVnN3WFNBaFBTQW5KU2M2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5ScGNtVmZkR1Y0ZENBclBTQnNhVzVsQ2lBZ0lDQnlaWFIxY200Z1pXNTBhWEpsWDNSbGVIUUtDZ3BrWldZZ2NtVmtkVzVrWVc1amVTaHNhVzVsTENCcGJtUmxlQ2s2Q2lBZ0lDQW5KeWREYUdWamF5Qm1iM0lnZEdobElISmxaSFZ1WkdGdVkybGxjeWNuSndvZ0lDQWdiV2x6ZEdGclpYTWdQU0JiWFFvZ0lDQWdabTl5SUhkdmNtUWdhVzRnVWtWRVZVNUVRVTVVT2dvZ0lDQWdJQ0FnSUdsbUlIZHZjbVFnYVc0Z2JHbHVaVG9LSUNBZ0lDQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWW5UR2x1WlNCN2FXNWtaWGdnS3lBeGZTNGdVbVZ3YkdGalpTQnNhV3RsYkhrZ2NtVmtkVzVrWVc1MElDSjdkMjl5WkgwaUlIZHBkR2dnYW5WemRDQWllMUpGUkZWT1JFRk9WRnQzYjNKa1hYMGlMaWNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcENpQWdJQ0J5WlhSMWNtNGdiV2x6ZEdGclpYTUtDZ3BrWldZZ2JtVm5ZWFJwZG1WektHeHBibVVzSUdsdVpHVjRLVG9LSUNBZ0lDY25KME5vWldOcklHWnZjaUIwYUdVZ2JtVm5ZWFJwZG1Wekp5Y25DaUFnSUNCdGFYTjBZV3RsY3lBOUlGdGRDaUFnSUNCbWIzSWdkMjl5WkNCcGJpQk9SVWRCVkVsV1JWTTZDaUFnSUNBZ0lDQWdhV1lnZDI5eVpDQnBiaUJzYVc1bE9nb2dJQ0FnSUNBZ0lDQWdJQ0J0YVhOMFlXdGxjeTVoY0hCbGJtUW9DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlkTWFXNWxJSHRwYm1SbGVDQXJJREY5TGlCU1pYQnNZV05sSUc1bFoyRjBhWFpsSUNKN2QyOXlaSDBpSUhkcGRHZ2dZU0J0YjNKbElIQnZjMmwwYVhabElDSjdUa1ZIUVZSSlZrVlRXM2R2Y21SZGZTSXVKd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrS0lDQWdJSEpsZEhWeWJpQnRhWE4wWVd0bGN3b0tDbVJsWmlCeVpXMXZkbVZmYkdGMFpYaGZjM2x1ZEdGNEtHeHBibVVwT2dvZ0lDQWdKeWNuVW1WdGIzWmxJR3hoZEdWNElITjBkV1ptSUdOdmJuUmhhVzVwYm1jZ1pHOTBjeUJoYm1RZ2JHOXVaeUJ6ZVc1MFlYZ2dabkp2YlNCMGFHVWdiR2x1WlNjbkp3b2dJQ0FnYkdsdVpTQTlJSEpsTG5OMVlpaHlKMFpwWjF3dUp5d2dKeWNzSUd4cGJtVXBDaUFnSUNCc2FXNWxJRDBnY21VdWMzVmlLSEluUm1sbmMxd3VKeXdnSnljc0lHeHBibVVwQ2lBZ0lDQnNhVzVsSUQwZ2NtVXVjM1ZpS0hJblJYRmNMaWNzSUNjbkxDQnNhVzVsS1FvZ0lDQWdiR2x1WlNBOUlISmxMbk4xWWloeUoybGNMbVZjTGljc0lDY25MQ0JzYVc1bEtRb2dJQ0FnYkdsdVpTQTlJSEpsTG5OMVlpaHlKMlYwSUdGc1hDNG5MQ0FuSnl3Z2JHbHVaU2tLSUNBZ0lHeHBibVVnUFNCeVpTNXpkV0lvY2lkbFhDNW5YQzRuTENBbkp5d2diR2x1WlNrS0lDQWdJR3hwYm1VZ1BTQnlaUzV6ZFdJb2NpZDJjMXd1Snl3Z0p5Y3NJR3hwYm1VcENpQWdJQ0JzYVc1bElEMGdjbVV1YzNWaUtISW5ZVnd1YTF3dVlWd3VKeXdnSnljc0lHeHBibVVwQ2lBZ0lDQnNhVzVsSUQwZ2NtVXVjM1ZpS0hJblhHUXVYR1FuTENBbkp5d2diR2x1WlNrS0lDQWdJR3hwYm1VZ1BTQnlaUzV6ZFdJb2NpZGNMbHRlSUYwbkxDQW5KeXdnYkdsdVpTa0tJQ0FnSUd4cGJtVWdQU0J5WlM1emRXSW9jaWRjWEdOcGRHVjdXMTU5WFN0OUp5d2dKeWNzSUd4cGJtVXBDaUFnSUNCc2FXNWxJRDBnY21VdWMzVmlLSEluWEZ4eVpXWjdXMTU5WFN0OUp5d2dKeWNzSUd4cGJtVXBDaUFnSUNCc2FXNWxJRDBnY21VdWMzVmlLSEluWENSYlhsd2tYU3RjSkNjc0lDY25MQ0JzYVc1bEtRb2dJQ0FnY21WMGRYSnVJR3hwYm1VS0NncGtaV1lnYkdGMFpYaGZZbVZ6ZEY5d2NtRmpkR2xqWlhNb2RHVjRkQ2s2Q2lBZ0lDQW5KeWREYUdWamF5QnBaaUJ6Wlc1MFpXNWpaWE1nWVhKbElHNXZkQ0J2YmlCelpYQmhjbUYwWlNCc2FXNWxjeUJwYmlCTVlWUmxXQ2NuSndvZ0lDQWdiV2x6ZEdGclpYTWdQU0JiWFFvZ0lDQWdaRzkwYzE5cGJsOXNhVzVsSUQwZ01Bb2dJQ0FnZFhObFpuVnNYMnhwYm1WeklEMGdNQW9nSUNBZ1ptOXlJR3hwYm1VZ2FXNGdkR1Y0ZERvS0lDQWdJQ0FnSUNCcFppQnNhVzVsWDJselgzWmhiR2xrS0d4cGJtVXBPZ29nSUNBZ0lDQWdJQ0FnSUNCc2FXNWxJRDBnY21WdGIzWmxYMnhoZEdWNFgzTjViblJoZUNoc2FXNWxLUW9nSUNBZ0lDQWdJQ0FnSUNCa2IzUnpYMmx1WDJ4cGJtVWdLejBnYkdsdVpTNWpiM1Z1ZENnbkxpY3BDaUFnSUNBZ0lDQWdJQ0FnSUhWelpXWjFiRjlzYVc1bGN5QXJQU0F4Q2lBZ0lDQnBaaUJrYjNSelgybHVYMnhwYm1VZ0x5QjFjMlZtZFd4ZmJHbHVaWE1nUGlBeExqSTZDaUFnSUNBZ0lDQWdiV2x6ZEdGclpYTXVZWEJ3Wlc1a0tBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppZEpiaUJNWVZSbFdDd2dhWFFnYVhNZ1kyOXVjMmxrWlhKbFpDQmhJR0psYzNRZ2NISmhZM1JwWTJVZ2RHOGdjM1JoY25RZ1pXRmphQ0J6Wlc1MFpXNWpaU0JtY205dElHRWdibVYzSUd4cGJtVXVKd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ2NtVjBkWEp1SUcxcGMzUmhhMlZ6Q2dvS1pHVm1JSE5sYm5SbGJtTmxYMnhsYm1kMGFDaHNhVzVsTENCcGJtUmxlQ2s2Q2lBZ0lDQW5KeWREYUdWamF5QnBaaUIwYUdVZ2MyVnVkR1Z1WTJVZ2FYTWdkRzl2SUd4dmJtY25KeWNLSUNBZ0lHMXBjM1JoYTJWeklEMGdXMTBLSUNBZ0lHeHBibVVnUFNCeVpXMXZkbVZmYkdGMFpYaGZjM2x1ZEdGNEtHeHBibVVwQ2lBZ0lDQnpaVzUwWlc1alpYTWdQU0JzYVc1bExuTndiR2wwS0NjdUp5a0tJQ0FnSUdsbUlHRnVlU2hiYkdWdUtITmxiblJsYm1ObEtTQStJREkwTUNCbWIzSWdjMlZ1ZEdWdVkyVWdhVzRnYzJWdWRHVnVZMlZ6WFNrNkNpQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlkTWFXNWxJSHRwYm1SbGVDQXJJREY5TGlCVWFHVWdjMlZ1ZEdWdVkyVWdjMlZsYlhNZ2RHOGdZbVVnZEc5dklHeHZibWN1SUVOdmJuTnBaR1Z5SUhOb2IzSjBaVzVwYm1jZ2IzSWdjM0JzYVhSMGFXNW5JR2wwSUdsdUlIUjNieTRuQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwQ2lBZ0lDQnlaWFIxY200Z2JXbHpkR0ZyWlhNS0NncGtaV1lnYVhSZmFYTmZiR0YwWlhoZmRHVjRkQ2gwWlhoMEtUb0tJQ0FnSUNjbkowTm9aV05ySUdsbUlIUm9hWE1nYVhNZ1RHRlVaVmdnWkc5amRXMWxiblFuSnljS0lDQWdJR1Z1ZEdseVpWOTBaWGgwSUQwZ2RXNXBkR1ZmZG1Gc2FXUmZiR2x1WlhNb2RHVjRkQ2tLSUNBZ0lHbDBYMmx6WDJ4aGRHVjRYM1JsZUhRZ1BTQW9LQ2RjWEdKbFoybHVlMlJ2WTNWdFpXNTBmU2NnYVc0Z1pXNTBhWEpsWDNSbGVIUXBDaUFnSUNBZ0lDQWdJQ0FnSUc5eUlDZ25YRnhrYjJOMWJXVnVkR05zWVhOekp5QnBiaUJsYm5ScGNtVmZkR1Y0ZENrcENpQWdJQ0J5WlhSMWNtNGdhWFJmYVhOZmJHRjBaWGhmZEdWNGRBb0tDbVJsWmlCaFluTnZiSFYwWlhNb2JHbHVaU3dnYVc1a1pYZ3BPZ29nSUNBZ0p5Y25RMmhsWTJzZ1ptOXlJSGR2Y21SeklHeHBhMlVnSjJGc2QyRjVjeWNnYjNJZ0oyNWxkbVZ5SnlCaWRYUWdaWGhqWlhCMElHVjRZMlZ3ZEdsdmJuTW5KeWNLSUNBZ0lHMXBjM1JoYTJWeklEMGdXMTBLSUNBZ0lHWnZjaUJ1ZFcwc0lIZHZjbVFnYVc0Z1pXNTFiV1Z5WVhSbEtFRkNVMDlNVlZSRlV5azZDaUFnSUNBZ0lDQWdibTkwWDJWNFkyVndkR2x2YmlBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRZMlZ3ZEdsdmJpQnViM1FnYVc0Z2JHbHVaU0JtYjNJZ1pYaGpaWEIwYVc5dUlHbHVJRUZDVTA5TVZWUkZVMTlGV0VORlVGUkpUMDVUVzI1MWJWMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMEtJQ0FnSUNBZ0lDQnBaaUFvZDI5eVpDQnBiaUJzYVc1bEtTQmhibVFnWVd4c0tHNXZkRjlsZUdObGNIUnBiMjRwT2dvZ0lDQWdJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb1ppZE1hVzVsSUh0cGJtUmxlQ0FySURGOUxpQjdRVUpUVDB4VlZFVlRXM2R2Y21SZGZTY3BDaUFnSUNCeVpYUjFjbTRnYldsemRHRnJaWE1LQ2dwa1pXWWdZMjl0Y0dGeWFXNW5YMkZpYzI5c2RYUmxjeWhzYVc1bExDQnBibVJsZUNrNkNpQWdJQ0FuSnlkRGFHVmpheUJwWmlCMGFHVnlaU0JoY21VZ1kyOXRjR1Z5WVhScGRtVWdZV0p6YjJ4MWRHVnpJR3hwYTJVZ0ltNWxZWEpzZVNCcGJtWnBibWwwWlNJbkp5Y0tJQ0FnSUdGc2JGOWhZbk52YkhWMFpYTWdQU0J5WlM1bWFXNWtZV3hzS0FvZ0lDQWdJQ0FnSUNBZ0lDQnlJaWdvWVNCc2FYUjBiR1VvSUdKcGRDay9mR0ZzYlc5emRIeGhjM1J2Ym1semFHbHVaMng1ZkdOdmJYQnNaWFJsYkhsOFpYaGpaV1ZrYVc1bmJIbDhaWGgwY21WdFpXeDVmR2hwWjJoc2VYeHBibU55WldScFlteDVmRzF2Y21VZ2RHaGhibnh1WldGeWJIbDhjR0Z5ZEd4NWZIQmhjblJwWVd4c2VYeHhkV2wwWlh4emIyMWxkMmhoZEh4MGIzUmhiR3g1ZkhWdVltVnNhV1YyWVdKc2VYeDJaWEo1S1NBb1pHVmhaSHhrYVhOaGNIQmxZWEpsWkh4bVlXeHpaWHhuYjI1bGZHbHNiR1ZuWVd4OGFXNW1hVzVwZEdWOGFXNTJZV3gxWVdKc1pYeHNaV2RoYkh4d1pYSm1aV04wZkhCbGNuWmhjMmwyWlh4d2NtVm5ibUZ1ZEh4d2NtOW1aWE56YVc5dVlXeDhkSEoxWlh4M2FHOXNaWHgyWVc1cGMyaGxaQ2twSWl3S0lDQWdJQ0FnSUNBZ0lDQWdiR2x1WlNrS0lDQWdJRzFwYzNSaGEyVnpJRDBnVzEwS0lDQWdJR1p2Y2lCd2FISmhjMlVnYVc0Z1lXeHNYMkZpYzI5c2RYUmxjem9LSUNBZ0lDQWdJQ0J3YUhKaGMyVWdQU0J6ZEhJb2NHaHlZWE5sV3pCZEtRb2dJQ0FnSUNBZ0lHRmljMjlzZFhSbElEMGdjR2h5WVhObExuTndiR2wwS0NJZ0lpbGJMVEZkQ2lBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaWRNYVc1bElIdHBibVJsZUNBcklERjlMaUJKYmlBaWUzQm9jbUZ6WlgwaUlHTnZiWEJ5WVhScGRtVWdaR1ZuY21WbElHbHpJR0Z3Y0d4cFpXUWdkRzhnWVc0Z1lXSnpiMngxZEdVdUlGVnpkV0ZzYkhrc0lHbDBJR2x6SUdWcGRHaGxjaUI3WVdKemIyeDFkR1Y5SUc5eUlHNXZkQzRuQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwQ2lBZ0lDQnlaWFIxY200Z2JXbHpkR0ZyWlhNS0NncGtaV1lnYm5WdFltVnlYMjltWDNScGJXVnpLR3hwYm1Vc0lHbHVaR1Y0S1RvS0lDQWdJQ2NuSjBOb1pXTnJJR2xtSUhSb1pYSmxJR0Z5WlNCd2FISmhjMlZ6SUd4cGEyVWdJbWgxYm1SeVpXUnpJRzltSUhScGJXVnpJaWNuSndvZ0lDQWdiV2x6ZEdGclpYTWdQU0JiWFFvS0lDQWdJQ01nVUdGMGRHVnlibk1nYkdsclpTQWlkR2h2ZFhOaGJtUnpJRzltSUhScGJXVnpJam9LSUNBZ0lHRnNiRjl3WVhSMFpYSnVjeUE5SUhKbExtWnBibVJoYkd3b0NpQWdJQ0FnSUNBZ0lDQWdJSElpS0NodGFXeHNhVzl1YzN4b2RXNWtjbVZrYzN4MGFHOTFjMkZ1WkhOOFpHOTZaVzV6S1NCdlppQW9kR2x0WlhOOGMyRnRjR3hsY3lrcElpd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdsdVpTa0tJQ0FnSUdadmNpQndhSEpoYzJVZ2FXNGdZV3hzWDNCaGRIUmxjbTV6T2dvZ0lDQWdJQ0FnSUhCb2NtRnpaVjkzY205dVp5QTlJSE4wY2lod2FISmhjMlZiTUYwcENpQWdJQ0FnSUNBZ2NHaHlZWE5sWDJOdmNuSmxZM1JsWkNBOUlIQm9jbUZ6WlY5M2NtOXVaeTV6Y0d4cGRDZ2lJRzltSUNJcFd6QmRXem90TVYwZ0t5QWlJQ0lnS3lCd2FISmhjMlZmZDNKdmJtY3VjM0JzYVhRb0lpQnZaaUFpS1ZzeFhRb2dJQ0FnSUNBZ0lHMXBjM1JoYTJWekxtRndjR1Z1WkNnS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1EyOXVjMmxrWlhJZ2NtVndiR0ZqYVc1bklDSjdjR2h5WVhObFgzZHliMjVuZlNJZ2QybDBhQ0FpWVNCbVpYY2dlM0JvY21GelpWOWpiM0p5WldOMFpXUjlJaTRuQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwQ2dvZ0lDQWdJeUJRWVhSMFpYSnVjeUJzYVd0bElDSjBhRzkxYzJGdVpITWdiV1YwWlhKeklqb0tJQ0FnSUdGc2JGOXdZWFIwWlhKdWN5QTlJSEpsTG1acGJtUmhiR3dvQ2lBZ0lDQWdJQ0FnSUNBZ0lISWlLQ2h0YVd4c2FXOXVjM3hvZFc1a2NtVmtjM3gwYUc5MWMyRnVaSE44Wkc5NlpXNXpLU0FvZEdsdFpYTjhiV2xqY205dWMzeHRhV055YjIxbGRHVnljM3h0WlhSbGNuTjhhRzkxY25OOGNHVnZjR3hsZkhsbFlYSnpLU2tpTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVsS1FvZ0lDQWdabTl5SUhCb2NtRnpaU0JwYmlCaGJHeGZjR0YwZEdWeWJuTTZDaUFnSUNBZ0lDQWdjR2h5WVhObFgzZHliMjVuSUQwZ2MzUnlLSEJvY21GelpWc3dYU2tLSUNBZ0lDQWdJQ0J3YUhKaGMyVmZZMjl5Y21WamRHVmtJRDBnY0doeVlYTmxYM2R5YjI1bkxuTndiR2wwS0NJZ0lpbGJNRjFiT2kweFhTQXJJQ0lnSWlBcklIQm9jbUZ6WlY5M2NtOXVaeTV6Y0d4cGRDZ2lJQ0lwV3pGZENpQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlkTWFXNWxJSHRwYm1SbGVDQXJJREY5TGlCU1pYQnNZV05sSUNKN2NHaHlZWE5sWDNkeWIyNW5mU0lnZDJsMGFDQWlZU0I3Y0doeVlYTmxYMk52Y25KbFkzUmxaSDBpTGljS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrS0lDQWdJSEpsZEhWeWJpQnRhWE4wWVd0bGN3b0tDbVJsWmlCcGJsOTBhR1ZmYm1GdFpWOXZabDlzWVhjb2JHbHVaU3dnYVc1a1pYZ3BPZ29nSUNBZ0p5Y25RMmhsWTJzZ2FXWWdibUZ0WlhNZ2IyWWdiR0YzY3lCdGFYTjBZV3RsYm14NUlITjBZWEowSUhkcGRHZ2dZVzRnWVhKMGFXTnNaU2NuSndvZ0lDQWdjR0YwZEdWeWJpQTlJSEpsTG1OdmJYQnBiR1VvSWlnb1ZIeDBLV2hsSUZ0ZUlGMHFKM01nS0d4aGQzeGthWE4wY21saWRYUnBiMjU4WlhGMVlYUnBiMjU4Wm05eWJYVnNZWHgzWVhabGJHVnVaM1JvZkhKMWJHVjhiR2x0YVhSOGRHaGxiM0o1ZkhKaFpHbGhkR2x2YmlrcElpa0tJQ0FnSUdGc2JGOXRZWFJqYUdWeklEMGdjR0YwZEdWeWJpNW1hVzVrWVd4c0tHeHBibVVwQ2lBZ0lDQnRhWE4wWVd0bGN5QTlJRnRkQ2lBZ0lDQm1iM0lnYldGMFkyZ2dhVzRnWVd4c1gyMWhkR05vWlhNNkNpQWdJQ0FnSUNBZ2JXbHpkR0ZyWlhNdVlYQndaVzVrS0dZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1NXNGdJbnR0WVhSamFGc3dYWDBpSUhCeWIySmhZbXg1SUc1dklHRnlkR2xqYkdVZ0luUm9aU0lnYVhNZ2JtVmxaR1ZrTGljcENpQWdJQ0J5WlhSMWNtNGdiV2x6ZEdGclpYTUtDZ3BrWldZZ1pYaDBjbVZ0WlY5eGRXRnVkR2wwYVdWektHeHBibVVzSUdsdVpHVjRLVG9LSUNBZ0lDY25KME5vWldOcklHbG1JR0ZrYW1WamRHbDJaWE1nYkdsclpTQmlhV2NnYjNJZ2MyMWhiR3dnYldGMFkyZ2dkR2hsSUhSNWNHVWdiMllnY1hWaGJuUnBkSGtuSnljS0lDQWdJQ01nVVhWaGJuUnBkR2xsY3lCMGFHRjBJSE5vYjNWc1pDQmlaU0JvYVdkb0lHOXlJR3h2ZHpvS0lDQWdJSEJoZEhSbGNtNGdQU0J5WlM1amIyMXdhV3hsS0NJb1ltbG5mR3hoY21kbGZITnRZV3hzS1NBb0tHTnZibVIxWTNScGRtbDBlWHhqYjI1a2RXTjBZVzVqWlh4eVpYTnBjM1JoYm1ObGZHUnBabVoxYzJsMmFYUjVLWHdvZEdobGNtMWhiSHhsYkdWamRISnBZMkZzZkdsdWRHVnlabUZqWlh4aWIzVnVaR0Z5ZVNrZ0tHTnZibVIxWTNScGRtbDBlWHhqYjI1a2RXTjBZVzVqWlh4eVpYTnBjM1JoYm1ObGZISmxjMmx6ZEdsMmFYUjVmR1JwWm1aMWMybDJhWFI1S1h4bWNtVnhkV1Z1WTNsOGRtRnNkV1Y4ZEdWdGNHVnlZWFIxY21WOFkyOXVZMlZ1ZEhKaGRHbHZibnh3Y21WemMzVnlaWHhoYkhScGRIVmtaU2tpS1FvZ0lDQWdZV3hzWDIxaGRHTm9aWE1nUFNCd1lYUjBaWEp1TG1acGJtUmhiR3dvYkdsdVpTa0tJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtJQ0FnSUdadmNpQnRZWFJqYUNCcGJpQmhiR3hmYldGMFkyaGxjem9LSUNBZ0lDQWdJQ0J0YVhOMFlXdGxjeTVoY0hCbGJtUW9aaWRNYVc1bElIdHBibVJsZUNBcklERjlMaUJWYzNWaGJHeDVJQ0o3YldGMFkyaGJNVjE5SWlCcGN5Qm9hV2RvTDJ4dmR5QnlZWFJvWlhJZ2RHaGhiaUFpZTIxaGRHTm9XekJkZlNJdUp5a0tDaUFnSUNBaklGRjFZVzUwYVhScFpYTWdkR2hoZENCemFHOTFiR1FnWW1VZ2JHOXVaeUJ2Y2lCemFHOXlkRG9LSUNBZ0lIQmhkSFJsY200Z1BTQnlaUzVqYjIxd2FXeGxLQ0lvWW1sbmZHeGhjbWRsZkhOdFlXeHNLU0FvZDJGMlpXeGxibWQwYUh4c2FXWmxjM0JoYm54c1pXNW5kR2g4Y0dWeWFXOWtmSFJwYldVZ1puSmhiV1Y4ZEdsdFpTQndaWEpwYjJSOFpHbHpkR0Z1WTJWOGNHRjBhSHh0WldGdUlHWnlaV1VnY0dGMGFIeE5SbEFwSWlrS0lDQWdJR0ZzYkY5dFlYUmphR1Z6SUQwZ2NHRjBkR1Z5Ymk1bWFXNWtZV3hzS0d4cGJtVXBDaUFnSUNCbWIzSWdiV0YwWTJnZ2FXNGdZV3hzWDIxaGRHTm9aWE02Q2lBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLR1luVEdsdVpTQjdhVzVrWlhnZ0t5QXhmUzRnVlhOMVlXeHNlU0FpZTIxaGRHTm9XekZkZlNJZ2FYTWdiRzl1Wnk5emFHOXlkQ0J5WVhSb1pYSWdkR2hoYmlBaWUyMWhkR05vV3pCZGZTSXVKeWtLQ2lBZ0lDQWpJRkYxWVc1MGFYUnBaWE1nZEdoaGRDQnphRzkxYkdRZ1ltVWdkMmxrWlNCdmNpQnVZWEp5YjNjNkNpQWdJQ0J3WVhSMFpYSnVJRDBnY21VdVkyOXRjR2xzWlNnaUtHSnBaM3hzWVhKblpYeHpiV0ZzYkNrZ0tISmhibWRsZkhOd1pXTjBjblZ0S1NJcENpQWdJQ0JoYkd4ZmJXRjBZMmhsY3lBOUlIQmhkSFJsY200dVptbHVaR0ZzYkNoc2FXNWxLUW9nSUNBZ1ptOXlJRzFoZEdOb0lHbHVJR0ZzYkY5dFlYUmphR1Z6T2dvZ0lDQWdJQ0FnSUcxcGMzUmhhMlZ6TG1Gd2NHVnVaQ2htSjB4cGJtVWdlMmx1WkdWNElDc2dNWDB1SUZWemRXRnNiSGtnSW50dFlYUmphRnN4WFgwaUlHbHpJSGRwWkdVdmJtRnljbTkzSUhKaGRHaGxjaUIwYUdGdUlDSjdiV0YwWTJoYk1GMTlJaTRuS1FvZ0lDQWdjbVYwZFhKdUlHMXBjM1JoYTJWekNnb0taR1ZtSUdOc2FXTm9aWE1vYkdsdVpTd2dhVzVrWlhncE9nb2dJQ0FnSnljblEyaGxZMnNnWm05eUlHTnNhV05vWlhNbkp5Y0tJQ0FnSUcxcGMzUmhhMlZ6SUQwZ1cxMEtJQ0FnSUdadmNpQndhSEpoYzJVZ2FXNGdRMHhKUTBoRlV6b0tJQ0FnSUNBZ0lDQnBaaUJ3YUhKaGMyVWdhVzRnYkdsdVpUb0tJQ0FnSUNBZ0lDQWdJQ0FnYldsemRHRnJaWE11WVhCd1pXNWtLQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZblRHbHVaU0I3YVc1a1pYZ2dLeUF4ZlM0Z1ZHaGxJSEJvY21GelpTQWllM0JvY21GelpYMGlJR2x6SUdOdmJuTnBaR1Z5WldRZ1lTQmpiR2xqYU1PcElHRnVaQ0J6YUc5MWJHUWdZbVVnWVhadmFXUmxaQzRuQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tRb2dJQ0FnY21WMGRYSnVJRzFwYzNSaGEyVnpDZ29LWkdWbUlHNTFiV0psY25OZmQybDBhRjl6S0d4cGJtVXNJR2x1WkdWNEtUb0tJQ0FnSUNjbkowTm9aV05ySUdadmNpQnVkVzFpWlhJZ1pXNWthVzVuSUhkcGRHZ2dKM01nYkdsclpTQnBiaUF4TUNkekp5Y25DaUFnSUNCdGFYTjBZV3RsY3lBOUlGdGRDaUFnSUNCbGNuSnZjaUE5SUhKbExtWnBibVJoYkd3b2NpSmNaQ2R6SWl3Z2JHbHVaU2tLSUNBZ0lHbG1JR1Z5Y205eUlDRTlJRnRkT2dvZ0lDQWdJQ0FnSUcxcGMzUmhhMlZ6TG1Gd2NHVnVaQ2dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lpVEdsdVpTQjdhVzVrWlhnZ0t5QXhmUzRnVUd4aFkybHVaeUFuY3lCaFpuUmxjaUJoSUc1MWJXSmxjaUJ0YVdkb2RDQmlaU0JoSUcxcGMzUmhhMlV1SUVadmNpQmxlR0Z0Y0d4bExDQjBhR1Z6WlNCM1pYSmxJREl3TURCeklIZHBkR2dnZEdoeVpXVWdNSE1zSUdGdVpDQnVkVzFpWlhJZ01DZHpJR2x1Wm14MVpXNWpaU0J2YmlBeU1EQXdjeWNnWkdGNWN5QjNZWE1nWTJ4bFlYSXVJZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLUW9nSUNBZ2NtVjBkWEp1SUcxcGMzUmhhMlZ6Q2dvS1pHVm1JR1JwWm1acFkzVnNkRjkzYjNKa2N5aDBaWGgwS1RvS0lDQWdJQ2NuSjBOb1pXTnJJR2xtSUhSb1pYSmxJR0Z5WlNCemIyMWxJR052YlhCc1pYZ2dkMjl5WkNCM2FYUm9JSE5wYlhCc1pTQnplVzV2Ym5sdGN5Y25Kd29nSUNBZ2JXbHpkR0ZyWlhNZ1BTQmJYUW9nSUNBZ1ptOTFibVJmZDI5eVpITWdQU0JiWFFvZ0lDQWdaVzUwYVhKbFgzUmxlSFFnUFNCMWJtbDBaVjkyWVd4cFpGOXNhVzVsY3loMFpYaDBLUW9nSUNBZ1ptOXlJSGR2Y21RZ2FXNGdRMDlOVUV4RldGOVhUMUpFVXpvS0lDQWdJQ0FnSUNCdlkyTjFjbUZ1WTJVZ1BTQmxiblJwY21WZmRHVjRkQzVqYjNWdWRDaDNiM0prS1FvZ0lDQWdJQ0FnSUdsbUlDaHZZMk4xY21GdVkyVWdQaUF3S1RvS0lDQWdJQ0FnSUNBZ0lDQWdabTkxYm1SZmQyOXlaSE11WVhCd1pXNWtLSGR2Y21RcENpQWdJQ0JwWmlCbWIzVnVaRjkzYjNKa2N5QWhQU0JiWFRvS0lDQWdJQ0FnSUNCemVXNXZibmx0Y3lBOUlDY25DaUFnSUNBZ0lDQWdaWEp5YjNKeklEMGdKeWNLSUNBZ0lDQWdJQ0JtYjNJZ2QyOXlaQ0JwYmlCbWIzVnVaRjkzYjNKa2N6b0tJQ0FnSUNBZ0lDQWdJQ0FnYzNsdWIyNTViWE1nS3owZ0p5SW5JQ3NnUTA5TlVFeEZXRjlYVDFKRVUxdDNiM0prWFNBcklDY2lMQ0FuQ2lBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5Y3lBclBTQW5JaWNnS3lCM2IzSmtJQ3NnSnlJc0lDY0tJQ0FnSUNBZ0lDQnRhWE4wWVd0bGN5NWhjSEJsYm1Rb0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUoxbHZkU0IxYzJWa0lITnZiV1VnWkdsbVptbGpkV3gwSUhkdmNtUnpJR3hwYTJVZ2UyVnljbTl5YzFzNkxUSmRmUzRnVkhKNUlIVnphVzVuSUhOcGJYQnNaU0J6ZVc1dmJubHRjeXdnYkdsclpTQjdjM2x1YjI1NWJYTmJPaTB5WFgwZ1ltVmpZWFZ6WlNCdGIzTjBJSEpsWVdSbGNuTWdiMllnYzJOcFpXNTBhV1pwWXlCd1lYQmxjbk1nWVhKbElHNXZkQ0J1WVhScGRtVWdSVzVuYkdsemFDQnpjR1ZoYTJWeWN5NG5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBDaUFnSUNCeVpYUjFjbTRnYldsemRHRnJaWE1LQ2dwa1pXWWdiV0ZwYmloMFpYaDBMQ0JsYm1kc2FYTm9QU2RoYldWeWFXTmhiaWNwT2dvZ0lDQWdKeWNuVkdocGN5QnBjeUIwYUdVZ2JXRnBiaUJtZFc1amRHbHZiaUIwYUdGMElISjFibk1nWVd4c0lHTm9aV05yY3lCaGJtUWdjbVYwZFhKdWN5QjBhR1VnY21WemRXeDBjeWNuSndvZ0lDQWdjbVZ6ZFd4MGN5QTlJRnRkQ2lBZ0lDQWpJRU5vWldOcmN5Qm1iM0lnVEdGVVpWZ3RjM0JsWTJsbWFXTWdhWE56ZFdWek9nb2dJQ0FnYVdZZ2FYUmZhWE5mYkdGMFpYaGZkR1Y0ZENoMFpYaDBLVG9LSUNBZ0lDQWdJQ0J5WlhOMWJIUnpJQ3M5SUhScGRHeGxYMnhsYm1kb2RDaDBaWGgwS1FvZ0lDQWdJQ0FnSUhKbGMzVnNkSE1nS3owZ1lXSnpkSEpoWTNSZmJHVnVaMmgwS0hSbGVIUXBDaUFnSUNBZ0lDQWdjbVZ6ZFd4MGN5QXJQU0J5WldabGNtVnVZMlZ6S0hSbGVIUXBDaUFnSUNBZ0lDQWdjbVZ6ZFd4MGN5QXJQU0JzWVhSbGVGOWlaWE4wWDNCeVlXTjBhV05sY3loMFpYaDBLUW9LSUNBZ0lDTWdSMlZ1WlhKaGJDQmphR1ZqYTNNNkNpQWdJQ0J5WlhOMWJIUnpJQ3M5SUdsdWRISnZYM0JoZEhSbGNtNXpLSFJsZUhRcENpQWdJQ0J5WlhOMWJIUnpJQ3M5SUdWc1pXMWxiblJ6S0hSbGVIUXBDaUFnSUNCeVpYTjFiSFJ6SUNzOUlHRmlZbkpsZG1saGRHbHZibk1vZEdWNGRDa0tJQ0FnSUhKbGMzVnNkSE1nS3owZ1pHbG1abWxqZFd4MFgzZHZjbVJ6S0hSbGVIUXBDZ29nSUNBZ0l5QkRhR1ZqYTNNZ1ptOXlJR1ZoWTJnZ2JHbHVaU0IzYUdsamFDQnBjeUJ1YjNRZ1lTQmpiMjF0Wlc1ME9nb2dJQ0FnWm05eUlHbHVaR1Y0TENCc2FXNWxJR2x1SUdWdWRXMWxjbUYwWlNoMFpYaDBLVG9LSUNBZ0lDQWdJQ0JwWmlCc2FXNWxYMmx6WDNaaGJHbGtLR3hwYm1VcE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUnpJQ3M5SUdKaFpGOXdZWFIwWlhKdWN5aHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQndhSEpoYzJWelgzZHBkR2hmZG1WeWVTaHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQnBibDlqYjI1amJIVnphVzl1Y3loc2FXNWxMQ0JwYm1SbGVDd2dkR1Y0ZENrS0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MGN5QXJQU0JqYjIxdFlWOWhablJsY2loc2FXNWxMQ0JwYm1SbGVDa0tJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBjeUFyUFNCbWFXZDFjbVZmY21WbVpYSmxibU5sY3loc2FXNWxMQ0JwYm1SbGVDa0tJQ0FnSUNBZ0lDQWdJQ0FnSXlCeVpYTjFiSFJ6SUNzOUlITjBZWEowWDNkcGRHaGZiblZ0WW1WeWN5aHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQnVkVzFpWlhKelgyNWxlSFJmZEc5ZmRXNXBkSE1vYkdsdVpTd2dhVzVrWlhncENpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RITWdLejBnWW5KcGRHbHphRjl6Y0dWc2JHbHVaeWhzYVc1bExDQnBibVJsZUN3Z1pXNW5iR2x6YUNrS0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MGN5QXJQU0J2ZG1WeVkybDBZWFJwYjI0b2JHbHVaU3dnYVc1a1pYZ3BDaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkSE1nS3owZ2NtVmtkVzVrWVc1amVTaHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQnVaV2RoZEdsMlpYTW9iR2x1WlN3Z2FXNWtaWGdwQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNZ0t6MGdZV0p6YjJ4MWRHVnpLR3hwYm1Vc0lHbHVaR1Y0S1FvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSeklDczlJSE5sYm5SbGJtTmxYMnhsYm1kMGFDaHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQmpiMjF3WVhKcGJtZGZZV0p6YjJ4MWRHVnpLR3hwYm1Vc0lHbHVaR1Y0S1FvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSeklDczlJR05zYVdOb1pYTW9iR2x1WlN3Z2FXNWtaWGdwQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNZ0t6MGdiblZ0WW1WeWMxOTNhWFJvWDNNb2JHbHVaU3dnYVc1a1pYZ3BDaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkSE1nS3owZ2FXNWZkR2hsWDI1aGJXVmZiMlpmYkdGM0tHeHBibVVzSUdsdVpHVjRLUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJ6SUNzOUlHVjRkSEpsYldWZmNYVmhiblJwZEdsbGN5aHNhVzVsTENCcGJtUmxlQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBclBTQnVkVzFpWlhKZmIyWmZkR2x0WlhNb2JHbHVaU3dnYVc1a1pYZ3BDZ29nSUNBZ2FXWWdiR1Z1S0hKbGMzVnNkSE1wSUQwOUlEQTZDaUFnSUNBZ0lDQWdjbVZ6ZFd4MGN5QTlJRnNpVEc5dmEzTWdiR2xyWlNCMGFHbHpJSFJsZUhRZ2FYTWdjR1Z5Wm1WamRDRWlYUW9nSUNBZ2NtVjBkWEp1SUhKbGMzVnNkSE1LQ2dwa1pXWWdjM1JoYm1SaGJHOXVaVjl5ZFc0b0tUb0tJQ0FnSUNjbkoxUm9hWE1nY25WdWN5QndjbTluY21GdElHbHVJSFJvWlNCemRHRnVaR0ZzYjI1bElISmxaMmx0WlN3Z2FuVnpkQ0JoY3lCaElIQjVkR2h2YmlCelkzSnBjSFFuSnljS0lDQWdJSEJoZEdnZ1BTQWllVzkxY2w5MFpYaDBMblI0ZENJS0lDQWdJSGRwZEdnZ2IzQmxiaWh3WVhSb0xDQWljaUlwSUdGeklHMWhiblZ6WTNKcGNIUTZDaUFnSUNBZ0lDQWdkR1Y0ZENBOUlHMWhiblZ6WTNKcGNIUXVjbVZoWkd4cGJtVnpLQ2tLSUNBZ0lISmxjM1ZzZEhNZ1BTQnRZV2x1S0hSbGVIUXBDaUFnSUNCbWIzSWdiR2x1WlNCcGJpQnlaWE4xYkhSek9nb2dJQ0FnSUNBZ0lIQnlhVzUwS0d4cGJtVWdLeUFpWEc0aUtRPT1gO1xuZnVuY3Rpb24gY29tcGlsZVNjcmlwdCh0ZXh0LCBlbmdsaXNoKVxue1xuXHRsZXQgY3VzdG9tX3NjcmlwdCA9IGBcblxuZGVmIG9ic2lkaWFuX2Z1bmModGV4dCwgZW5nbGlzaD1cImFtZXJpY2FuXCIpOlxuXHR0ZXh0ID0gdGV4dC5zcGxpdChcIlxcXFxuXCIpXG5cdHByaW50KGpzb24uZHVtcHMobWFpbih0ZXh0LCBlbmdsaXNoKSkpXG5cbm9ic2lkaWFuX2Z1bmMoXCJcIlwiJHt0ZXh0fVwiXCJcIiwgXCIke2VuZ2xpc2h9XCIpXG5cblx0YDtcblx0cmV0dXJuIGF0b2Ioc2NyaXB0KSArIGN1c3RvbV9zY3JpcHQ7XG59XG5leHBvcnQgY29uc3QgQW5ncnlSZXZpZXdlclNjcmlwdCA9IGNvbXBpbGVTY3JpcHQ7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxRQUFBLFdBQUEsUUFBQSxRQUFBO0FBQ0EsUUFBQSxrQkFBQSxRQUFBLGVBQUE7QUFDQSxRQUFBLE9BQUEsUUFBQSxJQUFBO0FBQ0EsUUFBQSxTQUFBLFFBQUEsTUFBQTtBQUNBLFFBQUEsV0FBQSxRQUFBLFFBQUE7QUFDQSxRQUFBLE9BQUEsUUFBQSxJQUFBO0FBQ0EsUUFBQSxTQUFBLFFBQUEsTUFBQTtBQUVBLGFBQVMsUUFBVyxRQUFnQjtBQUNoQyxVQUFJLE9BQU8sV0FBVyxlQUFlLFdBQVcsTUFBTTtBQUNsRCxlQUFPLENBQUE7aUJBQ0EsQ0FBQyxNQUFNLFFBQVEsTUFBTSxHQUFHO0FBQy9CLGVBQU8sQ0FBQyxNQUFNOztBQUVsQixhQUFPO0lBQ1g7QUFLQSxhQUFTLE9BQU8sUUFBWSxNQUFJO0FBQzVCLFlBQU0sVUFBVSxNQUFNLEtBQUssV0FBVyxDQUFDLEVBQUUsUUFBUSxTQUFVLFFBQU07QUFDN0QsWUFBSSxRQUFRO0FBQ1IsbUJBQVMsT0FBTyxRQUFRO0FBQ3BCLGdCQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUc7OztNQUdqQyxDQUFDO0FBQ0QsYUFBTztJQUNYO0FBS0EsYUFBUyxlQUFZO0FBQ2pCLGFBQU8sS0FBSyxNQUFNLEtBQUssT0FBTSxJQUFLLElBQVc7SUFDakQ7QUFFQSxRQUFNLGVBQWMsR0FBQSxPQUFBLFdBQVUsZ0JB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
